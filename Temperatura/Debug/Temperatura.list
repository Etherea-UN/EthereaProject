
Temperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000740c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  080075b0  080075b0  000175b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c64  08007c64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007c64  08007c64  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c64  08007c64  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001e8  08007e50  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08007e50  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e43  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e30  00000000  00000000  00024057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  00024e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  000251e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001182b  00000000  00000000  000254c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000044cb  00000000  00000000  00036ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058cd0  00000000  00000000  0003b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093e86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  00093ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007594 	.word	0x08007594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08007594 	.word	0x08007594

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <main>:
//Definición de funciones
void initSystem(void);
void readTemperature(void);
void parseCommands(char *ptrBufferReception);

int main(void){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	//Activación del coprocesador matemático
	SCB->CPACR |= (0xF << 20);
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <main+0xcc>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <main+0xcc>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	initSystem();
 8000d38:	f000 f960 	bl	8000ffc <initSystem>

	/* Como la válvula es normalmente abierta, se requiere que inmediatamente
	 * el sistema inicie la válvula se cierre para que sea posible la conexión con
	 * el tanque de combustible
	 */
	GPIO_WritePin(&handlerValvePin, SET);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	482d      	ldr	r0, [pc, #180]	; (8000df4 <main+0xd0>)
 8000d40:	f000 fdd6 	bl	80018f0 <GPIO_WritePin>

	/* Se imprimen los mensajes de inicio para dar info al usuario
	 * sobre el manejo del dispositivo
	 */

	writeMsg(&handlerUsart1, "\nPress . \n");
 8000d44:	492c      	ldr	r1, [pc, #176]	; (8000df8 <main+0xd4>)
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <main+0xd8>)
 8000d48:	f001 f9c4 	bl	80020d4 <writeMsg>
	while(1){

		//Creamos una cadena de caracteres con los datos que llegan por el puerto serial
		//El caracter '@' nos indica que es el final de la cadena

		if ((rxData != '\0') && (rxData != '.')){
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <main+0xdc>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d023      	beq.n	8000d9c <main+0x78>
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <main+0xdc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b2e      	cmp	r3, #46	; 0x2e
 8000d5a:	d01f      	beq.n	8000d9c <main+0x78>
			bufferReception[counterReception] = rxData;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <main+0xe0>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <main+0xdc>)
 8000d64:	7819      	ldrb	r1, [r3, #0]
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <main+0xe4>)
 8000d68:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <main+0xe0>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <main+0xe0>)
 8000d74:	801a      	strh	r2, [r3, #0]

			//Se define el siguiente caracter para indicar que el string está completo
			if(rxData == ','){
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <main+0xdc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7c:	d10b      	bne.n	8000d96 <main+0x72>

				stringComplete = true;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <main+0xe8>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]

				//Agrego esta línea para crear el string con null al final
				bufferReception[counterReception-1] = '\0';
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <main+0xe0>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <main+0xe4>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	54d1      	strb	r1, [r2, r3]

				counterReception = 0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <main+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
			}
			//Para que no vuelva a entrar, Solo cambia debido a la interrupción
			rxData = '\0';
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <main+0xdc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
		}
		if (rxData == '.'){
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <main+0xdc>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b2e      	cmp	r3, #46	; 0x2e
 8000da2:	d11a      	bne.n	8000dda <main+0xb6>
			writeMsg(&handlerUsart1, "\n~Iniciando Sistema~\n");
 8000da4:	491a      	ldr	r1, [pc, #104]	; (8000e10 <main+0xec>)
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <main+0xd8>)
 8000da8:	f001 f994 	bl	80020d4 <writeMsg>
			writeMsg(&handlerUsart1, "\nacc  -->  Calibración del Accel-Gyro \n");
 8000dac:	4919      	ldr	r1, [pc, #100]	; (8000e14 <main+0xf0>)
 8000dae:	4813      	ldr	r0, [pc, #76]	; (8000dfc <main+0xd8>)
 8000db0:	f001 f990 	bl	80020d4 <writeMsg>
			writeMsg(&handlerUsart1, "\nshow  -->  Presenta los datos actuales capturados por los sensores \n");
 8000db4:	4918      	ldr	r1, [pc, #96]	; (8000e18 <main+0xf4>)
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <main+0xd8>)
 8000db8:	f001 f98c 	bl	80020d4 <writeMsg>
			writeMsg(&handlerUsart1, "\ndata  -->  Muestra de manera periodica los datos tomados por los sesores \n");
 8000dbc:	4917      	ldr	r1, [pc, #92]	; (8000e1c <main+0xf8>)
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <main+0xd8>)
 8000dc0:	f001 f988 	bl	80020d4 <writeMsg>
			writeMsg(&handlerUsart1, "\nstop  -->  Detiene la muestra de datos \n");
 8000dc4:	4916      	ldr	r1, [pc, #88]	; (8000e20 <main+0xfc>)
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <main+0xd8>)
 8000dc8:	f001 f984 	bl	80020d4 <writeMsg>
			writeMsg(&handlerUsart1, "\nvalve  -->  Alto o bajo para cerrar o abrir la valvula de combustible \n");
 8000dcc:	4915      	ldr	r1, [pc, #84]	; (8000e24 <main+0x100>)
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <main+0xd8>)
 8000dd0:	f001 f980 	bl	80020d4 <writeMsg>
			rxData = '\0';
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <main+0xdc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		}

		//Hacemos un análisis de la cadena de datos obtenida
		if(stringComplete){
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <main+0xe8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0b4      	beq.n	8000d4c <main+0x28>

			parseCommands(bufferReception);
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <main+0xe4>)
 8000de4:	f000 f820 	bl	8000e28 <parseCommands>
			stringComplete = false;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <main+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		if ((rxData != '\0') && (rxData != '.')){
 8000dee:	e7ad      	b.n	8000d4c <main+0x28>
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	20000228 	.word	0x20000228
 8000df8:	080075b0 	.word	0x080075b0
 8000dfc:	2000025c 	.word	0x2000025c
 8000e00:	20000304 	.word	0x20000304
 8000e04:	20000322 	.word	0x20000322
 8000e08:	20000424 	.word	0x20000424
 8000e0c:	20000320 	.word	0x20000320
 8000e10:	080075bc 	.word	0x080075bc
 8000e14:	080075d4 	.word	0x080075d4
 8000e18:	08007600 	.word	0x08007600
 8000e1c:	08007648 	.word	0x08007648
 8000e20:	08007694 	.word	0x08007694
 8000e24:	080076c0 	.word	0x080076c0

08000e28 <parseCommands>:

	}
	return 0;
}

void parseCommands(char *ptrBufferReception){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

	sscanf(ptrBufferReception, "%s", cmd);
 8000e30:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <parseCommands+0x188>)
 8000e32:	4960      	ldr	r1, [pc, #384]	; (8000fb4 <parseCommands+0x18c>)
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f002 f9a3 	bl	8003180 <siscanf>

	if(strcmp(cmd, "acc") == 0){
 8000e3a:	495f      	ldr	r1, [pc, #380]	; (8000fb8 <parseCommands+0x190>)
 8000e3c:	485c      	ldr	r0, [pc, #368]	; (8000fb0 <parseCommands+0x188>)
 8000e3e:	f7ff f9cf 	bl	80001e0 <strcmp>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d13d      	bne.n	8000ec4 <parseCommands+0x9c>

		//Inicialización del MPU6050
		writeMsg(&handlerUsart1, "Comunicación iniciada\n");
 8000e48:	495c      	ldr	r1, [pc, #368]	; (8000fbc <parseCommands+0x194>)
 8000e4a:	485d      	ldr	r0, [pc, #372]	; (8000fc0 <parseCommands+0x198>)
 8000e4c:	f001 f942 	bl	80020d4 <writeMsg>

		//Se cargan los datos de calibración correspondientes al Accel
		readTemperature();
 8000e50:	f000 f99c 	bl	800118c <readTemperature>
		uint16_t datoT = (uint16_t)(i2cBuffer[0]<< 8)|(i2cBuffer[1]);
 8000e54:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <parseCommands+0x19c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b59      	ldr	r3, [pc, #356]	; (8000fc4 <parseCommands+0x19c>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	81fb      	strh	r3, [r7, #14]
		float32_t grados = (((float32_t)datoT )/ 65536.0f) * (165.0f -40.0f);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e6e:	eddf 6a56 	vldr	s13, [pc, #344]	; 8000fc8 <parseCommands+0x1a0>
 8000e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e76:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000fcc <parseCommands+0x1a4>
 8000e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7e:	edc7 7a02 	vstr	s15, [r7, #8]
		temperatura = (grados - 23.8);
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f7ff fb78 	bl	8000578 <__aeabi_f2d>
 8000e88:	a347      	add	r3, pc, #284	; (adr r3, 8000fa8 <parseCommands+0x180>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fa13 	bl	80002b8 <__aeabi_dsub>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff febd 	bl	8000c18 <__aeabi_d2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <parseCommands+0x1a8>)
 8000ea2:	6013      	str	r3, [r2, #0]
		sprintf(bufferData, "Temperature: %.2f \n", temperatura);
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <parseCommands+0x1a8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb65 	bl	8000578 <__aeabi_f2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4948      	ldr	r1, [pc, #288]	; (8000fd4 <parseCommands+0x1ac>)
 8000eb4:	4848      	ldr	r0, [pc, #288]	; (8000fd8 <parseCommands+0x1b0>)
 8000eb6:	f002 f943 	bl	8003140 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8000eba:	4947      	ldr	r1, [pc, #284]	; (8000fd8 <parseCommands+0x1b0>)
 8000ebc:	4840      	ldr	r0, [pc, #256]	; (8000fc0 <parseCommands+0x198>)
 8000ebe:	f001 f909 	bl	80020d4 <writeMsg>
		}
	}
	else{
		writeMsg(&handlerUsart1, "\nError!: Wrong command \n");
	}
}
 8000ec2:	e06d      	b.n	8000fa0 <parseCommands+0x178>
	else if(strcmp(cmd, "show") == 0){
 8000ec4:	4945      	ldr	r1, [pc, #276]	; (8000fdc <parseCommands+0x1b4>)
 8000ec6:	483a      	ldr	r0, [pc, #232]	; (8000fb0 <parseCommands+0x188>)
 8000ec8:	f7ff f98a 	bl	80001e0 <strcmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d13d      	bne.n	8000f4e <parseCommands+0x126>
		writeMsg(&handlerUsart1, "Comunicación iniciada\n");
 8000ed2:	493a      	ldr	r1, [pc, #232]	; (8000fbc <parseCommands+0x194>)
 8000ed4:	483a      	ldr	r0, [pc, #232]	; (8000fc0 <parseCommands+0x198>)
 8000ed6:	f001 f8fd 	bl	80020d4 <writeMsg>
		readTemperature();
 8000eda:	f000 f957 	bl	800118c <readTemperature>
		uint16_t datoT = (uint16_t)(i2cBuffer[0]<< 8)|(i2cBuffer[1]);
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <parseCommands+0x19c>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <parseCommands+0x19c>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	82fb      	strh	r3, [r7, #22]
		float32_t grados = (((float32_t)datoT )/ 65536.0f) * (165.0f -40.0f);
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef8:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000fc8 <parseCommands+0x1a0>
 8000efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000fcc <parseCommands+0x1a4>
 8000f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f08:	edc7 7a04 	vstr	s15, [r7, #16]
		temperatura = (grados - 23.8);
 8000f0c:	6938      	ldr	r0, [r7, #16]
 8000f0e:	f7ff fb33 	bl	8000578 <__aeabi_f2d>
 8000f12:	a325      	add	r3, pc, #148	; (adr r3, 8000fa8 <parseCommands+0x180>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff f9ce 	bl	80002b8 <__aeabi_dsub>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fe78 	bl	8000c18 <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <parseCommands+0x1a8>)
 8000f2c:	6013      	str	r3, [r2, #0]
		sprintf(bufferData, "Temperature: %.2f \n", temperatura);
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <parseCommands+0x1a8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb20 	bl	8000578 <__aeabi_f2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4925      	ldr	r1, [pc, #148]	; (8000fd4 <parseCommands+0x1ac>)
 8000f3e:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <parseCommands+0x1b0>)
 8000f40:	f002 f8fe 	bl	8003140 <siprintf>
		writeMsg(&handlerUsart1, bufferData);
 8000f44:	4924      	ldr	r1, [pc, #144]	; (8000fd8 <parseCommands+0x1b0>)
 8000f46:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <parseCommands+0x198>)
 8000f48:	f001 f8c4 	bl	80020d4 <writeMsg>
}
 8000f4c:	e028      	b.n	8000fa0 <parseCommands+0x178>
	else if(strcmp(cmd, "stop") == 0){
 8000f4e:	4924      	ldr	r1, [pc, #144]	; (8000fe0 <parseCommands+0x1b8>)
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <parseCommands+0x188>)
 8000f52:	f7ff f945 	bl	80001e0 <strcmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <parseCommands+0x13c>
		dataOn = 0;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <parseCommands+0x1bc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	e01d      	b.n	8000fa0 <parseCommands+0x178>
	else if(strcmp(cmd, "valve") == 0){
 8000f64:	4920      	ldr	r1, [pc, #128]	; (8000fe8 <parseCommands+0x1c0>)
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <parseCommands+0x188>)
 8000f68:	f7ff f93a 	bl	80001e0 <strcmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d112      	bne.n	8000f98 <parseCommands+0x170>
		GPIOxTooglePin(&handlerValvePin);
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <parseCommands+0x1c4>)
 8000f74:	f000 fcfd 	bl	8001972 <GPIOxTooglePin>
		if(GPIO_ReadPin(&handlerValvePin) == 1){
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <parseCommands+0x1c4>)
 8000f7a:	f000 fce4 	bl	8001946 <GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d104      	bne.n	8000f8e <parseCommands+0x166>
			writeMsg(&handlerUsart1, "\nVálvula cerrada \n");
 8000f84:	491a      	ldr	r1, [pc, #104]	; (8000ff0 <parseCommands+0x1c8>)
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <parseCommands+0x198>)
 8000f88:	f001 f8a4 	bl	80020d4 <writeMsg>
}
 8000f8c:	e008      	b.n	8000fa0 <parseCommands+0x178>
			writeMsg(&handlerUsart1, "\nVálvula abierta \n");
 8000f8e:	4919      	ldr	r1, [pc, #100]	; (8000ff4 <parseCommands+0x1cc>)
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <parseCommands+0x198>)
 8000f92:	f001 f89f 	bl	80020d4 <writeMsg>
}
 8000f96:	e003      	b.n	8000fa0 <parseCommands+0x178>
		writeMsg(&handlerUsart1, "\nError!: Wrong command \n");
 8000f98:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <parseCommands+0x1d0>)
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <parseCommands+0x198>)
 8000f9c:	f001 f89a 	bl	80020d4 <writeMsg>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	cccccccd 	.word	0xcccccccd
 8000fac:	4037cccc 	.word	0x4037cccc
 8000fb0:	20000324 	.word	0x20000324
 8000fb4:	0800770c 	.word	0x0800770c
 8000fb8:	08007710 	.word	0x08007710
 8000fbc:	08007714 	.word	0x08007714
 8000fc0:	2000025c 	.word	0x2000025c
 8000fc4:	20000310 	.word	0x20000310
 8000fc8:	47800000 	.word	0x47800000
 8000fcc:	42fa0000 	.word	0x42fa0000
 8000fd0:	200005a4 	.word	0x200005a4
 8000fd4:	0800772c 	.word	0x0800772c
 8000fd8:	20000524 	.word	0x20000524
 8000fdc:	08007740 	.word	0x08007740
 8000fe0:	08007748 	.word	0x08007748
 8000fe4:	20000306 	.word	0x20000306
 8000fe8:	08007750 	.word	0x08007750
 8000fec:	20000228 	.word	0x20000228
 8000ff0:	08007758 	.word	0x08007758
 8000ff4:	0800776c 	.word	0x0800776c
 8000ff8:	08007780 	.word	0x08007780

08000ffc <initSystem>:
void initSystem(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	//Configuración del Blinky
	handlerBlinky.pGPIOx 									= GPIOC;
 8001000:	4b55      	ldr	r3, [pc, #340]	; (8001158 <initSystem+0x15c>)
 8001002:	4a56      	ldr	r2, [pc, #344]	; (800115c <initSystem+0x160>)
 8001004:	601a      	str	r2, [r3, #0]
	handlerBlinky.GPIO_PinConfig.GPIO_PinNumber 			= PIN_0;
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <initSystem+0x15c>)
 8001008:	2200      	movs	r2, #0
 800100a:	711a      	strb	r2, [r3, #4]
	handlerBlinky.GPIO_PinConfig.GPIO_PinMode 				= GPIO_MODE_OUT;
 800100c:	4b52      	ldr	r3, [pc, #328]	; (8001158 <initSystem+0x15c>)
 800100e:	2201      	movs	r2, #1
 8001010:	715a      	strb	r2, [r3, #5]
	handlerBlinky.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8001012:	4b51      	ldr	r3, [pc, #324]	; (8001158 <initSystem+0x15c>)
 8001014:	2200      	movs	r2, #0
 8001016:	721a      	strb	r2, [r3, #8]
	handlerBlinky.GPIO_PinConfig.GPIO_PinSpeed 				= GPIO_OSPEEDR_FAST;
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <initSystem+0x15c>)
 800101a:	2202      	movs	r2, #2
 800101c:	719a      	strb	r2, [r3, #6]
	handlerBlinky.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 800101e:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <initSystem+0x15c>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerBlinky);
 8001024:	484c      	ldr	r0, [pc, #304]	; (8001158 <initSystem+0x15c>)
 8001026:	f000 fb59 	bl	80016dc <GPIO_Config>

	//Configuración del TIM2 (Blinky)
	handlerTimerBlinky.ptrTIMx 								= TIM2;
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <initSystem+0x164>)
 800102c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001030:	601a      	str	r2, [r3, #0]
	handlerTimerBlinky.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <initSystem+0x164>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
	handlerTimerBlinky.TIMx_Config.TIMx_speed 				= BTIMER_SPEED_100us;
 8001038:	4b49      	ldr	r3, [pc, #292]	; (8001160 <initSystem+0x164>)
 800103a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800103e:	609a      	str	r2, [r3, #8]
	handlerTimerBlinky.TIMx_Config.TIMx_period 				= 2500;
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <initSystem+0x164>)
 8001042:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001046:	60da      	str	r2, [r3, #12]
	handlerTimerBlinky.TIMx_Config.TIMx_interruptEnable 	= 1;
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <initSystem+0x164>)
 800104a:	2201      	movs	r2, #1
 800104c:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimerBlinky);
 800104e:	4844      	ldr	r0, [pc, #272]	; (8001160 <initSystem+0x164>)
 8001050:	f000 fa30 	bl	80014b4 <BasicTimer_Config>

	//Configuración del TIM5 (Data)
	handlerTimerData.ptrTIMx 								= TIM5;
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <initSystem+0x168>)
 8001056:	4a44      	ldr	r2, [pc, #272]	; (8001168 <initSystem+0x16c>)
 8001058:	601a      	str	r2, [r3, #0]
	handlerTimerData.TIMx_Config.TIMx_mode 					= BTIMER_MODE_UP;
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <initSystem+0x168>)
 800105c:	2200      	movs	r2, #0
 800105e:	711a      	strb	r2, [r3, #4]
	handlerTimerData.TIMx_Config.TIMx_speed 				= BTIMER_SPEED_100us;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <initSystem+0x168>)
 8001062:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001066:	609a      	str	r2, [r3, #8]
	handlerTimerData.TIMx_Config.TIMx_period 				= 30000;
 8001068:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <initSystem+0x168>)
 800106a:	f247 5230 	movw	r2, #30000	; 0x7530
 800106e:	60da      	str	r2, [r3, #12]
	handlerTimerData.TIMx_Config.TIMx_interruptEnable 		= 1;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <initSystem+0x168>)
 8001072:	2201      	movs	r2, #1
 8001074:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimerData);
 8001076:	483b      	ldr	r0, [pc, #236]	; (8001164 <initSystem+0x168>)
 8001078:	f000 fa1c 	bl	80014b4 <BasicTimer_Config>

	//Configuración comunicación I2C (ACCEL)
	//SDA
	handlerI2cSDA.pGPIOx									= GPIOB;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <initSystem+0x170>)
 800107e:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <initSystem+0x174>)
 8001080:	601a      	str	r2, [r3, #0]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinNumber				= PIN_9;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <initSystem+0x170>)
 8001084:	2209      	movs	r2, #9
 8001086:	711a      	strb	r2, [r3, #4]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <initSystem+0x170>)
 800108a:	2202      	movs	r2, #2
 800108c:	715a      	strb	r2, [r3, #5]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_OPENDRAIN;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <initSystem+0x170>)
 8001090:	2201      	movs	r2, #1
 8001092:	721a      	strb	r2, [r3, #8]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <initSystem+0x170>)
 8001096:	2200      	movs	r2, #0
 8001098:	71da      	strb	r2, [r3, #7]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEEDR_FAST;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <initSystem+0x170>)
 800109c:	2202      	movs	r2, #2
 800109e:	719a      	strb	r2, [r3, #6]
	handlerI2cSDA.GPIO_PinConfig.GPIO_PinAltFunMode			= AF4;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <initSystem+0x170>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2cSDA);
 80010a6:	4831      	ldr	r0, [pc, #196]	; (800116c <initSystem+0x170>)
 80010a8:	f000 fb18 	bl	80016dc <GPIO_Config>

	//SCL
	handlerI2cSCL.pGPIOx									= GPIOB;
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <initSystem+0x178>)
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <initSystem+0x174>)
 80010b0:	601a      	str	r2, [r3, #0]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinNumber				= PIN_8;
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <initSystem+0x178>)
 80010b4:	2208      	movs	r2, #8
 80010b6:	711a      	strb	r2, [r3, #4]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <initSystem+0x178>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	715a      	strb	r2, [r3, #5]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_OPENDRAIN;
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <initSystem+0x178>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	721a      	strb	r2, [r3, #8]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <initSystem+0x178>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	71da      	strb	r2, [r3, #7]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEEDR_FAST;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <initSystem+0x178>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	719a      	strb	r2, [r3, #6]
	handlerI2cSCL.GPIO_PinConfig.GPIO_PinAltFunMode			= AF4;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <initSystem+0x178>)
 80010d2:	2204      	movs	r2, #4
 80010d4:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerI2cSCL);
 80010d6:	4827      	ldr	r0, [pc, #156]	; (8001174 <initSystem+0x178>)
 80010d8:	f000 fb00 	bl	80016dc <GPIO_Config>



	//Configuración de pines para USART2
	//TX Pin (USART2)
	handlerPinTX1.pGPIOx									= GPIOA;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <initSystem+0x17c>)
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <initSystem+0x180>)
 80010e0:	601a      	str	r2, [r3, #0]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinNumber				= PIN_2;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <initSystem+0x17c>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	711a      	strb	r2, [r3, #4]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <initSystem+0x17c>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	715a      	strb	r2, [r3, #5]
	handlerPinTX1.GPIO_PinConfig.GPIO_PinAltFunMode			= AF7;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <initSystem+0x17c>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinTX1);
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <initSystem+0x17c>)
 80010f6:	f000 faf1 	bl	80016dc <GPIO_Config>

	//RX Pin (USART1)
	handlerPinRX1.pGPIOx									= GPIOA;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <initSystem+0x184>)
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <initSystem+0x180>)
 80010fe:	601a      	str	r2, [r3, #0]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinNumber				= PIN_3;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <initSystem+0x184>)
 8001102:	2203      	movs	r2, #3
 8001104:	711a      	strb	r2, [r3, #4]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_ALTFN;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <initSystem+0x184>)
 8001108:	2202      	movs	r2, #2
 800110a:	715a      	strb	r2, [r3, #5]
	handlerPinRX1.GPIO_PinConfig.GPIO_PinAltFunMode			= AF7;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <initSystem+0x184>)
 800110e:	2207      	movs	r2, #7
 8001110:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinRX1);
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <initSystem+0x184>)
 8001114:	f000 fae2 	bl	80016dc <GPIO_Config>

	//Configuración de la comunicación serial USART1
	handlerUsart1.ptrUSARTx	 								= USART2;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <initSystem+0x188>)
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <initSystem+0x18c>)
 800111c:	601a      	str	r2, [r3, #0]
	handlerUsart1.USART_Config.USART_baudrate				= USART_BAUDRATE_9600;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <initSystem+0x188>)
 8001120:	2200      	movs	r2, #0
 8001122:	715a      	strb	r2, [r3, #5]
	handlerUsart1.USART_Config.USART_PLL_EN					= PLL_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <initSystem+0x188>)
 8001126:	2200      	movs	r2, #0
 8001128:	719a      	strb	r2, [r3, #6]
	handlerUsart1.USART_Config.USART_datasize				= USART_DATASIZE_8BIT;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <initSystem+0x188>)
 800112c:	2200      	movs	r2, #0
 800112e:	71da      	strb	r2, [r3, #7]
	handlerUsart1.USART_Config.USART_parity					= USART_PARITY_NONE;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <initSystem+0x188>)
 8001132:	2200      	movs	r2, #0
 8001134:	721a      	strb	r2, [r3, #8]
	handlerUsart1.USART_Config.USART_stopbits				= USART_STOPBIT_1;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <initSystem+0x188>)
 8001138:	2200      	movs	r2, #0
 800113a:	725a      	strb	r2, [r3, #9]
	handlerUsart1.USART_Config.USART_mode					= USART_MODE_RXTX;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <initSystem+0x188>)
 800113e:	2202      	movs	r2, #2
 8001140:	711a      	strb	r2, [r3, #4]
	handlerUsart1.USART_Config.USART_enableIntTX			= USART_TX_INTERRUP_DISABLE;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <initSystem+0x188>)
 8001144:	2200      	movs	r2, #0
 8001146:	72da      	strb	r2, [r3, #11]
	handlerUsart1.USART_Config.USART_enableIntRX			= USART_RX_INTERRUP_ENABLE;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <initSystem+0x188>)
 800114a:	2201      	movs	r2, #1
 800114c:	729a      	strb	r2, [r3, #10]
	USART_Config(&handlerUsart1);
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <initSystem+0x188>)
 8001150:	f000 fd7e 	bl	8001c50 <USART_Config>



}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000204 	.word	0x20000204
 800115c:	40020800 	.word	0x40020800
 8001160:	20000234 	.word	0x20000234
 8001164:	20000248 	.word	0x20000248
 8001168:	40000c00 	.word	0x40000c00
 800116c:	200002ec 	.word	0x200002ec
 8001170:	40020400 	.word	0x40020400
 8001174:	200002f8 	.word	0x200002f8
 8001178:	20000210 	.word	0x20000210
 800117c:	40020000 	.word	0x40020000
 8001180:	2000021c 	.word	0x2000021c
 8001184:	2000025c 	.word	0x2000025c
 8001188:	40004400 	.word	0x40004400

0800118c <readTemperature>:

	return df_config;

}

void readTemperature(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	i2c_reStartTransaction(&i2cSensor);
 8001190:	4819      	ldr	r0, [pc, #100]	; (80011f8 <readTemperature+0x6c>)
 8001192:	f000 fc3d 	bl	8001a10 <i2c_reStartTransaction>

	i2c_sendSlaveAddressRW(&i2cSensor, SENSOR_ADD, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <readTemperature+0x6c>)
 800119c:	f000 fc78 	bl	8001a90 <i2c_sendSlaveAddressRW>

	i2c_sendMemoryaddress(&i2cSensor, TEMPERATURE);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <readTemperature+0x6c>)
 80011a4:	f000 fc9c 	bl	8001ae0 <i2c_sendMemoryaddress>

	i2c_stopTransaction(&i2cSensor);
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <readTemperature+0x6c>)
 80011aa:	f000 fbfa 	bl	80019a2 <i2c_stopTransaction>
	//gpio_WritePin(&pinLedOK, SET);
	delay_ms(20);
 80011ae:	2014      	movs	r0, #20
 80011b0:	f000 fcda 	bl	8001b68 <delay_ms>
	//gpio_WritePin(&pinLedOK, RESET);

	i2c_startTransaction(&i2cSensor);
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <readTemperature+0x6c>)
 80011b6:	f000 fc06 	bl	80019c6 <i2c_startTransaction>

	i2c_sendSlaveAddressRW(&i2cSensor, SENSOR_ADD, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	480e      	ldr	r0, [pc, #56]	; (80011f8 <readTemperature+0x6c>)
 80011c0:	f000 fc66 	bl	8001a90 <i2c_sendSlaveAddressRW>

	/* 6. Activamos el envio de Ack */
	i2c_sendAck(&i2cSensor);
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <readTemperature+0x6c>)
 80011c6:	f000 fc51 	bl	8001a6c <i2c_sendAck>

	/* 8. Leemos el dato que envia el esclavo */
	i2cBuffer[0] = i2c_readDataByte(&i2cSensor);
 80011ca:	480b      	ldr	r0, [pc, #44]	; (80011f8 <readTemperature+0x6c>)
 80011cc:	f000 fca2 	bl	8001b14 <i2c_readDataByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <readTemperature+0x70>)
 80011d6:	801a      	strh	r2, [r3, #0]

	/* 6. Generamos la condición de No-Ack para detener el envio de datos*/
	i2c_sendNoAck(&i2cSensor);
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <readTemperature+0x6c>)
 80011da:	f000 fc35 	bl	8001a48 <i2c_sendNoAck>

	/* Generamos la indicación para terminar la transacción*/
	i2c_stopTransaction(&i2cSensor);
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <readTemperature+0x6c>)
 80011e0:	f000 fbdf 	bl	80019a2 <i2c_stopTransaction>

	/* 8. Leemos el ultimo dato que envia el esclavo */
	i2cBuffer[1] = i2c_readDataByte(&i2cSensor);
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <readTemperature+0x6c>)
 80011e6:	f000 fc95 	bl	8001b14 <i2c_readDataByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b03      	ldr	r3, [pc, #12]	; (80011fc <readTemperature+0x70>)
 80011f0:	805a      	strh	r2, [r3, #2]

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000308 	.word	0x20000308
 80011fc:	20000310 	.word	0x20000310

08001200 <usart2Rx_Callback>:

void usart2Rx_Callback(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	//Leemos el valor del registro DR, donde se almacena el dato que llega.
	rxData = getRxData();
 8001204:	f000 ff7e 	bl	8002104 <getRxData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <usart2Rx_Callback+0x14>)
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000304 	.word	0x20000304

08001218 <BasicTimer2_Callback>:

void BasicTimer2_Callback(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinky);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <BasicTimer2_Callback+0x10>)
 800121e:	f000 fba8 	bl	8001972 <GPIOxTooglePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000204 	.word	0x20000204

0800122c <BasicTimer5_Callback>:

void BasicTimer5_Callback(void){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

	//Bandera que se levanta cada medio segundo para mostrar los datos en consola
	flagData = 1;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <BasicTimer5_Callback+0x14>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000305 	.word	0x20000305

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800125e:	f001 f8bd 	bl	80023dc <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
	return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001286:	e7fe      	b.n	8001286 <_exit+0x12>

08001288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
	}

return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
	}
	return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f001 f822 	bl	80023dc <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20020000 	.word	0x20020000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200005a8 	.word	0x200005a8
 80013cc:	20000648 	.word	0x20000648

080013d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <LoopForever+0x6>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LoopForever+0xe>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <LoopForever+0x16>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013fe:	f000 fff3 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fc8f 	bl	8000d24 <main>

08001406 <LoopForever>:

LoopForever:
    b LoopForever
 8001406:	e7fe      	b.n	8001406 <LoopForever>
  ldr   r0, =_estack
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001414:	08007c6c 	.word	0x08007c6c
  ldr r2, =_sbss
 8001418:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800141c:	20000644 	.word	0x20000644

08001420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <BasicTimer_Config>:
 *Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *el sistema global de interrupciones, activar la IRQ especifica y luego volver a encender
 *el sistema
 */

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	//Guardamos una referencia al periferico que estamos utilizando

	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a59      	ldr	r2, [pc, #356]	; (8001628 <BasicTimer_Config+0x174>)
 80014c2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop

	__disable_irq();

	/*1.Activar la señal de reloj del periferico requerido*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d0:	d106      	bne.n	80014e0 <BasicTimer_Config+0x2c>

		//Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80014d2:	4b56      	ldr	r3, [pc, #344]	; (800162c <BasicTimer_Config+0x178>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a55      	ldr	r2, [pc, #340]	; (800162c <BasicTimer_Config+0x178>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	e024      	b.n	800152a <BasicTimer_Config+0x76>

	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <BasicTimer_Config+0x17c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d106      	bne.n	80014f8 <BasicTimer_Config+0x44>

		//Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80014ea:	4b50      	ldr	r3, [pc, #320]	; (800162c <BasicTimer_Config+0x178>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a4f      	ldr	r2, [pc, #316]	; (800162c <BasicTimer_Config+0x178>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	e018      	b.n	800152a <BasicTimer_Config+0x76>

	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <BasicTimer_Config+0x180>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d106      	bne.n	8001510 <BasicTimer_Config+0x5c>

		//Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <BasicTimer_Config+0x178>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <BasicTimer_Config+0x178>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	e00c      	b.n	800152a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <BasicTimer_Config+0x184>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d106      	bne.n	8001528 <BasicTimer_Config+0x74>

		//Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <BasicTimer_Config+0x178>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <BasicTimer_Config+0x178>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	e000      	b.n	800152a <BasicTimer_Config+0x76>
	}
	else{
		__NOP();
 8001528:	bf00      	nop
	 * Recordar que el pre-escaler nos indica la velocidad a la que se incrementa el counter,
	 * de forma que periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6892      	ldr	r2, [r2, #8]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28

	/*3.Configuramos la direccion del counter (up/down)*/

	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d112      	bne.n	8001562 <BasicTimer_Config+0xae>

		/*3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		//Configurar el registro que nos controla el modo up or down

		ptrBTimerHandler->ptrTIMx->ARR &= ~TIM_CR1_DIR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0210 	bic.w	r2, r2, #16
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3b. Configuramos el Autoreload. Este es el "limite" hasta donde el CNT va a contar */

		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3a01      	subs	r2, #1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3c. Reiniciamos el registro counter*/

		ptrBTimerHandler->ptrTIMx->CNT = RESET;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
 8001560:	e011      	b.n	8001586 <BasicTimer_Config+0xd2>

	}else{
		/*3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza con un valor alto
		 * Trabaja contando en direccion descendente
		 */
		ptrBTimerHandler->ptrTIMx->ARR |= TIM_CR1_DIR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0210 	orr.w	r2, r2, #16
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c

		/*3b. Configuramos el autoreload. Este es el limite hasta donde el CNT va a contar
		 * En modo descendente, con numeros positivos, cual es el minimo valor que el ARR puede tomar*/

		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

		/*3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */

		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3a01      	subs	r2, #1
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

	}

	/*4. Activamos el Timer (el CNT debe comenzar a contar */

	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

	/*5. Activamos la interrupcion debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx */

	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == 1){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7c1b      	ldrb	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d108      	bne.n	80015b0 <BasicTimer_Config+0xfc>
		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	e007      	b.n	80015c0 <BasicTimer_Config+0x10c>
	}
	else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	60da      	str	r2, [r3, #12]
	}

	/*6. Activamos el canal del sistema NVIC para que lea la interrupcion */

	if (ptrBTimerHandler->ptrTIMx == TIM2){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c8:	d107      	bne.n	80015da <BasicTimer_Config+0x126>

		//Activando el NVIC para la interrupcion del TIM2


		NVIC_EnableIRQ(TIM2_IRQn);
 80015ca:	201c      	movs	r0, #28
 80015cc:	f7ff ff2a 	bl	8001424 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM2_IRQn, 3);
 80015d0:	2103      	movs	r1, #3
 80015d2:	201c      	movs	r0, #28
 80015d4:	f7ff ff44 	bl	8001460 <__NVIC_SetPriority>
 80015d8:	e01f      	b.n	800161a <BasicTimer_Config+0x166>
	}
	else if (ptrBTimerHandler->ptrTIMx == TIM3){
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <BasicTimer_Config+0x17c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d103      	bne.n	80015ec <BasicTimer_Config+0x138>

		//Activando el NVIC para la interrupcion del TIM3

		NVIC_EnableIRQ(TIM3_IRQn);
 80015e4:	201d      	movs	r0, #29
 80015e6:	f7ff ff1d 	bl	8001424 <__NVIC_EnableIRQ>
 80015ea:	e016      	b.n	800161a <BasicTimer_Config+0x166>
	}
	else if(ptrTimerUsed == TIM4){
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <BasicTimer_Config+0x174>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a10      	ldr	r2, [pc, #64]	; (8001634 <BasicTimer_Config+0x180>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d103      	bne.n	80015fe <BasicTimer_Config+0x14a>

			// Activando en NVIC para la interrupción del TIM3

		NVIC_EnableIRQ(TIM4_IRQn);
 80015f6:	201e      	movs	r0, #30
 80015f8:	f7ff ff14 	bl	8001424 <__NVIC_EnableIRQ>
 80015fc:	e00d      	b.n	800161a <BasicTimer_Config+0x166>
	}
	else if(ptrTimerUsed == TIM5){
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <BasicTimer_Config+0x174>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <BasicTimer_Config+0x184>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d107      	bne.n	8001618 <BasicTimer_Config+0x164>

			// Activando en NVIC para la interrupción del TIM3

		NVIC_EnableIRQ(TIM5_IRQn);
 8001608:	2032      	movs	r0, #50	; 0x32
 800160a:	f7ff ff0b 	bl	8001424 <__NVIC_EnableIRQ>
		__NVIC_SetPriority(TIM5_IRQn, 5);
 800160e:	2105      	movs	r1, #5
 8001610:	2032      	movs	r0, #50	; 0x32
 8001612:	f7ff ff25 	bl	8001460 <__NVIC_SetPriority>
 8001616:	e000      	b.n	800161a <BasicTimer_Config+0x166>
	}
	else{
		__NOP();
 8001618:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800161a:	b662      	cpsie	i
}
 800161c:	bf00      	nop
	}

	/*7. Volvemos a activar las interrupciones del sistema*/

	__enable_irq();
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200005ac 	.word	0x200005ac
 800162c:	40023800 	.word	0x40023800
 8001630:	40000400 	.word	0x40000400
 8001634:	40000800 	.word	0x40000800
 8001638:	40000c00 	.word	0x40000c00

0800163c <BasicTimer3_Callback>:
	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer2_Callback could be implemented in the main file */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer3_Callback could be implemented in the main file */
	__NOP();
 8001640:	bf00      	nop
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void){
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

	/*NOTE: This function should not be modified, when the callback id needed
	 * the BasicTimer4_Callback could be implemented in the main file */
	__NOP();
 8001650:	bf00      	nop
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <TIM2_IRQHandler>:
/*Esta es la funcion a la que apunta el ssema en el vector de interrupciones.
 * Se debe utilizar usando el mismo nombre definido en el vector de interrupciones.
 * Al hacerlo correctamente, el sistema apunta a esta funcion y cuando la interrupcion se lanza
 * el sistema inmediatamente salta a este lugar en la memoria */

void TIM2_IRQHandler(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM2->SR &= ~TIM_SR_UIF;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <TIM2_IRQHandler+0x1c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <TIM2_IRQHandler+0x1c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer2_Callback();
 8001670:	f7ff fdd2 	bl	8001218 <BasicTimer2_Callback>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000

0800167c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM3->SR &= ~TIM_SR_UIF;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <TIM3_IRQHandler+0x1c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <TIM3_IRQHandler+0x1c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer3_Callback();
 8001690:	f7ff ffd4 	bl	800163c <BasicTimer3_Callback>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000004 	.word	0x20000004

0800169c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM4->SR &= ~TIM_SR_UIF;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <TIM4_IRQHandler+0x1c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <TIM4_IRQHandler+0x1c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer4_Callback();
 80016b0:	f7ff ffcc 	bl	800164c <BasicTimer4_Callback>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000008 	.word	0x20000008

080016bc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

	/*Limpiamos la bandera que indica que la interrupcion se ha generado */

	ptrTIM5->SR &= ~TIM_SR_UIF;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <TIM5_IRQHandler+0x1c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <TIM5_IRQHandler+0x1c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	611a      	str	r2, [r3, #16]

	/*Lamamos a la funcion que se debe encargar de hacer algo con esta interrupcion */

	BasicTimer5_Callback();
 80016d0:	f7ff fdac 	bl	800122c <BasicTimer5_Callback>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000000c 	.word	0x2000000c

080016dc <GPIO_Config>:
 * Lo primero y mas importante es activar la señal de reloj principal hacia
 * ese elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todo paso a paso

	uint32_t auxConfig = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]

	//1)Activar el periferico
	//Verificamos para GPIOA

	if (pGPIOHandler->pGPIOx == GPIOA){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a78      	ldr	r2, [pc, #480]	; (80018d4 <GPIO_Config+0x1f8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d106      	bne.n	8001704 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80016f6:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <GPIO_Config+0x1fc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a77      	ldr	r2, [pc, #476]	; (80018d8 <GPIO_Config+0x1fc>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	e03a      	b.n	800177a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB

	else if (pGPIOHandler->pGPIOx == GPIOB){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a74      	ldr	r2, [pc, #464]	; (80018dc <GPIO_Config+0x200>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d106      	bne.n	800171c <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <GPIO_Config+0x1fc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a71      	ldr	r2, [pc, #452]	; (80018d8 <GPIO_Config+0x1fc>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	e02e      	b.n	800177a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC

	else if (pGPIOHandler->pGPIOx == GPIOC){
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6f      	ldr	r2, [pc, #444]	; (80018e0 <GPIO_Config+0x204>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d106      	bne.n	8001734 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8001726:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <GPIO_Config+0x1fc>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a6b      	ldr	r2, [pc, #428]	; (80018d8 <GPIO_Config+0x1fc>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	e022      	b.n	800177a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD

	else if (pGPIOHandler->pGPIOx == GPIOD){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6a      	ldr	r2, [pc, #424]	; (80018e4 <GPIO_Config+0x208>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d106      	bne.n	800174c <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <GPIO_Config+0x1fc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <GPIO_Config+0x1fc>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	e016      	b.n	800177a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE

	else if (pGPIOHandler->pGPIOx == GPIOE){
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <GPIO_Config+0x20c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d106      	bne.n	8001764 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <GPIO_Config+0x1fc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a5f      	ldr	r2, [pc, #380]	; (80018d8 <GPIO_Config+0x1fc>)
 800175c:	f043 0310 	orr.w	r3, r3, #16
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	e00a      	b.n	800177a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if (pGPIOHandler->pGPIOx ==GPIOH){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <GPIO_Config+0x210>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d105      	bne.n	800177a <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH

		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <GPIO_Config+0x1fc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a59      	ldr	r2, [pc, #356]	; (80018d8 <GPIO_Config+0x1fc>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
	//2.Configurando el registro GPIOx_MODER
	/*Aca estamos leyendo la config moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	 * y todo eso lo cargamos a en la variable auxConfig
	 */

	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	795b      	ldrb	r3, [r3, #5]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	60fb      	str	r3, [r7, #12]

	/*Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operacion bitwise AND
	 */

	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2103      	movs	r1, #3
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	400a      	ands	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

	//Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

	//3.Configurando el registro GPIOx_OTYPER
	//De nuevo leemos y movemos el valor un numero "PinNumber de veces

	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7a1b      	ldrb	r3, [r3, #8]
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	60fb      	str	r3, [r7, #12]

	//Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	2301      	movs	r3, #1
 80017d8:	408b      	lsls	r3, r1
 80017da:	43db      	mvns	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	400a      	ands	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]

	//5.Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	79db      	ldrb	r3, [r3, #7]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]

	//Limpiamos la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2103      	movs	r1, #3
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	4619      	mov	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	400a      	ands	r2, r1
 8001824:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]


	//Esta es la parte para la configuracion de las funciones alternativas
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	795b      	ldrb	r3, [r3, #5]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d143      	bne.n	80018c6 <GPIO_Config+0x1ea>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	2b07      	cmp	r3, #7
 8001844:	d81f      	bhi.n	8001886 <GPIO_Config+0x1aa>

			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN:7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	210f      	movs	r1, #15
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	400a      	ands	r2, r1
 8001866:	621a      	str	r2, [r3, #32]

			//Escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7a5b      	ldrb	r3, [r3, #9]
 8001872:	4619      	mov	r1, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	621a      	str	r2, [r3, #32]
			//Escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}  //Fin del GPIO_config
 8001884:	e01f      	b.n	80018c6 <GPIO_Config+0x1ea>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	3b08      	subs	r3, #8
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001896:	210f      	movs	r1, #15
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	400a      	ands	r2, r1
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7a5b      	ldrb	r3, [r3, #9]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
}  //Fin del GPIO_config
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40021c00 	.word	0x40021c00

080018f0 <GPIO_WritePin>:

/*Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);

	if (newState == SET){
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <GPIO_WritePin+0x2e>

		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	4619      	mov	r1, r3
 800190e:	2301      	movs	r3, #1
 8001910:	408b      	lsls	r3, r1
 8001912:	4619      	mov	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	619a      	str	r2, [r3, #24]
	else{

		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800191c:	e00d      	b.n	800193a <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699a      	ldr	r2, [r3, #24]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	3310      	adds	r3, #16
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4619      	mov	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <GPIO_ReadPin>:

/*Funcion para leer el estado de un pin especifico
 *
 */

uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]

	//Creamos una variable auxiliar la cual luego reotrnaremos
	uint32_t pinValue = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]

	/*Cargamos el valor del registro IDR, desplazado a la derecha tantas veces como
	 * la ubicacion del pin especifico*/
	pinValue = SET & (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	7912      	ldrb	r2, [r2, #4]
 800195c:	40d3      	lsrs	r3, r2
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8001964:	68fb      	ldr	r3, [r7, #12]

}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <GPIOxTooglePin>:

void GPIOxTooglePin(GPIO_Handler_t *ptrPinHandler){
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

	uint32_t pinState = GPIO_ReadPin(ptrPinHandler);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffe3 	bl	8001946 <GPIO_ReadPin>
 8001980:	60f8      	str	r0, [r7, #12]

	uint8_t newState = !pinState;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	72fb      	strb	r3, [r7, #11]

	GPIO_WritePin (ptrPinHandler, newState);
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffab 	bl	80018f0 <GPIO_WritePin>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <i2c_stopTransaction>:
	//5. Activamos el modulo I2C
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
}

/*8. Generamos la condicion de stop*/
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	//7. Generamos la condicion de estop
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <i2c_startTransaction>:

//1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
//2. Generamos la señal "start"
//2a. Esperamos que la bandera del evento "start" se levante
//Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	//1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80019ce:	e000      	b.n	80019d2 <i2c_startTransaction+0xc>
		__NOP();
 80019d0:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f7      	bne.n	80019d0 <i2c_startTransaction+0xa>
	}
	//2. Generamos la señal "start"
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ee:	601a      	str	r2, [r3, #0]

	//2a. Esperamos a que la bandera del evento "start" se levante
	//Mientrar esperamos, el valor de SB es 0, entonces la negacion (!) es 1
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80019f0:	e000      	b.n	80019f4 <i2c_startTransaction+0x2e>
		__NOP();
 80019f2:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f7      	beq.n	80019f2 <i2c_startTransaction+0x2c>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	//2. Generamos la señal "start"
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a26:	601a      	str	r2, [r3, #0]
	//2a. Esperamos a que la bandera del evento "start" se levante
	//Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8001a28:	e000      	b.n	8001a2c <i2c_reStartTransaction+0x1c>
		__NOP();
 8001a2a:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f7      	beq.n	8001a2a <i2c_reStartTransaction+0x1a>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <i2c_sendNoAck>:

//7a. Activamos la inbdicacion para no-Ack (indicacion para el Slave de terminar)
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	//Debemos escribir cero en la posicion ACK del registro de control 1
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <i2c_sendAck>:

//7b. Activamos la indicacion para Ack
void i2c_sendAck(I2C_Handler_t *ptrHandlerI2C){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	//Debemos escribir uno en la posicion ACK del registro de control 1
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <i2c_sendSlaveAddressRW>:

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	70bb      	strb	r3, [r7, #2]
	//0. Definimos una variable auxiliar
	uint8_t auxByte  = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/*3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0)
	 * en el siguiente paso se envia la direccion de memoria que se desea escribir*/
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	005a      	lsls	r2, r3, #1
 8001aa8:	78bb      	ldrb	r3, [r7, #2]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	611a      	str	r2, [r3, #16]

	/*3.1. Esperamos hasta que la bandera del evento "addr" se levante
	 * esto nos indica que la direccion fue enviada satisfactoriamente*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8001ab2:	e000      	b.n	8001ab6 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8001ab4:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f7      	beq.n	8001ab4 <i2c_sendSlaveAddressRW+0x24>
	}
	/*3.2. Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia primero el I2C_SR1 y luego I2C_SR2*/
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	73fb      	strb	r3, [r7, #15]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <i2c_sendMemoryaddress>:

/**/
void i2c_sendMemoryaddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
	//4. Enviamos la direccion de memoria que deseamos leer
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	611a      	str	r2, [r3, #16]
	//4.1. Esperamos hasta que el byte sea transmitido
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8001af4:	e000      	b.n	8001af8 <i2c_sendMemoryaddress+0x18>
		__NOP();
 8001af6:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f7      	beq.n	8001af6 <i2c_sendMemoryaddress+0x16>
	}
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <i2c_readDataByte>:
		__NOP();
	}
}

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	//9. Esperamos hasta que el byte entrante sea recibido
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8001b1c:	e000      	b.n	8001b20 <i2c_readDataByte+0xc>
		__NOP();
 8001b1e:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f7      	beq.n	8001b1e <i2c_readDataByte+0xa>
	}
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	799b      	ldrb	r3, [r3, #6]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <getTicks_ms>:

	//Activamos nuevamente las interrupciones globales
	__enable_irq();
}

uint64_t getTicks_ms(void){
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	return ticks;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <getTicks_ms+0x18>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	200005b0 	.word	0x200005b0

08001b68 <delay_ms>:

void delay_ms(uint32_t wait_time_ms){
 8001b68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	//Captura el primer valor del tiempo para comparar
	ticks_start = getTicks_ms();
 8001b72:	f7ff ffeb 	bl	8001b4c <getTicks_ms>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4914      	ldr	r1, [pc, #80]	; (8001bcc <delay_ms+0x64>)
 8001b7c:	e9c1 2300 	strd	r2, r3, [r1]

	//Captura el segundo valor del tiempo para comparar
	ticks_counting = getTicks_ms();
 8001b80:	f7ff ffe4 	bl	8001b4c <getTicks_ms>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <delay_ms+0x68>)
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
	/*Compara: si el valor "counting" es menor que el "start + wait"
	 *actualiza el valor del "counting".
	 *Repite esta operacion hasta que counting sea mayor
	 *(Se cumple el tiempo de espera)
	 */
	while(ticks_counting < (ticks_start + (uint64_t)wait_time_ms)){
 8001b8e:	e006      	b.n	8001b9e <delay_ms+0x36>

		//Actualiza el valor
		ticks_counting = getTicks_ms();
 8001b90:	f7ff ffdc 	bl	8001b4c <getTicks_ms>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <delay_ms+0x68>)
 8001b9a:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting < (ticks_start + (uint64_t)wait_time_ms)){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4691      	mov	r9, r2
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <delay_ms+0x64>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	eb18 0402 	adds.w	r4, r8, r2
 8001bb0:	eb49 0503 	adc.w	r5, r9, r3
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <delay_ms+0x68>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	42a2      	cmp	r2, r4
 8001bbc:	41ab      	sbcs	r3, r5
 8001bbe:	d3e7      	bcc.n	8001b90 <delay_ms+0x28>
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bcc:	200005b8 	.word	0x200005b8
 8001bd0:	200005c0 	.word	0x200005c0

08001bd4 <SysTick_Handler>:

void SysTick_Handler(void){
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

	//Verificamos que la interrupcion se lanzo
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <SysTick_Handler+0x38>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <SysTick_Handler+0x2e>

		//Limpiamos la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <SysTick_Handler+0x38>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <SysTick_Handler+0x38>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <SysTick_Handler+0x3c>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	1c50      	adds	r0, r2, #1
 8001bf8:	f143 0100 	adc.w	r1, r3, #0
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Handler+0x3c>)
 8001bfe:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e010 	.word	0xe000e010
 8001c10:	200005b0 	.word	0x200005b0

08001c14 <__NVIC_EnableIRQ>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <USART_Config>:
char auxArray[100];
volatile uint16_t counterTx = 0;
volatile uint16_t dataTx = 0;


 void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */

	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <USART_Config+0x23c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d106      	bne.n	8001c70 <USART_Config+0x20>

		RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <USART_Config+0x240>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a8a      	ldr	r2, [pc, #552]	; (8001e90 <USART_Config+0x240>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	e016      	b.n	8001c9e <USART_Config+0x4e>

	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <USART_Config+0x244>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d106      	bne.n	8001c88 <USART_Config+0x38>

		RCC->APB1ENR |= (RCC_APB1ENR_USART2EN);
 8001c7a:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <USART_Config+0x240>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a84      	ldr	r2, [pc, #528]	; (8001e90 <USART_Config+0x240>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	e00a      	b.n	8001c9e <USART_Config+0x4e>

	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a82      	ldr	r2, [pc, #520]	; (8001e98 <USART_Config+0x248>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d105      	bne.n	8001c9e <USART_Config+0x4e>

		RCC->APB2ENR |= (RCC_APB2ENR_USART6EN);
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <USART_Config+0x240>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <USART_Config+0x240>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7a1b      	ldrb	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d025      	beq.n	8001d02 <USART_Config+0xb2>

		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PCE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cc4:	60da      	str	r2, [r3, #12]

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7a1b      	ldrb	r3, [r3, #8]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d108      	bne.n	8001ce0 <USART_Config+0x90>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	e018      	b.n	8001d12 <USART_Config+0xc2>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cee:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_PS);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	e007      	b.n	8001d12 <USART_Config+0xc2>

		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PCE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
    if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	79db      	ldrb	r3, [r3, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <USART_Config+0xdc>
    	ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_M);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	e007      	b.n	8001d3c <USART_Config+0xec>
    }
    else{
    	ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_M);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d3a:	60da      	str	r2, [r3, #12]
    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7a5b      	ldrb	r3, [r3, #9]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d847      	bhi.n	8001dd4 <USART_Config+0x184>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <USART_Config+0xfc>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d6f 	.word	0x08001d6f
 8001d54:	08001d91 	.word	0x08001d91
 8001d58:	08001db3 	.word	0x08001db3
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d6a:	611a      	str	r2, [r3, #16]
		break;
 8001d6c:	e03b      	b.n	8001de6 <USART_Config+0x196>
	}
	case USART_STOPBIT_0_5: {
		// Debemo scargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d7c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d8c:	611a      	str	r2, [r3, #16]
		break;
 8001d8e:	e02a      	b.n	8001de6 <USART_Config+0x196>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d9e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dae:	611a      	str	r2, [r3, #16]
		break;
 8001db0:	e019      	b.n	8001de6 <USART_Config+0x196>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dc0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001dd0:	611a      	str	r2, [r3, #16]
		break;
 8001dd2:	e008      	b.n	8001de6 <USART_Config+0x196>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001de2:	611a      	str	r2, [r3, #16]
		break;
 8001de4:	bf00      	nop
	}
	}

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	795b      	ldrb	r3, [r3, #5]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <USART_Config+0x1d2>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	799b      	ldrb	r3, [r3, #6]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <USART_Config+0x1b2>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f240 6283 	movw	r2, #1667	; 0x683
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e050      	b.n	8001ea4 <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	799b      	ldrb	r3, [r3, #6]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <USART_Config+0x1c6>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x208D;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e046      	b.n	8001ea4 <USART_Config+0x254>

		}else{
			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f240 6283 	movw	r2, #1667	; 0x683
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e040      	b.n	8001ea4 <USART_Config+0x254>
		}
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	795b      	ldrb	r3, [r3, #5]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d119      	bne.n	8001e5e <USART_Config+0x20e>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <USART_Config+0x1ee>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Valor a cargar 0x0341
			// Configurando el Baudrate generator para una velocidad de 19200bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f240 3241 	movw	r2, #833	; 0x341
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e032      	b.n	8001ea4 <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	799b      	ldrb	r3, [r3, #6]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <USART_Config+0x202>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x1046;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f241 4258 	movw	r2, #5208	; 0x1458
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e028      	b.n	8001ea4 <USART_Config+0x254>

		}else{
			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f240 3241 	movw	r2, #833	; 0x341
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e022      	b.n	8001ea4 <USART_Config+0x254>
		}
	}

	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d11e      	bne.n	8001ea4 <USART_Config+0x254>
		if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_DISABLE){
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	799b      	ldrb	r3, [r3, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <USART_Config+0x228>
			// El valor a cargar es 8.6875 -> Mantiza = 8, fraction = 0.6875
			// Mantiza = 8 = 0x08, fraction = 16 * 0.6875 = 11 = B
			// Valor a cargar 0x08B
			// Configurando el Baudrate generator para una velocidad de 115200bps

			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	228b      	movs	r2, #139	; 0x8b
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	e015      	b.n	8001ea4 <USART_Config+0x254>

		}else if(ptrUsartHandler->USART_Config.USART_PLL_EN == PLL_ENABLE){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	799b      	ldrb	r3, [r3, #6]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10d      	bne.n	8001e9c <USART_Config+0x24c>

			//Se configura el baudrate cuando el PLL está activado a 80MHz
			//ptrUsartHandler->ptrUSARTx->BRR = 0x02B6;

			//Se configura el baudrate cuando el PLL está activado a 100MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x0364;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f44f 7259 	mov.w	r2, #868	; 0x364
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	e00b      	b.n	8001ea4 <USART_Config+0x254>
 8001e8c:	40011000 	.word	0x40011000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40011400 	.word	0x40011400

		}else{

			//Se configura el baudrate por defecto a 16MHz
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	228b      	movs	r2, #139	; 0x8b
 8001ea2:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d847      	bhi.n	8001f3c <USART_Config+0x2ec>
 8001eac:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <USART_Config+0x264>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ed7 	.word	0x08001ed7
 8001ebc:	08001ee9 	.word	0x08001ee9
 8001ec0:	08001f0b 	.word	0x08001f0b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	60da      	str	r2, [r3, #12]
		break;
 8001ed4:	e043      	b.n	8001f5e <USART_Config+0x30e>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0204 	orr.w	r2, r2, #4
 8001ee4:	60da      	str	r2, [r3, #12]
		break;
 8001ee6:	e03a      	b.n	8001f5e <USART_Config+0x30e>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0208 	orr.w	r2, r2, #8
 8001ef6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0204 	orr.w	r2, r2, #4
 8001f06:	60da      	str	r2, [r3, #12]
		break;
 8001f08:	e029      	b.n	8001f5e <USART_Config+0x30e>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0204 	bic.w	r2, r2, #4
 8001f28:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f38:	60da      	str	r2, [r3, #12]
		break;
 8001f3a:	e010      	b.n	8001f5e <USART_Config+0x30e>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_RE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0208 	bic.w	r2, r2, #8
 8001f5a:	60da      	str	r2, [r3, #12]
		break;
 8001f5c:	bf00      	nop
	}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d00f      	beq.n	8001f86 <USART_Config+0x336>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_UE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f74:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_UE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f84:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f86:	b672      	cpsid	i
}
 8001f88:	bf00      	nop

	//3.1 Desactivamos las interrupciones globales
	__disable_irq();

	//3.2 Activar las interrupciones por recepcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE ){
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7a9b      	ldrb	r3, [r3, #10]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <USART_Config+0x354>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	e014      	b.n	8001fce <USART_Config+0x37e>

	}else if(ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_DISABLE){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7a9b      	ldrb	r3, [r3, #10]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <USART_Config+0x36e>
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0220 	bic.w	r2, r2, #32
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e007      	b.n	8001fce <USART_Config+0x37e>

	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0220 	bic.w	r2, r2, #32
 8001fcc:	60da      	str	r2, [r3, #12]
	}

	//3.3 Activar las interrupciones por transmision
	if(ptrUsartHandler->USART_Config.USART_enableIntTX == USART_TX_INTERRUP_ENABLE ){
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7adb      	ldrb	r3, [r3, #11]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d122      	bne.n	800201c <USART_Config+0x3cc>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe4:	60da      	str	r2, [r3, #12]
			if(ptrUsartHandler->ptrUSARTx == USART1){
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a27      	ldr	r2, [pc, #156]	; (8002088 <USART_Config+0x438>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <USART_Config+0x3a8>
				__NVIC_EnableIRQ(USART1_IRQn);
 8001ff0:	2025      	movs	r0, #37	; 0x25
 8001ff2:	f7ff fe0f 	bl	8001c14 <__NVIC_EnableIRQ>
 8001ff6:	e026      	b.n	8002046 <USART_Config+0x3f6>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <USART_Config+0x43c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d103      	bne.n	800200a <USART_Config+0x3ba>
				__NVIC_EnableIRQ(USART2_IRQn);
 8002002:	2026      	movs	r0, #38	; 0x26
 8002004:	f7ff fe06 	bl	8001c14 <__NVIC_EnableIRQ>
 8002008:	e01d      	b.n	8002046 <USART_Config+0x3f6>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6){
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <USART_Config+0x440>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d118      	bne.n	8002046 <USART_Config+0x3f6>
				__NVIC_EnableIRQ(USART6_IRQn);
 8002014:	2047      	movs	r0, #71	; 0x47
 8002016:	f7ff fdfd 	bl	8001c14 <__NVIC_EnableIRQ>
 800201a:	e014      	b.n	8002046 <USART_Config+0x3f6>
			}

		}else if(ptrUsartHandler->USART_Config.USART_enableIntTX == USART_TX_INTERRUP_DISABLE){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7adb      	ldrb	r3, [r3, #11]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <USART_Config+0x3e6>
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e007      	b.n	8002046 <USART_Config+0x3f6>

		}else{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002044:	60da      	str	r2, [r3, #12]
		}

	//3.4 Matricular las interrupciones en NVIC
	//USART1
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <USART_Config+0x438>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <USART_Config+0x408>
		NVIC_EnableIRQ(USART1_IRQn);
 8002050:	2025      	movs	r0, #37	; 0x25
 8002052:	f7ff fddf 	bl	8001c14 <__NVIC_EnableIRQ>
 8002056:	e010      	b.n	800207a <USART_Config+0x42a>

	//USART2
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <USART_Config+0x43c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d103      	bne.n	800206a <USART_Config+0x41a>
		NVIC_EnableIRQ(USART2_IRQn);
 8002062:	2026      	movs	r0, #38	; 0x26
 8002064:	f7ff fdd6 	bl	8001c14 <__NVIC_EnableIRQ>
 8002068:	e007      	b.n	800207a <USART_Config+0x42a>

	//USART6
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <USART_Config+0x440>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <USART_Config+0x42a>
		NVIC_EnableIRQ(USART6_IRQn);
 8002074:	2047      	movs	r0, #71	; 0x47
 8002076:	f7ff fdcd 	bl	8001c14 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800207a:	b662      	cpsie	i
}
 800207c:	bf00      	nop
	}


	//3.5 Activar las interrupciones globales
	__enable_irq();
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40011000 	.word	0x40011000
 800208c:	40004400 	.word	0x40004400
 8002090:	40011400 	.word	0x40011400

08002094 <writeChar>:

/* Funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80020a0:	e000      	b.n	80020a4 <writeChar+0x10>
		__NOP();
 80020a2:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f7      	beq.n	80020a2 <writeChar+0xe>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	605a      	str	r2, [r3, #4]

	auxFun = 0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <writeChar+0x3c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	return dataToSend;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200005c9 	.word	0x200005c9

080020d4 <writeMsg>:
	return dataToReceive;

}

/* Función para escribir un mensaje */
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80020de:	e008      	b.n	80020f2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffd4 	bl	8002094 <writeChar>
		msgToSend++;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <writeMsg+0xc>
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <getRxData>:

//Lectura del caracter que llega por la interfase serial
uint8_t getRxData(void){
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
	return auxRxData;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <getRxData+0x14>)
 800210a:	781b      	ldrb	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200005c8 	.word	0x200005c8

0800211c <USART1_IRQHandler>:
	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;

	auxFun = 1;
}

void USART1_IRQHandler(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART1->SR & USART_SR_RXNE){
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <USART1_IRQHandler+0xc4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <USART1_IRQHandler+0x20>
		auxRxData = (uint8_t) USART1->DR;
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <USART1_IRQHandler+0xc4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <USART1_IRQHandler+0xc8>)
 8002134:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8002136:	f000 f941 	bl	80023bc <usart1Rx_Callback>
				//Bajar la bandera de la interrupción
				USART1->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 800213a:	e04e      	b.n	80021da <USART1_IRQHandler+0xbe>
	else if(USART1->SR & USART_SR_TXE){
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <USART1_IRQHandler+0xc4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d048      	beq.n	80021da <USART1_IRQHandler+0xbe>
		if(auxFun == 0){
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <USART1_IRQHandler+0xcc>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <USART1_IRQHandler+0x4a>
			USART1->DR = dataTxSend;
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <USART1_IRQHandler+0xd0>)
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <USART1_IRQHandler+0xc4>)
 8002156:	605a      	str	r2, [r3, #4]
			USART1->CR1 &= ~(USART_CR1_TXEIE);
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <USART1_IRQHandler+0xc4>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <USART1_IRQHandler+0xc4>)
 800215e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	e039      	b.n	80021da <USART1_IRQHandler+0xbe>
		else if(auxFun == 1){
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <USART1_IRQHandler+0xcc>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d135      	bne.n	80021da <USART1_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <USART1_IRQHandler+0xd4>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <USART1_IRQHandler+0xd8>)
 8002178:	5c9b      	ldrb	r3, [r3, r2]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01f      	beq.n	80021be <USART1_IRQHandler+0xa2>
				if(counterTx < dataTx){
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <USART1_IRQHandler+0xd4>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <USART1_IRQHandler+0xdc>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	429a      	cmp	r2, r3
 800218c:	d225      	bcs.n	80021da <USART1_IRQHandler+0xbe>
					USART1->DR = auxArray[counterTx];
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <USART1_IRQHandler+0xd4>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <USART1_IRQHandler+0xd8>)
 8002198:	5c9a      	ldrb	r2, [r3, r2]
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <USART1_IRQHandler+0xc4>)
 800219c:	605a      	str	r2, [r3, #4]
					while(!(USART1->SR & USART_SR_TC)){
 800219e:	e000      	b.n	80021a2 <USART1_IRQHandler+0x86>
						__NOP();
 80021a0:	bf00      	nop
					while(!(USART1->SR & USART_SR_TC)){
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <USART1_IRQHandler+0xc4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f8      	beq.n	80021a0 <USART1_IRQHandler+0x84>
					counterTx++;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <USART1_IRQHandler+0xd4>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <USART1_IRQHandler+0xd4>)
 80021ba:	801a      	strh	r2, [r3, #0]
}
 80021bc:	e00d      	b.n	80021da <USART1_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <USART1_IRQHandler+0xd4>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <USART1_IRQHandler+0xd8>)
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <USART1_IRQHandler+0xbe>
				USART1->CR1 &= ~(USART_CR1_TXEIE);
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <USART1_IRQHandler+0xc4>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a03      	ldr	r2, [pc, #12]	; (80021e0 <USART1_IRQHandler+0xc4>)
 80021d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d8:	60d3      	str	r3, [r2, #12]
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40011000 	.word	0x40011000
 80021e4:	200005c8 	.word	0x200005c8
 80021e8:	200005c9 	.word	0x200005c9
 80021ec:	200005ca 	.word	0x200005ca
 80021f0:	20000630 	.word	0x20000630
 80021f4:	200005cc 	.word	0x200005cc
 80021f8:	20000632 	.word	0x20000632

080021fc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <USART2_IRQHandler+0xc4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <USART2_IRQHandler+0x20>
		auxRxData = (uint8_t) USART2->DR;
 800220c:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <USART2_IRQHandler+0xc4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <USART2_IRQHandler+0xc8>)
 8002214:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8002216:	f7fe fff3 	bl	8001200 <usart2Rx_Callback>
				//Bajar la bandera de la interrupción
				USART2->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 800221a:	e04e      	b.n	80022ba <USART2_IRQHandler+0xbe>
	else if(USART2->SR & USART_SR_TXE){
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <USART2_IRQHandler+0xc4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d048      	beq.n	80022ba <USART2_IRQHandler+0xbe>
		if(auxFun == 0){
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <USART2_IRQHandler+0xcc>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <USART2_IRQHandler+0x4a>
			USART2->DR = dataTxSend;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <USART2_IRQHandler+0xd0>)
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <USART2_IRQHandler+0xc4>)
 8002236:	605a      	str	r2, [r3, #4]
			USART2->CR1 &= ~(USART_CR1_TXEIE);
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <USART2_IRQHandler+0xc4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <USART2_IRQHandler+0xc4>)
 800223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	e039      	b.n	80022ba <USART2_IRQHandler+0xbe>
		else if(auxFun == 1){
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <USART2_IRQHandler+0xcc>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d135      	bne.n	80022ba <USART2_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <USART2_IRQHandler+0xd4>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <USART2_IRQHandler+0xd8>)
 8002258:	5c9b      	ldrb	r3, [r3, r2]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d01f      	beq.n	800229e <USART2_IRQHandler+0xa2>
				if(counterTx < dataTx){
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <USART2_IRQHandler+0xd4>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <USART2_IRQHandler+0xdc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	429a      	cmp	r2, r3
 800226c:	d225      	bcs.n	80022ba <USART2_IRQHandler+0xbe>
					USART2->DR = auxArray[counterTx];
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <USART2_IRQHandler+0xd4>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <USART2_IRQHandler+0xd8>)
 8002278:	5c9a      	ldrb	r2, [r3, r2]
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <USART2_IRQHandler+0xc4>)
 800227c:	605a      	str	r2, [r3, #4]
					while(!(USART2->SR & USART_SR_TC)){
 800227e:	e000      	b.n	8002282 <USART2_IRQHandler+0x86>
						__NOP();
 8002280:	bf00      	nop
					while(!(USART2->SR & USART_SR_TC)){
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <USART2_IRQHandler+0xc4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f8      	beq.n	8002280 <USART2_IRQHandler+0x84>
					counterTx++;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <USART2_IRQHandler+0xd4>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <USART2_IRQHandler+0xd4>)
 800229a:	801a      	strh	r2, [r3, #0]
}
 800229c:	e00d      	b.n	80022ba <USART2_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <USART2_IRQHandler+0xd4>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <USART2_IRQHandler+0xd8>)
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <USART2_IRQHandler+0xbe>
				USART2->CR1 &= ~(USART_CR1_TXEIE);
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <USART2_IRQHandler+0xc4>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <USART2_IRQHandler+0xc4>)
 80022b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022b8:	60d3      	str	r3, [r2, #12]
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40004400 	.word	0x40004400
 80022c4:	200005c8 	.word	0x200005c8
 80022c8:	200005c9 	.word	0x200005c9
 80022cc:	200005ca 	.word	0x200005ca
 80022d0:	20000630 	.word	0x20000630
 80022d4:	200005cc 	.word	0x200005cc
 80022d8:	20000632 	.word	0x20000632

080022dc <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <USART6_IRQHandler+0xc4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <USART6_IRQHandler+0x20>
		auxRxData = (uint8_t) USART6->DR;
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <USART6_IRQHandler+0xc4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <USART6_IRQHandler+0xc8>)
 80022f4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80022f6:	f000 f869 	bl	80023cc <usart6Rx_Callback>
				//Bajar la bandera de la interrupción
				USART6->CR1 &= ~(USART_CR1_TXEIE);
			}
		}
	}
}
 80022fa:	e04e      	b.n	800239a <USART6_IRQHandler+0xbe>
	else if(USART6->SR & USART_SR_TXE){
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <USART6_IRQHandler+0xc4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	2b00      	cmp	r3, #0
 8002306:	d048      	beq.n	800239a <USART6_IRQHandler+0xbe>
		if(auxFun == 0){
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <USART6_IRQHandler+0xcc>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <USART6_IRQHandler+0x4a>
			USART6->DR = dataTxSend;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <USART6_IRQHandler+0xd0>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <USART6_IRQHandler+0xc4>)
 8002316:	605a      	str	r2, [r3, #4]
			USART6->CR1 &= ~(USART_CR1_TXEIE);
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <USART6_IRQHandler+0xc4>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <USART6_IRQHandler+0xc4>)
 800231e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	e039      	b.n	800239a <USART6_IRQHandler+0xbe>
		else if(auxFun == 1){
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <USART6_IRQHandler+0xcc>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d135      	bne.n	800239a <USART6_IRQHandler+0xbe>
			if (auxArray[counterTx] != '\0'){
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <USART6_IRQHandler+0xd4>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <USART6_IRQHandler+0xd8>)
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01f      	beq.n	800237e <USART6_IRQHandler+0xa2>
				if(counterTx < dataTx){
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <USART6_IRQHandler+0xd4>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <USART6_IRQHandler+0xdc>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	429a      	cmp	r2, r3
 800234c:	d225      	bcs.n	800239a <USART6_IRQHandler+0xbe>
					USART6->DR = auxArray[counterTx];
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <USART6_IRQHandler+0xd4>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <USART6_IRQHandler+0xd8>)
 8002358:	5c9a      	ldrb	r2, [r3, r2]
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <USART6_IRQHandler+0xc4>)
 800235c:	605a      	str	r2, [r3, #4]
					while(!(USART6->SR & USART_SR_TC)){
 800235e:	e000      	b.n	8002362 <USART6_IRQHandler+0x86>
						__NOP();
 8002360:	bf00      	nop
					while(!(USART6->SR & USART_SR_TC)){
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <USART6_IRQHandler+0xc4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f8      	beq.n	8002360 <USART6_IRQHandler+0x84>
					counterTx++;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <USART6_IRQHandler+0xd4>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <USART6_IRQHandler+0xd4>)
 800237a:	801a      	strh	r2, [r3, #0]
}
 800237c:	e00d      	b.n	800239a <USART6_IRQHandler+0xbe>
			else if(auxArray[counterTx] == '\0'){
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <USART6_IRQHandler+0xd4>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <USART6_IRQHandler+0xd8>)
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <USART6_IRQHandler+0xbe>
				USART6->CR1 &= ~(USART_CR1_TXEIE);
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <USART6_IRQHandler+0xc4>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <USART6_IRQHandler+0xc4>)
 8002394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002398:	60d3      	str	r3, [r2, #12]
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40011400 	.word	0x40011400
 80023a4:	200005c8 	.word	0x200005c8
 80023a8:	200005c9 	.word	0x200005c9
 80023ac:	200005ca 	.word	0x200005ca
 80023b0:	20000630 	.word	0x20000630
 80023b4:	200005cc 	.word	0x200005cc
 80023b8:	20000632 	.word	0x20000632

080023bc <usart1Rx_Callback>:

__attribute__((weak)) void usart1Rx_Callback(void){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

	__NOP();
 80023c0:	bf00      	nop
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <usart6Rx_Callback>:
__attribute__((weak)) void usart2Rx_Callback(void){

	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

	__NOP();
 80023d0:	bf00      	nop
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <__errno>:
 80023dc:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <__errno+0x8>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4d0d      	ldr	r5, [pc, #52]	; (8002420 <__libc_init_array+0x38>)
 80023ec:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023ee:	1b64      	subs	r4, r4, r5
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	2600      	movs	r6, #0
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	4d0b      	ldr	r5, [pc, #44]	; (8002428 <__libc_init_array+0x40>)
 80023fa:	4c0c      	ldr	r4, [pc, #48]	; (800242c <__libc_init_array+0x44>)
 80023fc:	f005 f8ca 	bl	8007594 <_init>
 8002400:	1b64      	subs	r4, r4, r5
 8002402:	10a4      	asrs	r4, r4, #2
 8002404:	2600      	movs	r6, #0
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f855 3b04 	ldr.w	r3, [r5], #4
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08007c64 	.word	0x08007c64
 8002424:	08007c64 	.word	0x08007c64
 8002428:	08007c64 	.word	0x08007c64
 800242c:	08007c68 	.word	0x08007c68

08002430 <memset>:
 8002430:	4402      	add	r2, r0
 8002432:	4603      	mov	r3, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <__cvt>:
 8002440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002444:	ec55 4b10 	vmov	r4, r5, d0
 8002448:	2d00      	cmp	r5, #0
 800244a:	460e      	mov	r6, r1
 800244c:	4619      	mov	r1, r3
 800244e:	462b      	mov	r3, r5
 8002450:	bfbb      	ittet	lt
 8002452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002456:	461d      	movlt	r5, r3
 8002458:	2300      	movge	r3, #0
 800245a:	232d      	movlt	r3, #45	; 0x2d
 800245c:	700b      	strb	r3, [r1, #0]
 800245e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002464:	4691      	mov	r9, r2
 8002466:	f023 0820 	bic.w	r8, r3, #32
 800246a:	bfbc      	itt	lt
 800246c:	4622      	movlt	r2, r4
 800246e:	4614      	movlt	r4, r2
 8002470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002474:	d005      	beq.n	8002482 <__cvt+0x42>
 8002476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800247a:	d100      	bne.n	800247e <__cvt+0x3e>
 800247c:	3601      	adds	r6, #1
 800247e:	2102      	movs	r1, #2
 8002480:	e000      	b.n	8002484 <__cvt+0x44>
 8002482:	2103      	movs	r1, #3
 8002484:	ab03      	add	r3, sp, #12
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	ab02      	add	r3, sp, #8
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	ec45 4b10 	vmov	d0, r4, r5
 8002490:	4653      	mov	r3, sl
 8002492:	4632      	mov	r2, r6
 8002494:	f001 fe44 	bl	8004120 <_dtoa_r>
 8002498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800249c:	4607      	mov	r7, r0
 800249e:	d102      	bne.n	80024a6 <__cvt+0x66>
 80024a0:	f019 0f01 	tst.w	r9, #1
 80024a4:	d022      	beq.n	80024ec <__cvt+0xac>
 80024a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80024aa:	eb07 0906 	add.w	r9, r7, r6
 80024ae:	d110      	bne.n	80024d2 <__cvt+0x92>
 80024b0:	783b      	ldrb	r3, [r7, #0]
 80024b2:	2b30      	cmp	r3, #48	; 0x30
 80024b4:	d10a      	bne.n	80024cc <__cvt+0x8c>
 80024b6:	2200      	movs	r2, #0
 80024b8:	2300      	movs	r3, #0
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fe fb1b 	bl	8000af8 <__aeabi_dcmpeq>
 80024c2:	b918      	cbnz	r0, 80024cc <__cvt+0x8c>
 80024c4:	f1c6 0601 	rsb	r6, r6, #1
 80024c8:	f8ca 6000 	str.w	r6, [sl]
 80024cc:	f8da 3000 	ldr.w	r3, [sl]
 80024d0:	4499      	add	r9, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	2300      	movs	r3, #0
 80024d6:	4620      	mov	r0, r4
 80024d8:	4629      	mov	r1, r5
 80024da:	f7fe fb0d 	bl	8000af8 <__aeabi_dcmpeq>
 80024de:	b108      	cbz	r0, 80024e4 <__cvt+0xa4>
 80024e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80024e4:	2230      	movs	r2, #48	; 0x30
 80024e6:	9b03      	ldr	r3, [sp, #12]
 80024e8:	454b      	cmp	r3, r9
 80024ea:	d307      	bcc.n	80024fc <__cvt+0xbc>
 80024ec:	9b03      	ldr	r3, [sp, #12]
 80024ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024f0:	1bdb      	subs	r3, r3, r7
 80024f2:	4638      	mov	r0, r7
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	b004      	add	sp, #16
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fc:	1c59      	adds	r1, r3, #1
 80024fe:	9103      	str	r1, [sp, #12]
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e7f0      	b.n	80024e6 <__cvt+0xa6>

08002504 <__exponent>:
 8002504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002506:	4603      	mov	r3, r0
 8002508:	2900      	cmp	r1, #0
 800250a:	bfb8      	it	lt
 800250c:	4249      	neglt	r1, r1
 800250e:	f803 2b02 	strb.w	r2, [r3], #2
 8002512:	bfb4      	ite	lt
 8002514:	222d      	movlt	r2, #45	; 0x2d
 8002516:	222b      	movge	r2, #43	; 0x2b
 8002518:	2909      	cmp	r1, #9
 800251a:	7042      	strb	r2, [r0, #1]
 800251c:	dd2a      	ble.n	8002574 <__exponent+0x70>
 800251e:	f10d 0407 	add.w	r4, sp, #7
 8002522:	46a4      	mov	ip, r4
 8002524:	270a      	movs	r7, #10
 8002526:	46a6      	mov	lr, r4
 8002528:	460a      	mov	r2, r1
 800252a:	fb91 f6f7 	sdiv	r6, r1, r7
 800252e:	fb07 1516 	mls	r5, r7, r6, r1
 8002532:	3530      	adds	r5, #48	; 0x30
 8002534:	2a63      	cmp	r2, #99	; 0x63
 8002536:	f104 34ff 	add.w	r4, r4, #4294967295
 800253a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800253e:	4631      	mov	r1, r6
 8002540:	dcf1      	bgt.n	8002526 <__exponent+0x22>
 8002542:	3130      	adds	r1, #48	; 0x30
 8002544:	f1ae 0502 	sub.w	r5, lr, #2
 8002548:	f804 1c01 	strb.w	r1, [r4, #-1]
 800254c:	1c44      	adds	r4, r0, #1
 800254e:	4629      	mov	r1, r5
 8002550:	4561      	cmp	r1, ip
 8002552:	d30a      	bcc.n	800256a <__exponent+0x66>
 8002554:	f10d 0209 	add.w	r2, sp, #9
 8002558:	eba2 020e 	sub.w	r2, r2, lr
 800255c:	4565      	cmp	r5, ip
 800255e:	bf88      	it	hi
 8002560:	2200      	movhi	r2, #0
 8002562:	4413      	add	r3, r2
 8002564:	1a18      	subs	r0, r3, r0
 8002566:	b003      	add	sp, #12
 8002568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800256e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002572:	e7ed      	b.n	8002550 <__exponent+0x4c>
 8002574:	2330      	movs	r3, #48	; 0x30
 8002576:	3130      	adds	r1, #48	; 0x30
 8002578:	7083      	strb	r3, [r0, #2]
 800257a:	70c1      	strb	r1, [r0, #3]
 800257c:	1d03      	adds	r3, r0, #4
 800257e:	e7f1      	b.n	8002564 <__exponent+0x60>

08002580 <_printf_float>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	ed2d 8b02 	vpush	{d8}
 8002588:	b08d      	sub	sp, #52	; 0x34
 800258a:	460c      	mov	r4, r1
 800258c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002590:	4616      	mov	r6, r2
 8002592:	461f      	mov	r7, r3
 8002594:	4605      	mov	r5, r0
 8002596:	f002 ff21 	bl	80053dc <_localeconv_r>
 800259a:	f8d0 a000 	ldr.w	sl, [r0]
 800259e:	4650      	mov	r0, sl
 80025a0:	f7fd fe28 	bl	80001f4 <strlen>
 80025a4:	2300      	movs	r3, #0
 80025a6:	930a      	str	r3, [sp, #40]	; 0x28
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	f8d8 3000 	ldr.w	r3, [r8]
 80025b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80025b4:	3307      	adds	r3, #7
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	f103 0208 	add.w	r2, r3, #8
 80025be:	f8c8 2000 	str.w	r2, [r8]
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80025ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80025ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80025d2:	9307      	str	r3, [sp, #28]
 80025d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80025d8:	ee08 0a10 	vmov	s16, r0
 80025dc:	4b9f      	ldr	r3, [pc, #636]	; (800285c <_printf_float+0x2dc>)
 80025de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025e2:	f04f 32ff 	mov.w	r2, #4294967295
 80025e6:	f7fe fab9 	bl	8000b5c <__aeabi_dcmpun>
 80025ea:	bb88      	cbnz	r0, 8002650 <_printf_float+0xd0>
 80025ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80025f0:	4b9a      	ldr	r3, [pc, #616]	; (800285c <_printf_float+0x2dc>)
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	f7fe fa93 	bl	8000b20 <__aeabi_dcmple>
 80025fa:	bb48      	cbnz	r0, 8002650 <_printf_float+0xd0>
 80025fc:	2200      	movs	r2, #0
 80025fe:	2300      	movs	r3, #0
 8002600:	4640      	mov	r0, r8
 8002602:	4649      	mov	r1, r9
 8002604:	f7fe fa82 	bl	8000b0c <__aeabi_dcmplt>
 8002608:	b110      	cbz	r0, 8002610 <_printf_float+0x90>
 800260a:	232d      	movs	r3, #45	; 0x2d
 800260c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <_printf_float+0x2e0>)
 8002612:	4894      	ldr	r0, [pc, #592]	; (8002864 <_printf_float+0x2e4>)
 8002614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002618:	bf94      	ite	ls
 800261a:	4698      	movls	r8, r3
 800261c:	4680      	movhi	r8, r0
 800261e:	2303      	movs	r3, #3
 8002620:	6123      	str	r3, [r4, #16]
 8002622:	9b05      	ldr	r3, [sp, #20]
 8002624:	f023 0204 	bic.w	r2, r3, #4
 8002628:	6022      	str	r2, [r4, #0]
 800262a:	f04f 0900 	mov.w	r9, #0
 800262e:	9700      	str	r7, [sp, #0]
 8002630:	4633      	mov	r3, r6
 8002632:	aa0b      	add	r2, sp, #44	; 0x2c
 8002634:	4621      	mov	r1, r4
 8002636:	4628      	mov	r0, r5
 8002638:	f000 f9d8 	bl	80029ec <_printf_common>
 800263c:	3001      	adds	r0, #1
 800263e:	f040 8090 	bne.w	8002762 <_printf_float+0x1e2>
 8002642:	f04f 30ff 	mov.w	r0, #4294967295
 8002646:	b00d      	add	sp, #52	; 0x34
 8002648:	ecbd 8b02 	vpop	{d8}
 800264c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002650:	4642      	mov	r2, r8
 8002652:	464b      	mov	r3, r9
 8002654:	4640      	mov	r0, r8
 8002656:	4649      	mov	r1, r9
 8002658:	f7fe fa80 	bl	8000b5c <__aeabi_dcmpun>
 800265c:	b140      	cbz	r0, 8002670 <_printf_float+0xf0>
 800265e:	464b      	mov	r3, r9
 8002660:	2b00      	cmp	r3, #0
 8002662:	bfbc      	itt	lt
 8002664:	232d      	movlt	r3, #45	; 0x2d
 8002666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800266a:	487f      	ldr	r0, [pc, #508]	; (8002868 <_printf_float+0x2e8>)
 800266c:	4b7f      	ldr	r3, [pc, #508]	; (800286c <_printf_float+0x2ec>)
 800266e:	e7d1      	b.n	8002614 <_printf_float+0x94>
 8002670:	6863      	ldr	r3, [r4, #4]
 8002672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002676:	9206      	str	r2, [sp, #24]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	d13f      	bne.n	80026fc <_printf_float+0x17c>
 800267c:	2306      	movs	r3, #6
 800267e:	6063      	str	r3, [r4, #4]
 8002680:	9b05      	ldr	r3, [sp, #20]
 8002682:	6861      	ldr	r1, [r4, #4]
 8002684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002688:	2300      	movs	r3, #0
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	ab0a      	add	r3, sp, #40	; 0x28
 800268e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002692:	ab09      	add	r3, sp, #36	; 0x24
 8002694:	ec49 8b10 	vmov	d0, r8, r9
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	6022      	str	r2, [r4, #0]
 800269c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7ff fecd 	bl	8002440 <__cvt>
 80026a6:	9b06      	ldr	r3, [sp, #24]
 80026a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026aa:	2b47      	cmp	r3, #71	; 0x47
 80026ac:	4680      	mov	r8, r0
 80026ae:	d108      	bne.n	80026c2 <_printf_float+0x142>
 80026b0:	1cc8      	adds	r0, r1, #3
 80026b2:	db02      	blt.n	80026ba <_printf_float+0x13a>
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	4299      	cmp	r1, r3
 80026b8:	dd41      	ble.n	800273e <_printf_float+0x1be>
 80026ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80026be:	fa5f fb8b 	uxtb.w	fp, fp
 80026c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80026c6:	d820      	bhi.n	800270a <_printf_float+0x18a>
 80026c8:	3901      	subs	r1, #1
 80026ca:	465a      	mov	r2, fp
 80026cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80026d0:	9109      	str	r1, [sp, #36]	; 0x24
 80026d2:	f7ff ff17 	bl	8002504 <__exponent>
 80026d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80026d8:	1813      	adds	r3, r2, r0
 80026da:	2a01      	cmp	r2, #1
 80026dc:	4681      	mov	r9, r0
 80026de:	6123      	str	r3, [r4, #16]
 80026e0:	dc02      	bgt.n	80026e8 <_printf_float+0x168>
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	07d2      	lsls	r2, r2, #31
 80026e6:	d501      	bpl.n	80026ec <_printf_float+0x16c>
 80026e8:	3301      	adds	r3, #1
 80026ea:	6123      	str	r3, [r4, #16]
 80026ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d09c      	beq.n	800262e <_printf_float+0xae>
 80026f4:	232d      	movs	r3, #45	; 0x2d
 80026f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026fa:	e798      	b.n	800262e <_printf_float+0xae>
 80026fc:	9a06      	ldr	r2, [sp, #24]
 80026fe:	2a47      	cmp	r2, #71	; 0x47
 8002700:	d1be      	bne.n	8002680 <_printf_float+0x100>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1bc      	bne.n	8002680 <_printf_float+0x100>
 8002706:	2301      	movs	r3, #1
 8002708:	e7b9      	b.n	800267e <_printf_float+0xfe>
 800270a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800270e:	d118      	bne.n	8002742 <_printf_float+0x1c2>
 8002710:	2900      	cmp	r1, #0
 8002712:	6863      	ldr	r3, [r4, #4]
 8002714:	dd0b      	ble.n	800272e <_printf_float+0x1ae>
 8002716:	6121      	str	r1, [r4, #16]
 8002718:	b913      	cbnz	r3, 8002720 <_printf_float+0x1a0>
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	07d0      	lsls	r0, r2, #31
 800271e:	d502      	bpl.n	8002726 <_printf_float+0x1a6>
 8002720:	3301      	adds	r3, #1
 8002722:	440b      	add	r3, r1
 8002724:	6123      	str	r3, [r4, #16]
 8002726:	65a1      	str	r1, [r4, #88]	; 0x58
 8002728:	f04f 0900 	mov.w	r9, #0
 800272c:	e7de      	b.n	80026ec <_printf_float+0x16c>
 800272e:	b913      	cbnz	r3, 8002736 <_printf_float+0x1b6>
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	07d2      	lsls	r2, r2, #31
 8002734:	d501      	bpl.n	800273a <_printf_float+0x1ba>
 8002736:	3302      	adds	r3, #2
 8002738:	e7f4      	b.n	8002724 <_printf_float+0x1a4>
 800273a:	2301      	movs	r3, #1
 800273c:	e7f2      	b.n	8002724 <_printf_float+0x1a4>
 800273e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002744:	4299      	cmp	r1, r3
 8002746:	db05      	blt.n	8002754 <_printf_float+0x1d4>
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	6121      	str	r1, [r4, #16]
 800274c:	07d8      	lsls	r0, r3, #31
 800274e:	d5ea      	bpl.n	8002726 <_printf_float+0x1a6>
 8002750:	1c4b      	adds	r3, r1, #1
 8002752:	e7e7      	b.n	8002724 <_printf_float+0x1a4>
 8002754:	2900      	cmp	r1, #0
 8002756:	bfd4      	ite	le
 8002758:	f1c1 0202 	rsble	r2, r1, #2
 800275c:	2201      	movgt	r2, #1
 800275e:	4413      	add	r3, r2
 8002760:	e7e0      	b.n	8002724 <_printf_float+0x1a4>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	055a      	lsls	r2, r3, #21
 8002766:	d407      	bmi.n	8002778 <_printf_float+0x1f8>
 8002768:	6923      	ldr	r3, [r4, #16]
 800276a:	4642      	mov	r2, r8
 800276c:	4631      	mov	r1, r6
 800276e:	4628      	mov	r0, r5
 8002770:	47b8      	blx	r7
 8002772:	3001      	adds	r0, #1
 8002774:	d12c      	bne.n	80027d0 <_printf_float+0x250>
 8002776:	e764      	b.n	8002642 <_printf_float+0xc2>
 8002778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800277c:	f240 80e0 	bls.w	8002940 <_printf_float+0x3c0>
 8002780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002784:	2200      	movs	r2, #0
 8002786:	2300      	movs	r3, #0
 8002788:	f7fe f9b6 	bl	8000af8 <__aeabi_dcmpeq>
 800278c:	2800      	cmp	r0, #0
 800278e:	d034      	beq.n	80027fa <_printf_float+0x27a>
 8002790:	4a37      	ldr	r2, [pc, #220]	; (8002870 <_printf_float+0x2f0>)
 8002792:	2301      	movs	r3, #1
 8002794:	4631      	mov	r1, r6
 8002796:	4628      	mov	r0, r5
 8002798:	47b8      	blx	r7
 800279a:	3001      	adds	r0, #1
 800279c:	f43f af51 	beq.w	8002642 <_printf_float+0xc2>
 80027a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027a4:	429a      	cmp	r2, r3
 80027a6:	db02      	blt.n	80027ae <_printf_float+0x22e>
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	07d8      	lsls	r0, r3, #31
 80027ac:	d510      	bpl.n	80027d0 <_printf_float+0x250>
 80027ae:	ee18 3a10 	vmov	r3, s16
 80027b2:	4652      	mov	r2, sl
 80027b4:	4631      	mov	r1, r6
 80027b6:	4628      	mov	r0, r5
 80027b8:	47b8      	blx	r7
 80027ba:	3001      	adds	r0, #1
 80027bc:	f43f af41 	beq.w	8002642 <_printf_float+0xc2>
 80027c0:	f04f 0800 	mov.w	r8, #0
 80027c4:	f104 091a 	add.w	r9, r4, #26
 80027c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	4543      	cmp	r3, r8
 80027ce:	dc09      	bgt.n	80027e4 <_printf_float+0x264>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	079b      	lsls	r3, r3, #30
 80027d4:	f100 8105 	bmi.w	80029e2 <_printf_float+0x462>
 80027d8:	68e0      	ldr	r0, [r4, #12]
 80027da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027dc:	4298      	cmp	r0, r3
 80027de:	bfb8      	it	lt
 80027e0:	4618      	movlt	r0, r3
 80027e2:	e730      	b.n	8002646 <_printf_float+0xc6>
 80027e4:	2301      	movs	r3, #1
 80027e6:	464a      	mov	r2, r9
 80027e8:	4631      	mov	r1, r6
 80027ea:	4628      	mov	r0, r5
 80027ec:	47b8      	blx	r7
 80027ee:	3001      	adds	r0, #1
 80027f0:	f43f af27 	beq.w	8002642 <_printf_float+0xc2>
 80027f4:	f108 0801 	add.w	r8, r8, #1
 80027f8:	e7e6      	b.n	80027c8 <_printf_float+0x248>
 80027fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	dc39      	bgt.n	8002874 <_printf_float+0x2f4>
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <_printf_float+0x2f0>)
 8002802:	2301      	movs	r3, #1
 8002804:	4631      	mov	r1, r6
 8002806:	4628      	mov	r0, r5
 8002808:	47b8      	blx	r7
 800280a:	3001      	adds	r0, #1
 800280c:	f43f af19 	beq.w	8002642 <_printf_float+0xc2>
 8002810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002814:	4313      	orrs	r3, r2
 8002816:	d102      	bne.n	800281e <_printf_float+0x29e>
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	07d9      	lsls	r1, r3, #31
 800281c:	d5d8      	bpl.n	80027d0 <_printf_float+0x250>
 800281e:	ee18 3a10 	vmov	r3, s16
 8002822:	4652      	mov	r2, sl
 8002824:	4631      	mov	r1, r6
 8002826:	4628      	mov	r0, r5
 8002828:	47b8      	blx	r7
 800282a:	3001      	adds	r0, #1
 800282c:	f43f af09 	beq.w	8002642 <_printf_float+0xc2>
 8002830:	f04f 0900 	mov.w	r9, #0
 8002834:	f104 0a1a 	add.w	sl, r4, #26
 8002838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800283a:	425b      	negs	r3, r3
 800283c:	454b      	cmp	r3, r9
 800283e:	dc01      	bgt.n	8002844 <_printf_float+0x2c4>
 8002840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002842:	e792      	b.n	800276a <_printf_float+0x1ea>
 8002844:	2301      	movs	r3, #1
 8002846:	4652      	mov	r2, sl
 8002848:	4631      	mov	r1, r6
 800284a:	4628      	mov	r0, r5
 800284c:	47b8      	blx	r7
 800284e:	3001      	adds	r0, #1
 8002850:	f43f aef7 	beq.w	8002642 <_printf_float+0xc2>
 8002854:	f109 0901 	add.w	r9, r9, #1
 8002858:	e7ee      	b.n	8002838 <_printf_float+0x2b8>
 800285a:	bf00      	nop
 800285c:	7fefffff 	.word	0x7fefffff
 8002860:	080077b0 	.word	0x080077b0
 8002864:	080077b4 	.word	0x080077b4
 8002868:	080077bc 	.word	0x080077bc
 800286c:	080077b8 	.word	0x080077b8
 8002870:	08007bb1 	.word	0x08007bb1
 8002874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002878:	429a      	cmp	r2, r3
 800287a:	bfa8      	it	ge
 800287c:	461a      	movge	r2, r3
 800287e:	2a00      	cmp	r2, #0
 8002880:	4691      	mov	r9, r2
 8002882:	dc37      	bgt.n	80028f4 <_printf_float+0x374>
 8002884:	f04f 0b00 	mov.w	fp, #0
 8002888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800288c:	f104 021a 	add.w	r2, r4, #26
 8002890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002892:	9305      	str	r3, [sp, #20]
 8002894:	eba3 0309 	sub.w	r3, r3, r9
 8002898:	455b      	cmp	r3, fp
 800289a:	dc33      	bgt.n	8002904 <_printf_float+0x384>
 800289c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028a0:	429a      	cmp	r2, r3
 80028a2:	db3b      	blt.n	800291c <_printf_float+0x39c>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	07da      	lsls	r2, r3, #31
 80028a8:	d438      	bmi.n	800291c <_printf_float+0x39c>
 80028aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ac:	9a05      	ldr	r2, [sp, #20]
 80028ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80028b0:	1a9a      	subs	r2, r3, r2
 80028b2:	eba3 0901 	sub.w	r9, r3, r1
 80028b6:	4591      	cmp	r9, r2
 80028b8:	bfa8      	it	ge
 80028ba:	4691      	movge	r9, r2
 80028bc:	f1b9 0f00 	cmp.w	r9, #0
 80028c0:	dc35      	bgt.n	800292e <_printf_float+0x3ae>
 80028c2:	f04f 0800 	mov.w	r8, #0
 80028c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028ca:	f104 0a1a 	add.w	sl, r4, #26
 80028ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	eba3 0309 	sub.w	r3, r3, r9
 80028d8:	4543      	cmp	r3, r8
 80028da:	f77f af79 	ble.w	80027d0 <_printf_float+0x250>
 80028de:	2301      	movs	r3, #1
 80028e0:	4652      	mov	r2, sl
 80028e2:	4631      	mov	r1, r6
 80028e4:	4628      	mov	r0, r5
 80028e6:	47b8      	blx	r7
 80028e8:	3001      	adds	r0, #1
 80028ea:	f43f aeaa 	beq.w	8002642 <_printf_float+0xc2>
 80028ee:	f108 0801 	add.w	r8, r8, #1
 80028f2:	e7ec      	b.n	80028ce <_printf_float+0x34e>
 80028f4:	4613      	mov	r3, r2
 80028f6:	4631      	mov	r1, r6
 80028f8:	4642      	mov	r2, r8
 80028fa:	4628      	mov	r0, r5
 80028fc:	47b8      	blx	r7
 80028fe:	3001      	adds	r0, #1
 8002900:	d1c0      	bne.n	8002884 <_printf_float+0x304>
 8002902:	e69e      	b.n	8002642 <_printf_float+0xc2>
 8002904:	2301      	movs	r3, #1
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	9205      	str	r2, [sp, #20]
 800290c:	47b8      	blx	r7
 800290e:	3001      	adds	r0, #1
 8002910:	f43f ae97 	beq.w	8002642 <_printf_float+0xc2>
 8002914:	9a05      	ldr	r2, [sp, #20]
 8002916:	f10b 0b01 	add.w	fp, fp, #1
 800291a:	e7b9      	b.n	8002890 <_printf_float+0x310>
 800291c:	ee18 3a10 	vmov	r3, s16
 8002920:	4652      	mov	r2, sl
 8002922:	4631      	mov	r1, r6
 8002924:	4628      	mov	r0, r5
 8002926:	47b8      	blx	r7
 8002928:	3001      	adds	r0, #1
 800292a:	d1be      	bne.n	80028aa <_printf_float+0x32a>
 800292c:	e689      	b.n	8002642 <_printf_float+0xc2>
 800292e:	9a05      	ldr	r2, [sp, #20]
 8002930:	464b      	mov	r3, r9
 8002932:	4442      	add	r2, r8
 8002934:	4631      	mov	r1, r6
 8002936:	4628      	mov	r0, r5
 8002938:	47b8      	blx	r7
 800293a:	3001      	adds	r0, #1
 800293c:	d1c1      	bne.n	80028c2 <_printf_float+0x342>
 800293e:	e680      	b.n	8002642 <_printf_float+0xc2>
 8002940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002942:	2a01      	cmp	r2, #1
 8002944:	dc01      	bgt.n	800294a <_printf_float+0x3ca>
 8002946:	07db      	lsls	r3, r3, #31
 8002948:	d538      	bpl.n	80029bc <_printf_float+0x43c>
 800294a:	2301      	movs	r3, #1
 800294c:	4642      	mov	r2, r8
 800294e:	4631      	mov	r1, r6
 8002950:	4628      	mov	r0, r5
 8002952:	47b8      	blx	r7
 8002954:	3001      	adds	r0, #1
 8002956:	f43f ae74 	beq.w	8002642 <_printf_float+0xc2>
 800295a:	ee18 3a10 	vmov	r3, s16
 800295e:	4652      	mov	r2, sl
 8002960:	4631      	mov	r1, r6
 8002962:	4628      	mov	r0, r5
 8002964:	47b8      	blx	r7
 8002966:	3001      	adds	r0, #1
 8002968:	f43f ae6b 	beq.w	8002642 <_printf_float+0xc2>
 800296c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002970:	2200      	movs	r2, #0
 8002972:	2300      	movs	r3, #0
 8002974:	f7fe f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8002978:	b9d8      	cbnz	r0, 80029b2 <_printf_float+0x432>
 800297a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800297c:	f108 0201 	add.w	r2, r8, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	4631      	mov	r1, r6
 8002984:	4628      	mov	r0, r5
 8002986:	47b8      	blx	r7
 8002988:	3001      	adds	r0, #1
 800298a:	d10e      	bne.n	80029aa <_printf_float+0x42a>
 800298c:	e659      	b.n	8002642 <_printf_float+0xc2>
 800298e:	2301      	movs	r3, #1
 8002990:	4652      	mov	r2, sl
 8002992:	4631      	mov	r1, r6
 8002994:	4628      	mov	r0, r5
 8002996:	47b8      	blx	r7
 8002998:	3001      	adds	r0, #1
 800299a:	f43f ae52 	beq.w	8002642 <_printf_float+0xc2>
 800299e:	f108 0801 	add.w	r8, r8, #1
 80029a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4543      	cmp	r3, r8
 80029a8:	dcf1      	bgt.n	800298e <_printf_float+0x40e>
 80029aa:	464b      	mov	r3, r9
 80029ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80029b0:	e6dc      	b.n	800276c <_printf_float+0x1ec>
 80029b2:	f04f 0800 	mov.w	r8, #0
 80029b6:	f104 0a1a 	add.w	sl, r4, #26
 80029ba:	e7f2      	b.n	80029a2 <_printf_float+0x422>
 80029bc:	2301      	movs	r3, #1
 80029be:	4642      	mov	r2, r8
 80029c0:	e7df      	b.n	8002982 <_printf_float+0x402>
 80029c2:	2301      	movs	r3, #1
 80029c4:	464a      	mov	r2, r9
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	f43f ae38 	beq.w	8002642 <_printf_float+0xc2>
 80029d2:	f108 0801 	add.w	r8, r8, #1
 80029d6:	68e3      	ldr	r3, [r4, #12]
 80029d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029da:	1a5b      	subs	r3, r3, r1
 80029dc:	4543      	cmp	r3, r8
 80029de:	dcf0      	bgt.n	80029c2 <_printf_float+0x442>
 80029e0:	e6fa      	b.n	80027d8 <_printf_float+0x258>
 80029e2:	f04f 0800 	mov.w	r8, #0
 80029e6:	f104 0919 	add.w	r9, r4, #25
 80029ea:	e7f4      	b.n	80029d6 <_printf_float+0x456>

080029ec <_printf_common>:
 80029ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f0:	4616      	mov	r6, r2
 80029f2:	4699      	mov	r9, r3
 80029f4:	688a      	ldr	r2, [r1, #8]
 80029f6:	690b      	ldr	r3, [r1, #16]
 80029f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bfb8      	it	lt
 8002a00:	4613      	movlt	r3, r2
 8002a02:	6033      	str	r3, [r6, #0]
 8002a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a08:	4607      	mov	r7, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	b10a      	cbz	r2, 8002a12 <_printf_common+0x26>
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6033      	str	r3, [r6, #0]
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	0699      	lsls	r1, r3, #26
 8002a16:	bf42      	ittt	mi
 8002a18:	6833      	ldrmi	r3, [r6, #0]
 8002a1a:	3302      	addmi	r3, #2
 8002a1c:	6033      	strmi	r3, [r6, #0]
 8002a1e:	6825      	ldr	r5, [r4, #0]
 8002a20:	f015 0506 	ands.w	r5, r5, #6
 8002a24:	d106      	bne.n	8002a34 <_printf_common+0x48>
 8002a26:	f104 0a19 	add.w	sl, r4, #25
 8002a2a:	68e3      	ldr	r3, [r4, #12]
 8002a2c:	6832      	ldr	r2, [r6, #0]
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	42ab      	cmp	r3, r5
 8002a32:	dc26      	bgt.n	8002a82 <_printf_common+0x96>
 8002a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a38:	1e13      	subs	r3, r2, #0
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	bf18      	it	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	0692      	lsls	r2, r2, #26
 8002a42:	d42b      	bmi.n	8002a9c <_printf_common+0xb0>
 8002a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a48:	4649      	mov	r1, r9
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	47c0      	blx	r8
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d01e      	beq.n	8002a90 <_printf_common+0xa4>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	68e5      	ldr	r5, [r4, #12]
 8002a56:	6832      	ldr	r2, [r6, #0]
 8002a58:	f003 0306 	and.w	r3, r3, #6
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	bf08      	it	eq
 8002a60:	1aad      	subeq	r5, r5, r2
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	bf0c      	ite	eq
 8002a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a6c:	2500      	movne	r5, #0
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	bfc4      	itt	gt
 8002a72:	1a9b      	subgt	r3, r3, r2
 8002a74:	18ed      	addgt	r5, r5, r3
 8002a76:	2600      	movs	r6, #0
 8002a78:	341a      	adds	r4, #26
 8002a7a:	42b5      	cmp	r5, r6
 8002a7c:	d11a      	bne.n	8002ab4 <_printf_common+0xc8>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e008      	b.n	8002a94 <_printf_common+0xa8>
 8002a82:	2301      	movs	r3, #1
 8002a84:	4652      	mov	r2, sl
 8002a86:	4649      	mov	r1, r9
 8002a88:	4638      	mov	r0, r7
 8002a8a:	47c0      	blx	r8
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d103      	bne.n	8002a98 <_printf_common+0xac>
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a98:	3501      	adds	r5, #1
 8002a9a:	e7c6      	b.n	8002a2a <_printf_common+0x3e>
 8002a9c:	18e1      	adds	r1, r4, r3
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	2030      	movs	r0, #48	; 0x30
 8002aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa6:	4422      	add	r2, r4
 8002aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	e7c7      	b.n	8002a44 <_printf_common+0x58>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4649      	mov	r1, r9
 8002aba:	4638      	mov	r0, r7
 8002abc:	47c0      	blx	r8
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d0e6      	beq.n	8002a90 <_printf_common+0xa4>
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7d9      	b.n	8002a7a <_printf_common+0x8e>
	...

08002ac8 <_printf_i>:
 8002ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002acc:	7e0f      	ldrb	r7, [r1, #24]
 8002ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ad0:	2f78      	cmp	r7, #120	; 0x78
 8002ad2:	4691      	mov	r9, r2
 8002ad4:	4680      	mov	r8, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	469a      	mov	sl, r3
 8002ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ade:	d807      	bhi.n	8002af0 <_printf_i+0x28>
 8002ae0:	2f62      	cmp	r7, #98	; 0x62
 8002ae2:	d80a      	bhi.n	8002afa <_printf_i+0x32>
 8002ae4:	2f00      	cmp	r7, #0
 8002ae6:	f000 80d8 	beq.w	8002c9a <_printf_i+0x1d2>
 8002aea:	2f58      	cmp	r7, #88	; 0x58
 8002aec:	f000 80a3 	beq.w	8002c36 <_printf_i+0x16e>
 8002af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002af8:	e03a      	b.n	8002b70 <_printf_i+0xa8>
 8002afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002afe:	2b15      	cmp	r3, #21
 8002b00:	d8f6      	bhi.n	8002af0 <_printf_i+0x28>
 8002b02:	a101      	add	r1, pc, #4	; (adr r1, 8002b08 <_printf_i+0x40>)
 8002b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b75 	.word	0x08002b75
 8002b10:	08002af1 	.word	0x08002af1
 8002b14:	08002af1 	.word	0x08002af1
 8002b18:	08002af1 	.word	0x08002af1
 8002b1c:	08002af1 	.word	0x08002af1
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002af1 	.word	0x08002af1
 8002b28:	08002af1 	.word	0x08002af1
 8002b2c:	08002af1 	.word	0x08002af1
 8002b30:	08002af1 	.word	0x08002af1
 8002b34:	08002c81 	.word	0x08002c81
 8002b38:	08002ba5 	.word	0x08002ba5
 8002b3c:	08002c63 	.word	0x08002c63
 8002b40:	08002af1 	.word	0x08002af1
 8002b44:	08002af1 	.word	0x08002af1
 8002b48:	08002ca3 	.word	0x08002ca3
 8002b4c:	08002af1 	.word	0x08002af1
 8002b50:	08002ba5 	.word	0x08002ba5
 8002b54:	08002af1 	.word	0x08002af1
 8002b58:	08002af1 	.word	0x08002af1
 8002b5c:	08002c6b 	.word	0x08002c6b
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	602a      	str	r2, [r5, #0]
 8002b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0a3      	b.n	8002cbc <_printf_i+0x1f4>
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	6829      	ldr	r1, [r5, #0]
 8002b78:	0606      	lsls	r6, r0, #24
 8002b7a:	f101 0304 	add.w	r3, r1, #4
 8002b7e:	d50a      	bpl.n	8002b96 <_printf_i+0xce>
 8002b80:	680e      	ldr	r6, [r1, #0]
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	da03      	bge.n	8002b90 <_printf_i+0xc8>
 8002b88:	232d      	movs	r3, #45	; 0x2d
 8002b8a:	4276      	negs	r6, r6
 8002b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b90:	485e      	ldr	r0, [pc, #376]	; (8002d0c <_printf_i+0x244>)
 8002b92:	230a      	movs	r3, #10
 8002b94:	e019      	b.n	8002bca <_printf_i+0x102>
 8002b96:	680e      	ldr	r6, [r1, #0]
 8002b98:	602b      	str	r3, [r5, #0]
 8002b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b9e:	bf18      	it	ne
 8002ba0:	b236      	sxthne	r6, r6
 8002ba2:	e7ef      	b.n	8002b84 <_printf_i+0xbc>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	6029      	str	r1, [r5, #0]
 8002bac:	0601      	lsls	r1, r0, #24
 8002bae:	d501      	bpl.n	8002bb4 <_printf_i+0xec>
 8002bb0:	681e      	ldr	r6, [r3, #0]
 8002bb2:	e002      	b.n	8002bba <_printf_i+0xf2>
 8002bb4:	0646      	lsls	r6, r0, #25
 8002bb6:	d5fb      	bpl.n	8002bb0 <_printf_i+0xe8>
 8002bb8:	881e      	ldrh	r6, [r3, #0]
 8002bba:	4854      	ldr	r0, [pc, #336]	; (8002d0c <_printf_i+0x244>)
 8002bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2308      	moveq	r3, #8
 8002bc2:	230a      	movne	r3, #10
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bca:	6865      	ldr	r5, [r4, #4]
 8002bcc:	60a5      	str	r5, [r4, #8]
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	bfa2      	ittt	ge
 8002bd2:	6821      	ldrge	r1, [r4, #0]
 8002bd4:	f021 0104 	bicge.w	r1, r1, #4
 8002bd8:	6021      	strge	r1, [r4, #0]
 8002bda:	b90e      	cbnz	r6, 8002be0 <_printf_i+0x118>
 8002bdc:	2d00      	cmp	r5, #0
 8002bde:	d04d      	beq.n	8002c7c <_printf_i+0x1b4>
 8002be0:	4615      	mov	r5, r2
 8002be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002be6:	fb03 6711 	mls	r7, r3, r1, r6
 8002bea:	5dc7      	ldrb	r7, [r0, r7]
 8002bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bf0:	4637      	mov	r7, r6
 8002bf2:	42bb      	cmp	r3, r7
 8002bf4:	460e      	mov	r6, r1
 8002bf6:	d9f4      	bls.n	8002be2 <_printf_i+0x11a>
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d10b      	bne.n	8002c14 <_printf_i+0x14c>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	07de      	lsls	r6, r3, #31
 8002c00:	d508      	bpl.n	8002c14 <_printf_i+0x14c>
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	6861      	ldr	r1, [r4, #4]
 8002c06:	4299      	cmp	r1, r3
 8002c08:	bfde      	ittt	le
 8002c0a:	2330      	movle	r3, #48	; 0x30
 8002c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c14:	1b52      	subs	r2, r2, r5
 8002c16:	6122      	str	r2, [r4, #16]
 8002c18:	f8cd a000 	str.w	sl, [sp]
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	aa03      	add	r2, sp, #12
 8002c20:	4621      	mov	r1, r4
 8002c22:	4640      	mov	r0, r8
 8002c24:	f7ff fee2 	bl	80029ec <_printf_common>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d14c      	bne.n	8002cc6 <_printf_i+0x1fe>
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	b004      	add	sp, #16
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c36:	4835      	ldr	r0, [pc, #212]	; (8002d0c <_printf_i+0x244>)
 8002c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c3c:	6829      	ldr	r1, [r5, #0]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c44:	6029      	str	r1, [r5, #0]
 8002c46:	061d      	lsls	r5, r3, #24
 8002c48:	d514      	bpl.n	8002c74 <_printf_i+0x1ac>
 8002c4a:	07df      	lsls	r7, r3, #31
 8002c4c:	bf44      	itt	mi
 8002c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c52:	6023      	strmi	r3, [r4, #0]
 8002c54:	b91e      	cbnz	r6, 8002c5e <_printf_i+0x196>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	f023 0320 	bic.w	r3, r3, #32
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	2310      	movs	r3, #16
 8002c60:	e7b0      	b.n	8002bc4 <_printf_i+0xfc>
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	2378      	movs	r3, #120	; 0x78
 8002c6c:	4828      	ldr	r0, [pc, #160]	; (8002d10 <_printf_i+0x248>)
 8002c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c72:	e7e3      	b.n	8002c3c <_printf_i+0x174>
 8002c74:	0659      	lsls	r1, r3, #25
 8002c76:	bf48      	it	mi
 8002c78:	b2b6      	uxthmi	r6, r6
 8002c7a:	e7e6      	b.n	8002c4a <_printf_i+0x182>
 8002c7c:	4615      	mov	r5, r2
 8002c7e:	e7bb      	b.n	8002bf8 <_printf_i+0x130>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	6826      	ldr	r6, [r4, #0]
 8002c84:	6961      	ldr	r1, [r4, #20]
 8002c86:	1d18      	adds	r0, r3, #4
 8002c88:	6028      	str	r0, [r5, #0]
 8002c8a:	0635      	lsls	r5, r6, #24
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	d501      	bpl.n	8002c94 <_printf_i+0x1cc>
 8002c90:	6019      	str	r1, [r3, #0]
 8002c92:	e002      	b.n	8002c9a <_printf_i+0x1d2>
 8002c94:	0670      	lsls	r0, r6, #25
 8002c96:	d5fb      	bpl.n	8002c90 <_printf_i+0x1c8>
 8002c98:	8019      	strh	r1, [r3, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6123      	str	r3, [r4, #16]
 8002c9e:	4615      	mov	r5, r2
 8002ca0:	e7ba      	b.n	8002c18 <_printf_i+0x150>
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	1d1a      	adds	r2, r3, #4
 8002ca6:	602a      	str	r2, [r5, #0]
 8002ca8:	681d      	ldr	r5, [r3, #0]
 8002caa:	6862      	ldr	r2, [r4, #4]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7fd faae 	bl	8000210 <memchr>
 8002cb4:	b108      	cbz	r0, 8002cba <_printf_i+0x1f2>
 8002cb6:	1b40      	subs	r0, r0, r5
 8002cb8:	6060      	str	r0, [r4, #4]
 8002cba:	6863      	ldr	r3, [r4, #4]
 8002cbc:	6123      	str	r3, [r4, #16]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc4:	e7a8      	b.n	8002c18 <_printf_i+0x150>
 8002cc6:	6923      	ldr	r3, [r4, #16]
 8002cc8:	462a      	mov	r2, r5
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4640      	mov	r0, r8
 8002cce:	47d0      	blx	sl
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d0ab      	beq.n	8002c2c <_printf_i+0x164>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	079b      	lsls	r3, r3, #30
 8002cd8:	d413      	bmi.n	8002d02 <_printf_i+0x23a>
 8002cda:	68e0      	ldr	r0, [r4, #12]
 8002cdc:	9b03      	ldr	r3, [sp, #12]
 8002cde:	4298      	cmp	r0, r3
 8002ce0:	bfb8      	it	lt
 8002ce2:	4618      	movlt	r0, r3
 8002ce4:	e7a4      	b.n	8002c30 <_printf_i+0x168>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4632      	mov	r2, r6
 8002cea:	4649      	mov	r1, r9
 8002cec:	4640      	mov	r0, r8
 8002cee:	47d0      	blx	sl
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d09b      	beq.n	8002c2c <_printf_i+0x164>
 8002cf4:	3501      	adds	r5, #1
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	9903      	ldr	r1, [sp, #12]
 8002cfa:	1a5b      	subs	r3, r3, r1
 8002cfc:	42ab      	cmp	r3, r5
 8002cfe:	dcf2      	bgt.n	8002ce6 <_printf_i+0x21e>
 8002d00:	e7eb      	b.n	8002cda <_printf_i+0x212>
 8002d02:	2500      	movs	r5, #0
 8002d04:	f104 0619 	add.w	r6, r4, #25
 8002d08:	e7f5      	b.n	8002cf6 <_printf_i+0x22e>
 8002d0a:	bf00      	nop
 8002d0c:	080077c0 	.word	0x080077c0
 8002d10:	080077d1 	.word	0x080077d1

08002d14 <_scanf_float>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	4617      	mov	r7, r2
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	688b      	ldr	r3, [r1, #8]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002d26:	bf83      	ittte	hi
 8002d28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002d2c:	195b      	addhi	r3, r3, r5
 8002d2e:	9302      	strhi	r3, [sp, #8]
 8002d30:	2300      	movls	r3, #0
 8002d32:	bf86      	itte	hi
 8002d34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002d38:	608b      	strhi	r3, [r1, #8]
 8002d3a:	9302      	strls	r3, [sp, #8]
 8002d3c:	680b      	ldr	r3, [r1, #0]
 8002d3e:	468b      	mov	fp, r1
 8002d40:	2500      	movs	r5, #0
 8002d42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002d46:	f84b 3b1c 	str.w	r3, [fp], #28
 8002d4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002d4e:	4680      	mov	r8, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	465e      	mov	r6, fp
 8002d54:	46aa      	mov	sl, r5
 8002d56:	46a9      	mov	r9, r5
 8002d58:	9501      	str	r5, [sp, #4]
 8002d5a:	68a2      	ldr	r2, [r4, #8]
 8002d5c:	b152      	cbz	r2, 8002d74 <_scanf_float+0x60>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b4e      	cmp	r3, #78	; 0x4e
 8002d64:	d864      	bhi.n	8002e30 <_scanf_float+0x11c>
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d83c      	bhi.n	8002de4 <_scanf_float+0xd0>
 8002d6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002d6e:	b2c8      	uxtb	r0, r1
 8002d70:	280e      	cmp	r0, #14
 8002d72:	d93a      	bls.n	8002dea <_scanf_float+0xd6>
 8002d74:	f1b9 0f00 	cmp.w	r9, #0
 8002d78:	d003      	beq.n	8002d82 <_scanf_float+0x6e>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d86:	f1ba 0f01 	cmp.w	sl, #1
 8002d8a:	f200 8113 	bhi.w	8002fb4 <_scanf_float+0x2a0>
 8002d8e:	455e      	cmp	r6, fp
 8002d90:	f200 8105 	bhi.w	8002f9e <_scanf_float+0x28a>
 8002d94:	2501      	movs	r5, #1
 8002d96:	4628      	mov	r0, r5
 8002d98:	b007      	add	sp, #28
 8002d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002da2:	2a0d      	cmp	r2, #13
 8002da4:	d8e6      	bhi.n	8002d74 <_scanf_float+0x60>
 8002da6:	a101      	add	r1, pc, #4	; (adr r1, 8002dac <_scanf_float+0x98>)
 8002da8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002dac:	08002eeb 	.word	0x08002eeb
 8002db0:	08002d75 	.word	0x08002d75
 8002db4:	08002d75 	.word	0x08002d75
 8002db8:	08002d75 	.word	0x08002d75
 8002dbc:	08002f4b 	.word	0x08002f4b
 8002dc0:	08002f23 	.word	0x08002f23
 8002dc4:	08002d75 	.word	0x08002d75
 8002dc8:	08002d75 	.word	0x08002d75
 8002dcc:	08002ef9 	.word	0x08002ef9
 8002dd0:	08002d75 	.word	0x08002d75
 8002dd4:	08002d75 	.word	0x08002d75
 8002dd8:	08002d75 	.word	0x08002d75
 8002ddc:	08002d75 	.word	0x08002d75
 8002de0:	08002eb1 	.word	0x08002eb1
 8002de4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002de8:	e7db      	b.n	8002da2 <_scanf_float+0x8e>
 8002dea:	290e      	cmp	r1, #14
 8002dec:	d8c2      	bhi.n	8002d74 <_scanf_float+0x60>
 8002dee:	a001      	add	r0, pc, #4	; (adr r0, 8002df4 <_scanf_float+0xe0>)
 8002df0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002df4:	08002ea3 	.word	0x08002ea3
 8002df8:	08002d75 	.word	0x08002d75
 8002dfc:	08002ea3 	.word	0x08002ea3
 8002e00:	08002f37 	.word	0x08002f37
 8002e04:	08002d75 	.word	0x08002d75
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e8d 	.word	0x08002e8d
 8002e10:	08002e8d 	.word	0x08002e8d
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e8d 	.word	0x08002e8d
 8002e24:	08002e8d 	.word	0x08002e8d
 8002e28:	08002e8d 	.word	0x08002e8d
 8002e2c:	08002e8d 	.word	0x08002e8d
 8002e30:	2b6e      	cmp	r3, #110	; 0x6e
 8002e32:	d809      	bhi.n	8002e48 <_scanf_float+0x134>
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d8b2      	bhi.n	8002d9e <_scanf_float+0x8a>
 8002e38:	2b54      	cmp	r3, #84	; 0x54
 8002e3a:	d077      	beq.n	8002f2c <_scanf_float+0x218>
 8002e3c:	2b59      	cmp	r3, #89	; 0x59
 8002e3e:	d199      	bne.n	8002d74 <_scanf_float+0x60>
 8002e40:	2d07      	cmp	r5, #7
 8002e42:	d197      	bne.n	8002d74 <_scanf_float+0x60>
 8002e44:	2508      	movs	r5, #8
 8002e46:	e029      	b.n	8002e9c <_scanf_float+0x188>
 8002e48:	2b74      	cmp	r3, #116	; 0x74
 8002e4a:	d06f      	beq.n	8002f2c <_scanf_float+0x218>
 8002e4c:	2b79      	cmp	r3, #121	; 0x79
 8002e4e:	e7f6      	b.n	8002e3e <_scanf_float+0x12a>
 8002e50:	6821      	ldr	r1, [r4, #0]
 8002e52:	05c8      	lsls	r0, r1, #23
 8002e54:	d51a      	bpl.n	8002e8c <_scanf_float+0x178>
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002e5c:	6021      	str	r1, [r4, #0]
 8002e5e:	f109 0901 	add.w	r9, r9, #1
 8002e62:	b11b      	cbz	r3, 8002e6c <_scanf_float+0x158>
 8002e64:	3b01      	subs	r3, #1
 8002e66:	3201      	adds	r2, #1
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	60a2      	str	r2, [r4, #8]
 8002e6c:	68a3      	ldr	r3, [r4, #8]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60a3      	str	r3, [r4, #8]
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	3301      	adds	r3, #1
 8002e76:	6123      	str	r3, [r4, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	f340 8084 	ble.w	8002f8c <_scanf_float+0x278>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	e766      	b.n	8002d5a <_scanf_float+0x46>
 8002e8c:	eb1a 0f05 	cmn.w	sl, r5
 8002e90:	f47f af70 	bne.w	8002d74 <_scanf_float+0x60>
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002e9a:	6022      	str	r2, [r4, #0]
 8002e9c:	f806 3b01 	strb.w	r3, [r6], #1
 8002ea0:	e7e4      	b.n	8002e6c <_scanf_float+0x158>
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	0610      	lsls	r0, r2, #24
 8002ea6:	f57f af65 	bpl.w	8002d74 <_scanf_float+0x60>
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eae:	e7f4      	b.n	8002e9a <_scanf_float+0x186>
 8002eb0:	f1ba 0f00 	cmp.w	sl, #0
 8002eb4:	d10e      	bne.n	8002ed4 <_scanf_float+0x1c0>
 8002eb6:	f1b9 0f00 	cmp.w	r9, #0
 8002eba:	d10e      	bne.n	8002eda <_scanf_float+0x1c6>
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002ec2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002ec6:	d108      	bne.n	8002eda <_scanf_float+0x1c6>
 8002ec8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002ecc:	6022      	str	r2, [r4, #0]
 8002ece:	f04f 0a01 	mov.w	sl, #1
 8002ed2:	e7e3      	b.n	8002e9c <_scanf_float+0x188>
 8002ed4:	f1ba 0f02 	cmp.w	sl, #2
 8002ed8:	d055      	beq.n	8002f86 <_scanf_float+0x272>
 8002eda:	2d01      	cmp	r5, #1
 8002edc:	d002      	beq.n	8002ee4 <_scanf_float+0x1d0>
 8002ede:	2d04      	cmp	r5, #4
 8002ee0:	f47f af48 	bne.w	8002d74 <_scanf_float+0x60>
 8002ee4:	3501      	adds	r5, #1
 8002ee6:	b2ed      	uxtb	r5, r5
 8002ee8:	e7d8      	b.n	8002e9c <_scanf_float+0x188>
 8002eea:	f1ba 0f01 	cmp.w	sl, #1
 8002eee:	f47f af41 	bne.w	8002d74 <_scanf_float+0x60>
 8002ef2:	f04f 0a02 	mov.w	sl, #2
 8002ef6:	e7d1      	b.n	8002e9c <_scanf_float+0x188>
 8002ef8:	b97d      	cbnz	r5, 8002f1a <_scanf_float+0x206>
 8002efa:	f1b9 0f00 	cmp.w	r9, #0
 8002efe:	f47f af3c 	bne.w	8002d7a <_scanf_float+0x66>
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002f08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002f0c:	f47f af39 	bne.w	8002d82 <_scanf_float+0x6e>
 8002f10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002f14:	6022      	str	r2, [r4, #0]
 8002f16:	2501      	movs	r5, #1
 8002f18:	e7c0      	b.n	8002e9c <_scanf_float+0x188>
 8002f1a:	2d03      	cmp	r5, #3
 8002f1c:	d0e2      	beq.n	8002ee4 <_scanf_float+0x1d0>
 8002f1e:	2d05      	cmp	r5, #5
 8002f20:	e7de      	b.n	8002ee0 <_scanf_float+0x1cc>
 8002f22:	2d02      	cmp	r5, #2
 8002f24:	f47f af26 	bne.w	8002d74 <_scanf_float+0x60>
 8002f28:	2503      	movs	r5, #3
 8002f2a:	e7b7      	b.n	8002e9c <_scanf_float+0x188>
 8002f2c:	2d06      	cmp	r5, #6
 8002f2e:	f47f af21 	bne.w	8002d74 <_scanf_float+0x60>
 8002f32:	2507      	movs	r5, #7
 8002f34:	e7b2      	b.n	8002e9c <_scanf_float+0x188>
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	0591      	lsls	r1, r2, #22
 8002f3a:	f57f af1b 	bpl.w	8002d74 <_scanf_float+0x60>
 8002f3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002f42:	6022      	str	r2, [r4, #0]
 8002f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f48:	e7a8      	b.n	8002e9c <_scanf_float+0x188>
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002f50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002f54:	d006      	beq.n	8002f64 <_scanf_float+0x250>
 8002f56:	0550      	lsls	r0, r2, #21
 8002f58:	f57f af0c 	bpl.w	8002d74 <_scanf_float+0x60>
 8002f5c:	f1b9 0f00 	cmp.w	r9, #0
 8002f60:	f43f af0f 	beq.w	8002d82 <_scanf_float+0x6e>
 8002f64:	0591      	lsls	r1, r2, #22
 8002f66:	bf58      	it	pl
 8002f68:	9901      	ldrpl	r1, [sp, #4]
 8002f6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002f6e:	bf58      	it	pl
 8002f70:	eba9 0101 	subpl.w	r1, r9, r1
 8002f74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002f78:	bf58      	it	pl
 8002f7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002f7e:	6022      	str	r2, [r4, #0]
 8002f80:	f04f 0900 	mov.w	r9, #0
 8002f84:	e78a      	b.n	8002e9c <_scanf_float+0x188>
 8002f86:	f04f 0a03 	mov.w	sl, #3
 8002f8a:	e787      	b.n	8002e9c <_scanf_float+0x188>
 8002f8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002f90:	4639      	mov	r1, r7
 8002f92:	4640      	mov	r0, r8
 8002f94:	4798      	blx	r3
 8002f96:	2800      	cmp	r0, #0
 8002f98:	f43f aedf 	beq.w	8002d5a <_scanf_float+0x46>
 8002f9c:	e6ea      	b.n	8002d74 <_scanf_float+0x60>
 8002f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002fa6:	463a      	mov	r2, r7
 8002fa8:	4640      	mov	r0, r8
 8002faa:	4798      	blx	r3
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6123      	str	r3, [r4, #16]
 8002fb2:	e6ec      	b.n	8002d8e <_scanf_float+0x7a>
 8002fb4:	1e6b      	subs	r3, r5, #1
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d825      	bhi.n	8003006 <_scanf_float+0x2f2>
 8002fba:	2d02      	cmp	r5, #2
 8002fbc:	d836      	bhi.n	800302c <_scanf_float+0x318>
 8002fbe:	455e      	cmp	r6, fp
 8002fc0:	f67f aee8 	bls.w	8002d94 <_scanf_float+0x80>
 8002fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002fcc:	463a      	mov	r2, r7
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4798      	blx	r3
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	6123      	str	r3, [r4, #16]
 8002fd8:	e7f1      	b.n	8002fbe <_scanf_float+0x2aa>
 8002fda:	9802      	ldr	r0, [sp, #8]
 8002fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002fe0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002fe4:	9002      	str	r0, [sp, #8]
 8002fe6:	463a      	mov	r2, r7
 8002fe8:	4640      	mov	r0, r8
 8002fea:	4798      	blx	r3
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ff6:	fa5f fa8a 	uxtb.w	sl, sl
 8002ffa:	f1ba 0f02 	cmp.w	sl, #2
 8002ffe:	d1ec      	bne.n	8002fda <_scanf_float+0x2c6>
 8003000:	3d03      	subs	r5, #3
 8003002:	b2ed      	uxtb	r5, r5
 8003004:	1b76      	subs	r6, r6, r5
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	05da      	lsls	r2, r3, #23
 800300a:	d52f      	bpl.n	800306c <_scanf_float+0x358>
 800300c:	055b      	lsls	r3, r3, #21
 800300e:	d510      	bpl.n	8003032 <_scanf_float+0x31e>
 8003010:	455e      	cmp	r6, fp
 8003012:	f67f aebf 	bls.w	8002d94 <_scanf_float+0x80>
 8003016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800301a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800301e:	463a      	mov	r2, r7
 8003020:	4640      	mov	r0, r8
 8003022:	4798      	blx	r3
 8003024:	6923      	ldr	r3, [r4, #16]
 8003026:	3b01      	subs	r3, #1
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	e7f1      	b.n	8003010 <_scanf_float+0x2fc>
 800302c:	46aa      	mov	sl, r5
 800302e:	9602      	str	r6, [sp, #8]
 8003030:	e7df      	b.n	8002ff2 <_scanf_float+0x2de>
 8003032:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	2965      	cmp	r1, #101	; 0x65
 800303a:	f103 33ff 	add.w	r3, r3, #4294967295
 800303e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003042:	6123      	str	r3, [r4, #16]
 8003044:	d00c      	beq.n	8003060 <_scanf_float+0x34c>
 8003046:	2945      	cmp	r1, #69	; 0x45
 8003048:	d00a      	beq.n	8003060 <_scanf_float+0x34c>
 800304a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800304e:	463a      	mov	r2, r7
 8003050:	4640      	mov	r0, r8
 8003052:	4798      	blx	r3
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800305a:	3b01      	subs	r3, #1
 800305c:	1eb5      	subs	r5, r6, #2
 800305e:	6123      	str	r3, [r4, #16]
 8003060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003064:	463a      	mov	r2, r7
 8003066:	4640      	mov	r0, r8
 8003068:	4798      	blx	r3
 800306a:	462e      	mov	r6, r5
 800306c:	6825      	ldr	r5, [r4, #0]
 800306e:	f015 0510 	ands.w	r5, r5, #16
 8003072:	d159      	bne.n	8003128 <_scanf_float+0x414>
 8003074:	7035      	strb	r5, [r6, #0]
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003080:	d11b      	bne.n	80030ba <_scanf_float+0x3a6>
 8003082:	9b01      	ldr	r3, [sp, #4]
 8003084:	454b      	cmp	r3, r9
 8003086:	eba3 0209 	sub.w	r2, r3, r9
 800308a:	d123      	bne.n	80030d4 <_scanf_float+0x3c0>
 800308c:	2200      	movs	r2, #0
 800308e:	4659      	mov	r1, fp
 8003090:	4640      	mov	r0, r8
 8003092:	f000 ff0b 	bl	8003eac <_strtod_r>
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	9b03      	ldr	r3, [sp, #12]
 800309a:	f012 0f02 	tst.w	r2, #2
 800309e:	ec57 6b10 	vmov	r6, r7, d0
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	d021      	beq.n	80030ea <_scanf_float+0x3d6>
 80030a6:	9903      	ldr	r1, [sp, #12]
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	600a      	str	r2, [r1, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e9c3 6700 	strd	r6, r7, [r3]
 80030b2:	68e3      	ldr	r3, [r4, #12]
 80030b4:	3301      	adds	r3, #1
 80030b6:	60e3      	str	r3, [r4, #12]
 80030b8:	e66d      	b.n	8002d96 <_scanf_float+0x82>
 80030ba:	9b04      	ldr	r3, [sp, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0e5      	beq.n	800308c <_scanf_float+0x378>
 80030c0:	9905      	ldr	r1, [sp, #20]
 80030c2:	230a      	movs	r3, #10
 80030c4:	462a      	mov	r2, r5
 80030c6:	3101      	adds	r1, #1
 80030c8:	4640      	mov	r0, r8
 80030ca:	f000 ff77 	bl	8003fbc <_strtol_r>
 80030ce:	9b04      	ldr	r3, [sp, #16]
 80030d0:	9e05      	ldr	r6, [sp, #20]
 80030d2:	1ac2      	subs	r2, r0, r3
 80030d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80030d8:	429e      	cmp	r6, r3
 80030da:	bf28      	it	cs
 80030dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <_scanf_float+0x418>)
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 f82c 	bl	8003140 <siprintf>
 80030e8:	e7d0      	b.n	800308c <_scanf_float+0x378>
 80030ea:	9903      	ldr	r1, [sp, #12]
 80030ec:	f012 0f04 	tst.w	r2, #4
 80030f0:	f103 0204 	add.w	r2, r3, #4
 80030f4:	600a      	str	r2, [r1, #0]
 80030f6:	d1d9      	bne.n	80030ac <_scanf_float+0x398>
 80030f8:	f8d3 8000 	ldr.w	r8, [r3]
 80030fc:	ee10 2a10 	vmov	r2, s0
 8003100:	ee10 0a10 	vmov	r0, s0
 8003104:	463b      	mov	r3, r7
 8003106:	4639      	mov	r1, r7
 8003108:	f7fd fd28 	bl	8000b5c <__aeabi_dcmpun>
 800310c:	b128      	cbz	r0, 800311a <_scanf_float+0x406>
 800310e:	4808      	ldr	r0, [pc, #32]	; (8003130 <_scanf_float+0x41c>)
 8003110:	f000 f810 	bl	8003134 <nanf>
 8003114:	ed88 0a00 	vstr	s0, [r8]
 8003118:	e7cb      	b.n	80030b2 <_scanf_float+0x39e>
 800311a:	4630      	mov	r0, r6
 800311c:	4639      	mov	r1, r7
 800311e:	f7fd fd7b 	bl	8000c18 <__aeabi_d2f>
 8003122:	f8c8 0000 	str.w	r0, [r8]
 8003126:	e7c4      	b.n	80030b2 <_scanf_float+0x39e>
 8003128:	2500      	movs	r5, #0
 800312a:	e634      	b.n	8002d96 <_scanf_float+0x82>
 800312c:	080077e2 	.word	0x080077e2
 8003130:	08007c03 	.word	0x08007c03

08003134 <nanf>:
 8003134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800313c <nanf+0x8>
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	7fc00000 	.word	0x7fc00000

08003140 <siprintf>:
 8003140:	b40e      	push	{r1, r2, r3}
 8003142:	b500      	push	{lr}
 8003144:	b09c      	sub	sp, #112	; 0x70
 8003146:	ab1d      	add	r3, sp, #116	; 0x74
 8003148:	9002      	str	r0, [sp, #8]
 800314a:	9006      	str	r0, [sp, #24]
 800314c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003150:	4809      	ldr	r0, [pc, #36]	; (8003178 <siprintf+0x38>)
 8003152:	9107      	str	r1, [sp, #28]
 8003154:	9104      	str	r1, [sp, #16]
 8003156:	4909      	ldr	r1, [pc, #36]	; (800317c <siprintf+0x3c>)
 8003158:	f853 2b04 	ldr.w	r2, [r3], #4
 800315c:	9105      	str	r1, [sp, #20]
 800315e:	6800      	ldr	r0, [r0, #0]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	a902      	add	r1, sp, #8
 8003164:	f002 ff8c 	bl	8006080 <_svfiprintf_r>
 8003168:	9b02      	ldr	r3, [sp, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	b01c      	add	sp, #112	; 0x70
 8003170:	f85d eb04 	ldr.w	lr, [sp], #4
 8003174:	b003      	add	sp, #12
 8003176:	4770      	bx	lr
 8003178:	20000010 	.word	0x20000010
 800317c:	ffff0208 	.word	0xffff0208

08003180 <siscanf>:
 8003180:	b40e      	push	{r1, r2, r3}
 8003182:	b510      	push	{r4, lr}
 8003184:	b09f      	sub	sp, #124	; 0x7c
 8003186:	ac21      	add	r4, sp, #132	; 0x84
 8003188:	f44f 7101 	mov.w	r1, #516	; 0x204
 800318c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003190:	9201      	str	r2, [sp, #4]
 8003192:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003196:	9004      	str	r0, [sp, #16]
 8003198:	9008      	str	r0, [sp, #32]
 800319a:	f7fd f82b 	bl	80001f4 <strlen>
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <siscanf+0x50>)
 80031a0:	9005      	str	r0, [sp, #20]
 80031a2:	9009      	str	r0, [sp, #36]	; 0x24
 80031a4:	930d      	str	r3, [sp, #52]	; 0x34
 80031a6:	480b      	ldr	r0, [pc, #44]	; (80031d4 <siscanf+0x54>)
 80031a8:	9a01      	ldr	r2, [sp, #4]
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	9403      	str	r4, [sp, #12]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9311      	str	r3, [sp, #68]	; 0x44
 80031b2:	9316      	str	r3, [sp, #88]	; 0x58
 80031b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80031bc:	a904      	add	r1, sp, #16
 80031be:	4623      	mov	r3, r4
 80031c0:	f003 f8b8 	bl	8006334 <__ssvfiscanf_r>
 80031c4:	b01f      	add	sp, #124	; 0x7c
 80031c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ca:	b003      	add	sp, #12
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	080031fb 	.word	0x080031fb
 80031d4:	20000010 	.word	0x20000010

080031d8 <__sread>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	460c      	mov	r4, r1
 80031dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e0:	f003 fb72 	bl	80068c8 <_read_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	bfab      	itete	ge
 80031e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031ea:	89a3      	ldrhlt	r3, [r4, #12]
 80031ec:	181b      	addge	r3, r3, r0
 80031ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031f2:	bfac      	ite	ge
 80031f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80031f6:	81a3      	strhlt	r3, [r4, #12]
 80031f8:	bd10      	pop	{r4, pc}

080031fa <__seofread>:
 80031fa:	2000      	movs	r0, #0
 80031fc:	4770      	bx	lr

080031fe <__swrite>:
 80031fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	461f      	mov	r7, r3
 8003204:	898b      	ldrh	r3, [r1, #12]
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	4605      	mov	r5, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4616      	mov	r6, r2
 800320e:	d505      	bpl.n	800321c <__swrite+0x1e>
 8003210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003214:	2302      	movs	r3, #2
 8003216:	2200      	movs	r2, #0
 8003218:	f002 f8e4 	bl	80053e4 <_lseek_r>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	4632      	mov	r2, r6
 800322a:	463b      	mov	r3, r7
 800322c:	4628      	mov	r0, r5
 800322e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003232:	f000 bec5 	b.w	8003fc0 <_write_r>

08003236 <__sseek>:
 8003236:	b510      	push	{r4, lr}
 8003238:	460c      	mov	r4, r1
 800323a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323e:	f002 f8d1 	bl	80053e4 <_lseek_r>
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	bf15      	itete	ne
 8003248:	6560      	strne	r0, [r4, #84]	; 0x54
 800324a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800324e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003252:	81a3      	strheq	r3, [r4, #12]
 8003254:	bf18      	it	ne
 8003256:	81a3      	strhne	r3, [r4, #12]
 8003258:	bd10      	pop	{r4, pc}

0800325a <__sclose>:
 800325a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325e:	f000 bec1 	b.w	8003fe4 <_close_r>

08003262 <sulp>:
 8003262:	b570      	push	{r4, r5, r6, lr}
 8003264:	4604      	mov	r4, r0
 8003266:	460d      	mov	r5, r1
 8003268:	ec45 4b10 	vmov	d0, r4, r5
 800326c:	4616      	mov	r6, r2
 800326e:	f002 fc65 	bl	8005b3c <__ulp>
 8003272:	ec51 0b10 	vmov	r0, r1, d0
 8003276:	b17e      	cbz	r6, 8003298 <sulp+0x36>
 8003278:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800327c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003280:	2b00      	cmp	r3, #0
 8003282:	dd09      	ble.n	8003298 <sulp+0x36>
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800328a:	2400      	movs	r4, #0
 800328c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003290:	4622      	mov	r2, r4
 8003292:	462b      	mov	r3, r5
 8003294:	f7fd f9c8 	bl	8000628 <__aeabi_dmul>
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	0000      	movs	r0, r0
 800329c:	0000      	movs	r0, r0
	...

080032a0 <_strtod_l>:
 80032a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a4:	ed2d 8b02 	vpush	{d8}
 80032a8:	b09d      	sub	sp, #116	; 0x74
 80032aa:	461f      	mov	r7, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	9318      	str	r3, [sp, #96]	; 0x60
 80032b0:	4ba2      	ldr	r3, [pc, #648]	; (800353c <_strtod_l+0x29c>)
 80032b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	9305      	str	r3, [sp, #20]
 80032b8:	4604      	mov	r4, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	4688      	mov	r8, r1
 80032be:	f7fc ff99 	bl	80001f4 <strlen>
 80032c2:	f04f 0a00 	mov.w	sl, #0
 80032c6:	4605      	mov	r5, r0
 80032c8:	f04f 0b00 	mov.w	fp, #0
 80032cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80032d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	2a2b      	cmp	r2, #43	; 0x2b
 80032d6:	d04e      	beq.n	8003376 <_strtod_l+0xd6>
 80032d8:	d83b      	bhi.n	8003352 <_strtod_l+0xb2>
 80032da:	2a0d      	cmp	r2, #13
 80032dc:	d834      	bhi.n	8003348 <_strtod_l+0xa8>
 80032de:	2a08      	cmp	r2, #8
 80032e0:	d834      	bhi.n	800334c <_strtod_l+0xac>
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d03e      	beq.n	8003364 <_strtod_l+0xc4>
 80032e6:	2300      	movs	r3, #0
 80032e8:	930a      	str	r3, [sp, #40]	; 0x28
 80032ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80032ec:	7833      	ldrb	r3, [r6, #0]
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	f040 80b0 	bne.w	8003454 <_strtod_l+0x1b4>
 80032f4:	7873      	ldrb	r3, [r6, #1]
 80032f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80032fa:	2b58      	cmp	r3, #88	; 0x58
 80032fc:	d168      	bne.n	80033d0 <_strtod_l+0x130>
 80032fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	ab18      	add	r3, sp, #96	; 0x60
 8003304:	9702      	str	r7, [sp, #8]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4a8d      	ldr	r2, [pc, #564]	; (8003540 <_strtod_l+0x2a0>)
 800330a:	ab19      	add	r3, sp, #100	; 0x64
 800330c:	a917      	add	r1, sp, #92	; 0x5c
 800330e:	4620      	mov	r0, r4
 8003310:	f001 fd5c 	bl	8004dcc <__gethex>
 8003314:	f010 0707 	ands.w	r7, r0, #7
 8003318:	4605      	mov	r5, r0
 800331a:	d005      	beq.n	8003328 <_strtod_l+0x88>
 800331c:	2f06      	cmp	r7, #6
 800331e:	d12c      	bne.n	800337a <_strtod_l+0xda>
 8003320:	3601      	adds	r6, #1
 8003322:	2300      	movs	r3, #0
 8003324:	9617      	str	r6, [sp, #92]	; 0x5c
 8003326:	930a      	str	r3, [sp, #40]	; 0x28
 8003328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8590 	bne.w	8003e50 <_strtod_l+0xbb0>
 8003330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003332:	b1eb      	cbz	r3, 8003370 <_strtod_l+0xd0>
 8003334:	4652      	mov	r2, sl
 8003336:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800333a:	ec43 2b10 	vmov	d0, r2, r3
 800333e:	b01d      	add	sp, #116	; 0x74
 8003340:	ecbd 8b02 	vpop	{d8}
 8003344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003348:	2a20      	cmp	r2, #32
 800334a:	d1cc      	bne.n	80032e6 <_strtod_l+0x46>
 800334c:	3301      	adds	r3, #1
 800334e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003350:	e7be      	b.n	80032d0 <_strtod_l+0x30>
 8003352:	2a2d      	cmp	r2, #45	; 0x2d
 8003354:	d1c7      	bne.n	80032e6 <_strtod_l+0x46>
 8003356:	2201      	movs	r2, #1
 8003358:	920a      	str	r2, [sp, #40]	; 0x28
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	9217      	str	r2, [sp, #92]	; 0x5c
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1c2      	bne.n	80032ea <_strtod_l+0x4a>
 8003364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003366:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 856e 	bne.w	8003e4c <_strtod_l+0xbac>
 8003370:	4652      	mov	r2, sl
 8003372:	465b      	mov	r3, fp
 8003374:	e7e1      	b.n	800333a <_strtod_l+0x9a>
 8003376:	2200      	movs	r2, #0
 8003378:	e7ee      	b.n	8003358 <_strtod_l+0xb8>
 800337a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800337c:	b13a      	cbz	r2, 800338e <_strtod_l+0xee>
 800337e:	2135      	movs	r1, #53	; 0x35
 8003380:	a81a      	add	r0, sp, #104	; 0x68
 8003382:	f002 fce6 	bl	8005d52 <__copybits>
 8003386:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003388:	4620      	mov	r0, r4
 800338a:	f002 f8a5 	bl	80054d8 <_Bfree>
 800338e:	3f01      	subs	r7, #1
 8003390:	2f04      	cmp	r7, #4
 8003392:	d806      	bhi.n	80033a2 <_strtod_l+0x102>
 8003394:	e8df f007 	tbb	[pc, r7]
 8003398:	1714030a 	.word	0x1714030a
 800339c:	0a          	.byte	0x0a
 800339d:	00          	.byte	0x00
 800339e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80033a2:	0728      	lsls	r0, r5, #28
 80033a4:	d5c0      	bpl.n	8003328 <_strtod_l+0x88>
 80033a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80033aa:	e7bd      	b.n	8003328 <_strtod_l+0x88>
 80033ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80033b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80033b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80033b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80033ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80033be:	e7f0      	b.n	80033a2 <_strtod_l+0x102>
 80033c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003544 <_strtod_l+0x2a4>
 80033c4:	e7ed      	b.n	80033a2 <_strtod_l+0x102>
 80033c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80033ca:	f04f 3aff 	mov.w	sl, #4294967295
 80033ce:	e7e8      	b.n	80033a2 <_strtod_l+0x102>
 80033d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d0f9      	beq.n	80033d0 <_strtod_l+0x130>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0a3      	beq.n	8003328 <_strtod_l+0x88>
 80033e0:	2301      	movs	r3, #1
 80033e2:	f04f 0900 	mov.w	r9, #0
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80033ea:	9308      	str	r3, [sp, #32]
 80033ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80033f0:	464f      	mov	r7, r9
 80033f2:	220a      	movs	r2, #10
 80033f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80033f6:	7806      	ldrb	r6, [r0, #0]
 80033f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80033fc:	b2d9      	uxtb	r1, r3
 80033fe:	2909      	cmp	r1, #9
 8003400:	d92a      	bls.n	8003458 <_strtod_l+0x1b8>
 8003402:	9905      	ldr	r1, [sp, #20]
 8003404:	462a      	mov	r2, r5
 8003406:	f003 fac3 	bl	8006990 <strncmp>
 800340a:	b398      	cbz	r0, 8003474 <_strtod_l+0x1d4>
 800340c:	2000      	movs	r0, #0
 800340e:	4632      	mov	r2, r6
 8003410:	463d      	mov	r5, r7
 8003412:	9005      	str	r0, [sp, #20]
 8003414:	4603      	mov	r3, r0
 8003416:	2a65      	cmp	r2, #101	; 0x65
 8003418:	d001      	beq.n	800341e <_strtod_l+0x17e>
 800341a:	2a45      	cmp	r2, #69	; 0x45
 800341c:	d118      	bne.n	8003450 <_strtod_l+0x1b0>
 800341e:	b91d      	cbnz	r5, 8003428 <_strtod_l+0x188>
 8003420:	9a04      	ldr	r2, [sp, #16]
 8003422:	4302      	orrs	r2, r0
 8003424:	d09e      	beq.n	8003364 <_strtod_l+0xc4>
 8003426:	2500      	movs	r5, #0
 8003428:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800342c:	f108 0201 	add.w	r2, r8, #1
 8003430:	9217      	str	r2, [sp, #92]	; 0x5c
 8003432:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003436:	2a2b      	cmp	r2, #43	; 0x2b
 8003438:	d075      	beq.n	8003526 <_strtod_l+0x286>
 800343a:	2a2d      	cmp	r2, #45	; 0x2d
 800343c:	d07b      	beq.n	8003536 <_strtod_l+0x296>
 800343e:	f04f 0c00 	mov.w	ip, #0
 8003442:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003446:	2909      	cmp	r1, #9
 8003448:	f240 8082 	bls.w	8003550 <_strtod_l+0x2b0>
 800344c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003450:	2600      	movs	r6, #0
 8003452:	e09d      	b.n	8003590 <_strtod_l+0x2f0>
 8003454:	2300      	movs	r3, #0
 8003456:	e7c4      	b.n	80033e2 <_strtod_l+0x142>
 8003458:	2f08      	cmp	r7, #8
 800345a:	bfd8      	it	le
 800345c:	9907      	ldrle	r1, [sp, #28]
 800345e:	f100 0001 	add.w	r0, r0, #1
 8003462:	bfda      	itte	le
 8003464:	fb02 3301 	mlale	r3, r2, r1, r3
 8003468:	9307      	strle	r3, [sp, #28]
 800346a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800346e:	3701      	adds	r7, #1
 8003470:	9017      	str	r0, [sp, #92]	; 0x5c
 8003472:	e7bf      	b.n	80033f4 <_strtod_l+0x154>
 8003474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003476:	195a      	adds	r2, r3, r5
 8003478:	9217      	str	r2, [sp, #92]	; 0x5c
 800347a:	5d5a      	ldrb	r2, [r3, r5]
 800347c:	2f00      	cmp	r7, #0
 800347e:	d037      	beq.n	80034f0 <_strtod_l+0x250>
 8003480:	9005      	str	r0, [sp, #20]
 8003482:	463d      	mov	r5, r7
 8003484:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003488:	2b09      	cmp	r3, #9
 800348a:	d912      	bls.n	80034b2 <_strtod_l+0x212>
 800348c:	2301      	movs	r3, #1
 800348e:	e7c2      	b.n	8003416 <_strtod_l+0x176>
 8003490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	9217      	str	r2, [sp, #92]	; 0x5c
 8003496:	785a      	ldrb	r2, [r3, #1]
 8003498:	3001      	adds	r0, #1
 800349a:	2a30      	cmp	r2, #48	; 0x30
 800349c:	d0f8      	beq.n	8003490 <_strtod_l+0x1f0>
 800349e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	f200 84d9 	bhi.w	8003e5a <_strtod_l+0xbba>
 80034a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80034aa:	9005      	str	r0, [sp, #20]
 80034ac:	2000      	movs	r0, #0
 80034ae:	9308      	str	r3, [sp, #32]
 80034b0:	4605      	mov	r5, r0
 80034b2:	3a30      	subs	r2, #48	; 0x30
 80034b4:	f100 0301 	add.w	r3, r0, #1
 80034b8:	d014      	beq.n	80034e4 <_strtod_l+0x244>
 80034ba:	9905      	ldr	r1, [sp, #20]
 80034bc:	4419      	add	r1, r3
 80034be:	9105      	str	r1, [sp, #20]
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb00 0e05 	add.w	lr, r0, r5
 80034c6:	210a      	movs	r1, #10
 80034c8:	4573      	cmp	r3, lr
 80034ca:	d113      	bne.n	80034f4 <_strtod_l+0x254>
 80034cc:	182b      	adds	r3, r5, r0
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	f105 0501 	add.w	r5, r5, #1
 80034d4:	4405      	add	r5, r0
 80034d6:	dc1c      	bgt.n	8003512 <_strtod_l+0x272>
 80034d8:	9907      	ldr	r1, [sp, #28]
 80034da:	230a      	movs	r3, #10
 80034dc:	fb03 2301 	mla	r3, r3, r1, r2
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80034e6:	1c51      	adds	r1, r2, #1
 80034e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80034ea:	7852      	ldrb	r2, [r2, #1]
 80034ec:	4618      	mov	r0, r3
 80034ee:	e7c9      	b.n	8003484 <_strtod_l+0x1e4>
 80034f0:	4638      	mov	r0, r7
 80034f2:	e7d2      	b.n	800349a <_strtod_l+0x1fa>
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	dc04      	bgt.n	8003502 <_strtod_l+0x262>
 80034f8:	9e07      	ldr	r6, [sp, #28]
 80034fa:	434e      	muls	r6, r1
 80034fc:	9607      	str	r6, [sp, #28]
 80034fe:	3301      	adds	r3, #1
 8003500:	e7e2      	b.n	80034c8 <_strtod_l+0x228>
 8003502:	f103 0c01 	add.w	ip, r3, #1
 8003506:	f1bc 0f10 	cmp.w	ip, #16
 800350a:	bfd8      	it	le
 800350c:	fb01 f909 	mulle.w	r9, r1, r9
 8003510:	e7f5      	b.n	80034fe <_strtod_l+0x25e>
 8003512:	2d10      	cmp	r5, #16
 8003514:	bfdc      	itt	le
 8003516:	230a      	movle	r3, #10
 8003518:	fb03 2909 	mlale	r9, r3, r9, r2
 800351c:	e7e1      	b.n	80034e2 <_strtod_l+0x242>
 800351e:	2300      	movs	r3, #0
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	2301      	movs	r3, #1
 8003524:	e77c      	b.n	8003420 <_strtod_l+0x180>
 8003526:	f04f 0c00 	mov.w	ip, #0
 800352a:	f108 0202 	add.w	r2, r8, #2
 800352e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003530:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003534:	e785      	b.n	8003442 <_strtod_l+0x1a2>
 8003536:	f04f 0c01 	mov.w	ip, #1
 800353a:	e7f6      	b.n	800352a <_strtod_l+0x28a>
 800353c:	08007a30 	.word	0x08007a30
 8003540:	080077e8 	.word	0x080077e8
 8003544:	7ff00000 	.word	0x7ff00000
 8003548:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800354a:	1c51      	adds	r1, r2, #1
 800354c:	9117      	str	r1, [sp, #92]	; 0x5c
 800354e:	7852      	ldrb	r2, [r2, #1]
 8003550:	2a30      	cmp	r2, #48	; 0x30
 8003552:	d0f9      	beq.n	8003548 <_strtod_l+0x2a8>
 8003554:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003558:	2908      	cmp	r1, #8
 800355a:	f63f af79 	bhi.w	8003450 <_strtod_l+0x1b0>
 800355e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003564:	9206      	str	r2, [sp, #24]
 8003566:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003568:	1c51      	adds	r1, r2, #1
 800356a:	9117      	str	r1, [sp, #92]	; 0x5c
 800356c:	7852      	ldrb	r2, [r2, #1]
 800356e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003572:	2e09      	cmp	r6, #9
 8003574:	d937      	bls.n	80035e6 <_strtod_l+0x346>
 8003576:	9e06      	ldr	r6, [sp, #24]
 8003578:	1b89      	subs	r1, r1, r6
 800357a:	2908      	cmp	r1, #8
 800357c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003580:	dc02      	bgt.n	8003588 <_strtod_l+0x2e8>
 8003582:	4576      	cmp	r6, lr
 8003584:	bfa8      	it	ge
 8003586:	4676      	movge	r6, lr
 8003588:	f1bc 0f00 	cmp.w	ip, #0
 800358c:	d000      	beq.n	8003590 <_strtod_l+0x2f0>
 800358e:	4276      	negs	r6, r6
 8003590:	2d00      	cmp	r5, #0
 8003592:	d14d      	bne.n	8003630 <_strtod_l+0x390>
 8003594:	9904      	ldr	r1, [sp, #16]
 8003596:	4301      	orrs	r1, r0
 8003598:	f47f aec6 	bne.w	8003328 <_strtod_l+0x88>
 800359c:	2b00      	cmp	r3, #0
 800359e:	f47f aee1 	bne.w	8003364 <_strtod_l+0xc4>
 80035a2:	2a69      	cmp	r2, #105	; 0x69
 80035a4:	d027      	beq.n	80035f6 <_strtod_l+0x356>
 80035a6:	dc24      	bgt.n	80035f2 <_strtod_l+0x352>
 80035a8:	2a49      	cmp	r2, #73	; 0x49
 80035aa:	d024      	beq.n	80035f6 <_strtod_l+0x356>
 80035ac:	2a4e      	cmp	r2, #78	; 0x4e
 80035ae:	f47f aed9 	bne.w	8003364 <_strtod_l+0xc4>
 80035b2:	499f      	ldr	r1, [pc, #636]	; (8003830 <_strtod_l+0x590>)
 80035b4:	a817      	add	r0, sp, #92	; 0x5c
 80035b6:	f001 fe61 	bl	800527c <__match>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	f43f aed2 	beq.w	8003364 <_strtod_l+0xc4>
 80035c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b28      	cmp	r3, #40	; 0x28
 80035c6:	d12d      	bne.n	8003624 <_strtod_l+0x384>
 80035c8:	499a      	ldr	r1, [pc, #616]	; (8003834 <_strtod_l+0x594>)
 80035ca:	aa1a      	add	r2, sp, #104	; 0x68
 80035cc:	a817      	add	r0, sp, #92	; 0x5c
 80035ce:	f001 fe69 	bl	80052a4 <__hexnan>
 80035d2:	2805      	cmp	r0, #5
 80035d4:	d126      	bne.n	8003624 <_strtod_l+0x384>
 80035d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80035d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80035dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80035e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80035e4:	e6a0      	b.n	8003328 <_strtod_l+0x88>
 80035e6:	210a      	movs	r1, #10
 80035e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80035ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80035f0:	e7b9      	b.n	8003566 <_strtod_l+0x2c6>
 80035f2:	2a6e      	cmp	r2, #110	; 0x6e
 80035f4:	e7db      	b.n	80035ae <_strtod_l+0x30e>
 80035f6:	4990      	ldr	r1, [pc, #576]	; (8003838 <_strtod_l+0x598>)
 80035f8:	a817      	add	r0, sp, #92	; 0x5c
 80035fa:	f001 fe3f 	bl	800527c <__match>
 80035fe:	2800      	cmp	r0, #0
 8003600:	f43f aeb0 	beq.w	8003364 <_strtod_l+0xc4>
 8003604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003606:	498d      	ldr	r1, [pc, #564]	; (800383c <_strtod_l+0x59c>)
 8003608:	3b01      	subs	r3, #1
 800360a:	a817      	add	r0, sp, #92	; 0x5c
 800360c:	9317      	str	r3, [sp, #92]	; 0x5c
 800360e:	f001 fe35 	bl	800527c <__match>
 8003612:	b910      	cbnz	r0, 800361a <_strtod_l+0x37a>
 8003614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003616:	3301      	adds	r3, #1
 8003618:	9317      	str	r3, [sp, #92]	; 0x5c
 800361a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800384c <_strtod_l+0x5ac>
 800361e:	f04f 0a00 	mov.w	sl, #0
 8003622:	e681      	b.n	8003328 <_strtod_l+0x88>
 8003624:	4886      	ldr	r0, [pc, #536]	; (8003840 <_strtod_l+0x5a0>)
 8003626:	f003 f963 	bl	80068f0 <nan>
 800362a:	ec5b ab10 	vmov	sl, fp, d0
 800362e:	e67b      	b.n	8003328 <_strtod_l+0x88>
 8003630:	9b05      	ldr	r3, [sp, #20]
 8003632:	9807      	ldr	r0, [sp, #28]
 8003634:	1af3      	subs	r3, r6, r3
 8003636:	2f00      	cmp	r7, #0
 8003638:	bf08      	it	eq
 800363a:	462f      	moveq	r7, r5
 800363c:	2d10      	cmp	r5, #16
 800363e:	9306      	str	r3, [sp, #24]
 8003640:	46a8      	mov	r8, r5
 8003642:	bfa8      	it	ge
 8003644:	f04f 0810 	movge.w	r8, #16
 8003648:	f7fc ff74 	bl	8000534 <__aeabi_ui2d>
 800364c:	2d09      	cmp	r5, #9
 800364e:	4682      	mov	sl, r0
 8003650:	468b      	mov	fp, r1
 8003652:	dd13      	ble.n	800367c <_strtod_l+0x3dc>
 8003654:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <_strtod_l+0x5a4>)
 8003656:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800365a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800365e:	f7fc ffe3 	bl	8000628 <__aeabi_dmul>
 8003662:	4682      	mov	sl, r0
 8003664:	4648      	mov	r0, r9
 8003666:	468b      	mov	fp, r1
 8003668:	f7fc ff64 	bl	8000534 <__aeabi_ui2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4650      	mov	r0, sl
 8003672:	4659      	mov	r1, fp
 8003674:	f7fc fe22 	bl	80002bc <__adddf3>
 8003678:	4682      	mov	sl, r0
 800367a:	468b      	mov	fp, r1
 800367c:	2d0f      	cmp	r5, #15
 800367e:	dc38      	bgt.n	80036f2 <_strtod_l+0x452>
 8003680:	9b06      	ldr	r3, [sp, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f43f ae50 	beq.w	8003328 <_strtod_l+0x88>
 8003688:	dd24      	ble.n	80036d4 <_strtod_l+0x434>
 800368a:	2b16      	cmp	r3, #22
 800368c:	dc0b      	bgt.n	80036a6 <_strtod_l+0x406>
 800368e:	496d      	ldr	r1, [pc, #436]	; (8003844 <_strtod_l+0x5a4>)
 8003690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003698:	4652      	mov	r2, sl
 800369a:	465b      	mov	r3, fp
 800369c:	f7fc ffc4 	bl	8000628 <__aeabi_dmul>
 80036a0:	4682      	mov	sl, r0
 80036a2:	468b      	mov	fp, r1
 80036a4:	e640      	b.n	8003328 <_strtod_l+0x88>
 80036a6:	9a06      	ldr	r2, [sp, #24]
 80036a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80036ac:	4293      	cmp	r3, r2
 80036ae:	db20      	blt.n	80036f2 <_strtod_l+0x452>
 80036b0:	4c64      	ldr	r4, [pc, #400]	; (8003844 <_strtod_l+0x5a4>)
 80036b2:	f1c5 050f 	rsb	r5, r5, #15
 80036b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80036ba:	4652      	mov	r2, sl
 80036bc:	465b      	mov	r3, fp
 80036be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036c2:	f7fc ffb1 	bl	8000628 <__aeabi_dmul>
 80036c6:	9b06      	ldr	r3, [sp, #24]
 80036c8:	1b5d      	subs	r5, r3, r5
 80036ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80036ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80036d2:	e7e3      	b.n	800369c <_strtod_l+0x3fc>
 80036d4:	9b06      	ldr	r3, [sp, #24]
 80036d6:	3316      	adds	r3, #22
 80036d8:	db0b      	blt.n	80036f2 <_strtod_l+0x452>
 80036da:	9b05      	ldr	r3, [sp, #20]
 80036dc:	1b9e      	subs	r6, r3, r6
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <_strtod_l+0x5a4>)
 80036e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80036e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80036e8:	4650      	mov	r0, sl
 80036ea:	4659      	mov	r1, fp
 80036ec:	f7fd f8c6 	bl	800087c <__aeabi_ddiv>
 80036f0:	e7d6      	b.n	80036a0 <_strtod_l+0x400>
 80036f2:	9b06      	ldr	r3, [sp, #24]
 80036f4:	eba5 0808 	sub.w	r8, r5, r8
 80036f8:	4498      	add	r8, r3
 80036fa:	f1b8 0f00 	cmp.w	r8, #0
 80036fe:	dd74      	ble.n	80037ea <_strtod_l+0x54a>
 8003700:	f018 030f 	ands.w	r3, r8, #15
 8003704:	d00a      	beq.n	800371c <_strtod_l+0x47c>
 8003706:	494f      	ldr	r1, [pc, #316]	; (8003844 <_strtod_l+0x5a4>)
 8003708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800370c:	4652      	mov	r2, sl
 800370e:	465b      	mov	r3, fp
 8003710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003714:	f7fc ff88 	bl	8000628 <__aeabi_dmul>
 8003718:	4682      	mov	sl, r0
 800371a:	468b      	mov	fp, r1
 800371c:	f038 080f 	bics.w	r8, r8, #15
 8003720:	d04f      	beq.n	80037c2 <_strtod_l+0x522>
 8003722:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003726:	dd22      	ble.n	800376e <_strtod_l+0x4ce>
 8003728:	2500      	movs	r5, #0
 800372a:	462e      	mov	r6, r5
 800372c:	9507      	str	r5, [sp, #28]
 800372e:	9505      	str	r5, [sp, #20]
 8003730:	2322      	movs	r3, #34	; 0x22
 8003732:	f8df b118 	ldr.w	fp, [pc, #280]	; 800384c <_strtod_l+0x5ac>
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	f04f 0a00 	mov.w	sl, #0
 800373c:	9b07      	ldr	r3, [sp, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f43f adf2 	beq.w	8003328 <_strtod_l+0x88>
 8003744:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003746:	4620      	mov	r0, r4
 8003748:	f001 fec6 	bl	80054d8 <_Bfree>
 800374c:	9905      	ldr	r1, [sp, #20]
 800374e:	4620      	mov	r0, r4
 8003750:	f001 fec2 	bl	80054d8 <_Bfree>
 8003754:	4631      	mov	r1, r6
 8003756:	4620      	mov	r0, r4
 8003758:	f001 febe 	bl	80054d8 <_Bfree>
 800375c:	9907      	ldr	r1, [sp, #28]
 800375e:	4620      	mov	r0, r4
 8003760:	f001 feba 	bl	80054d8 <_Bfree>
 8003764:	4629      	mov	r1, r5
 8003766:	4620      	mov	r0, r4
 8003768:	f001 feb6 	bl	80054d8 <_Bfree>
 800376c:	e5dc      	b.n	8003328 <_strtod_l+0x88>
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <_strtod_l+0x5a8>)
 8003770:	9304      	str	r3, [sp, #16]
 8003772:	2300      	movs	r3, #0
 8003774:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003778:	4650      	mov	r0, sl
 800377a:	4659      	mov	r1, fp
 800377c:	4699      	mov	r9, r3
 800377e:	f1b8 0f01 	cmp.w	r8, #1
 8003782:	dc21      	bgt.n	80037c8 <_strtod_l+0x528>
 8003784:	b10b      	cbz	r3, 800378a <_strtod_l+0x4ea>
 8003786:	4682      	mov	sl, r0
 8003788:	468b      	mov	fp, r1
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <_strtod_l+0x5a8>)
 800378c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003790:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003794:	4652      	mov	r2, sl
 8003796:	465b      	mov	r3, fp
 8003798:	e9d9 0100 	ldrd	r0, r1, [r9]
 800379c:	f7fc ff44 	bl	8000628 <__aeabi_dmul>
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <_strtod_l+0x5ac>)
 80037a2:	460a      	mov	r2, r1
 80037a4:	400b      	ands	r3, r1
 80037a6:	492a      	ldr	r1, [pc, #168]	; (8003850 <_strtod_l+0x5b0>)
 80037a8:	428b      	cmp	r3, r1
 80037aa:	4682      	mov	sl, r0
 80037ac:	d8bc      	bhi.n	8003728 <_strtod_l+0x488>
 80037ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80037b2:	428b      	cmp	r3, r1
 80037b4:	bf86      	itte	hi
 80037b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003854 <_strtod_l+0x5b4>
 80037ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80037be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80037c2:	2300      	movs	r3, #0
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	e084      	b.n	80038d2 <_strtod_l+0x632>
 80037c8:	f018 0f01 	tst.w	r8, #1
 80037cc:	d005      	beq.n	80037da <_strtod_l+0x53a>
 80037ce:	9b04      	ldr	r3, [sp, #16]
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc ff28 	bl	8000628 <__aeabi_dmul>
 80037d8:	2301      	movs	r3, #1
 80037da:	9a04      	ldr	r2, [sp, #16]
 80037dc:	3208      	adds	r2, #8
 80037de:	f109 0901 	add.w	r9, r9, #1
 80037e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80037e6:	9204      	str	r2, [sp, #16]
 80037e8:	e7c9      	b.n	800377e <_strtod_l+0x4de>
 80037ea:	d0ea      	beq.n	80037c2 <_strtod_l+0x522>
 80037ec:	f1c8 0800 	rsb	r8, r8, #0
 80037f0:	f018 020f 	ands.w	r2, r8, #15
 80037f4:	d00a      	beq.n	800380c <_strtod_l+0x56c>
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <_strtod_l+0x5a4>)
 80037f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037fc:	4650      	mov	r0, sl
 80037fe:	4659      	mov	r1, fp
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fd f83a 	bl	800087c <__aeabi_ddiv>
 8003808:	4682      	mov	sl, r0
 800380a:	468b      	mov	fp, r1
 800380c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003810:	d0d7      	beq.n	80037c2 <_strtod_l+0x522>
 8003812:	f1b8 0f1f 	cmp.w	r8, #31
 8003816:	dd1f      	ble.n	8003858 <_strtod_l+0x5b8>
 8003818:	2500      	movs	r5, #0
 800381a:	462e      	mov	r6, r5
 800381c:	9507      	str	r5, [sp, #28]
 800381e:	9505      	str	r5, [sp, #20]
 8003820:	2322      	movs	r3, #34	; 0x22
 8003822:	f04f 0a00 	mov.w	sl, #0
 8003826:	f04f 0b00 	mov.w	fp, #0
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	e786      	b.n	800373c <_strtod_l+0x49c>
 800382e:	bf00      	nop
 8003830:	080077bd 	.word	0x080077bd
 8003834:	080077fc 	.word	0x080077fc
 8003838:	080077b5 	.word	0x080077b5
 800383c:	0800793c 	.word	0x0800793c
 8003840:	08007c03 	.word	0x08007c03
 8003844:	08007ac8 	.word	0x08007ac8
 8003848:	08007aa0 	.word	0x08007aa0
 800384c:	7ff00000 	.word	0x7ff00000
 8003850:	7ca00000 	.word	0x7ca00000
 8003854:	7fefffff 	.word	0x7fefffff
 8003858:	f018 0310 	ands.w	r3, r8, #16
 800385c:	bf18      	it	ne
 800385e:	236a      	movne	r3, #106	; 0x6a
 8003860:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8003c10 <_strtod_l+0x970>
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	4650      	mov	r0, sl
 8003868:	4659      	mov	r1, fp
 800386a:	2300      	movs	r3, #0
 800386c:	f018 0f01 	tst.w	r8, #1
 8003870:	d004      	beq.n	800387c <_strtod_l+0x5dc>
 8003872:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003876:	f7fc fed7 	bl	8000628 <__aeabi_dmul>
 800387a:	2301      	movs	r3, #1
 800387c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003880:	f109 0908 	add.w	r9, r9, #8
 8003884:	d1f2      	bne.n	800386c <_strtod_l+0x5cc>
 8003886:	b10b      	cbz	r3, 800388c <_strtod_l+0x5ec>
 8003888:	4682      	mov	sl, r0
 800388a:	468b      	mov	fp, r1
 800388c:	9b04      	ldr	r3, [sp, #16]
 800388e:	b1c3      	cbz	r3, 80038c2 <_strtod_l+0x622>
 8003890:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003894:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003898:	2b00      	cmp	r3, #0
 800389a:	4659      	mov	r1, fp
 800389c:	dd11      	ble.n	80038c2 <_strtod_l+0x622>
 800389e:	2b1f      	cmp	r3, #31
 80038a0:	f340 8124 	ble.w	8003aec <_strtod_l+0x84c>
 80038a4:	2b34      	cmp	r3, #52	; 0x34
 80038a6:	bfde      	ittt	le
 80038a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80038ac:	f04f 33ff 	movle.w	r3, #4294967295
 80038b0:	fa03 f202 	lslle.w	r2, r3, r2
 80038b4:	f04f 0a00 	mov.w	sl, #0
 80038b8:	bfcc      	ite	gt
 80038ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80038be:	ea02 0b01 	andle.w	fp, r2, r1
 80038c2:	2200      	movs	r2, #0
 80038c4:	2300      	movs	r3, #0
 80038c6:	4650      	mov	r0, sl
 80038c8:	4659      	mov	r1, fp
 80038ca:	f7fd f915 	bl	8000af8 <__aeabi_dcmpeq>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1a2      	bne.n	8003818 <_strtod_l+0x578>
 80038d2:	9b07      	ldr	r3, [sp, #28]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	9908      	ldr	r1, [sp, #32]
 80038d8:	462b      	mov	r3, r5
 80038da:	463a      	mov	r2, r7
 80038dc:	4620      	mov	r0, r4
 80038de:	f001 fe63 	bl	80055a8 <__s2b>
 80038e2:	9007      	str	r0, [sp, #28]
 80038e4:	2800      	cmp	r0, #0
 80038e6:	f43f af1f 	beq.w	8003728 <_strtod_l+0x488>
 80038ea:	9b05      	ldr	r3, [sp, #20]
 80038ec:	1b9e      	subs	r6, r3, r6
 80038ee:	9b06      	ldr	r3, [sp, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bfb4      	ite	lt
 80038f4:	4633      	movlt	r3, r6
 80038f6:	2300      	movge	r3, #0
 80038f8:	930c      	str	r3, [sp, #48]	; 0x30
 80038fa:	9b06      	ldr	r3, [sp, #24]
 80038fc:	2500      	movs	r5, #0
 80038fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003902:	9312      	str	r3, [sp, #72]	; 0x48
 8003904:	462e      	mov	r6, r5
 8003906:	9b07      	ldr	r3, [sp, #28]
 8003908:	4620      	mov	r0, r4
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	f001 fda4 	bl	8005458 <_Balloc>
 8003910:	9005      	str	r0, [sp, #20]
 8003912:	2800      	cmp	r0, #0
 8003914:	f43f af0c 	beq.w	8003730 <_strtod_l+0x490>
 8003918:	9b07      	ldr	r3, [sp, #28]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	3202      	adds	r2, #2
 800391e:	f103 010c 	add.w	r1, r3, #12
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	300c      	adds	r0, #12
 8003926:	f001 fd89 	bl	800543c <memcpy>
 800392a:	ec4b ab10 	vmov	d0, sl, fp
 800392e:	aa1a      	add	r2, sp, #104	; 0x68
 8003930:	a919      	add	r1, sp, #100	; 0x64
 8003932:	4620      	mov	r0, r4
 8003934:	f002 f97e 	bl	8005c34 <__d2b>
 8003938:	ec4b ab18 	vmov	d8, sl, fp
 800393c:	9018      	str	r0, [sp, #96]	; 0x60
 800393e:	2800      	cmp	r0, #0
 8003940:	f43f aef6 	beq.w	8003730 <_strtod_l+0x490>
 8003944:	2101      	movs	r1, #1
 8003946:	4620      	mov	r0, r4
 8003948:	f001 fec8 	bl	80056dc <__i2b>
 800394c:	4606      	mov	r6, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	f43f aeee 	beq.w	8003730 <_strtod_l+0x490>
 8003954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003956:	9904      	ldr	r1, [sp, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfab      	itete	ge
 800395c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800395e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003960:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003962:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8003966:	bfac      	ite	ge
 8003968:	eb03 0902 	addge.w	r9, r3, r2
 800396c:	1ad7      	sublt	r7, r2, r3
 800396e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003970:	eba3 0801 	sub.w	r8, r3, r1
 8003974:	4490      	add	r8, r2
 8003976:	4ba1      	ldr	r3, [pc, #644]	; (8003bfc <_strtod_l+0x95c>)
 8003978:	f108 38ff 	add.w	r8, r8, #4294967295
 800397c:	4598      	cmp	r8, r3
 800397e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003982:	f280 80c7 	bge.w	8003b14 <_strtod_l+0x874>
 8003986:	eba3 0308 	sub.w	r3, r3, r8
 800398a:	2b1f      	cmp	r3, #31
 800398c:	eba2 0203 	sub.w	r2, r2, r3
 8003990:	f04f 0101 	mov.w	r1, #1
 8003994:	f300 80b1 	bgt.w	8003afa <_strtod_l+0x85a>
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	930d      	str	r3, [sp, #52]	; 0x34
 800399e:	2300      	movs	r3, #0
 80039a0:	9308      	str	r3, [sp, #32]
 80039a2:	eb09 0802 	add.w	r8, r9, r2
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	45c1      	cmp	r9, r8
 80039aa:	4417      	add	r7, r2
 80039ac:	441f      	add	r7, r3
 80039ae:	464b      	mov	r3, r9
 80039b0:	bfa8      	it	ge
 80039b2:	4643      	movge	r3, r8
 80039b4:	42bb      	cmp	r3, r7
 80039b6:	bfa8      	it	ge
 80039b8:	463b      	movge	r3, r7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfc2      	ittt	gt
 80039be:	eba8 0803 	subgt.w	r8, r8, r3
 80039c2:	1aff      	subgt	r7, r7, r3
 80039c4:	eba9 0903 	subgt.w	r9, r9, r3
 80039c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	dd17      	ble.n	80039fe <_strtod_l+0x75e>
 80039ce:	4631      	mov	r1, r6
 80039d0:	461a      	mov	r2, r3
 80039d2:	4620      	mov	r0, r4
 80039d4:	f001 ff42 	bl	800585c <__pow5mult>
 80039d8:	4606      	mov	r6, r0
 80039da:	2800      	cmp	r0, #0
 80039dc:	f43f aea8 	beq.w	8003730 <_strtod_l+0x490>
 80039e0:	4601      	mov	r1, r0
 80039e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80039e4:	4620      	mov	r0, r4
 80039e6:	f001 fe8f 	bl	8005708 <__multiply>
 80039ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80039ec:	2800      	cmp	r0, #0
 80039ee:	f43f ae9f 	beq.w	8003730 <_strtod_l+0x490>
 80039f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80039f4:	4620      	mov	r0, r4
 80039f6:	f001 fd6f 	bl	80054d8 <_Bfree>
 80039fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039fc:	9318      	str	r3, [sp, #96]	; 0x60
 80039fe:	f1b8 0f00 	cmp.w	r8, #0
 8003a02:	f300 808c 	bgt.w	8003b1e <_strtod_l+0x87e>
 8003a06:	9b06      	ldr	r3, [sp, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dd08      	ble.n	8003a1e <_strtod_l+0x77e>
 8003a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a0e:	9905      	ldr	r1, [sp, #20]
 8003a10:	4620      	mov	r0, r4
 8003a12:	f001 ff23 	bl	800585c <__pow5mult>
 8003a16:	9005      	str	r0, [sp, #20]
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f43f ae89 	beq.w	8003730 <_strtod_l+0x490>
 8003a1e:	2f00      	cmp	r7, #0
 8003a20:	dd08      	ble.n	8003a34 <_strtod_l+0x794>
 8003a22:	9905      	ldr	r1, [sp, #20]
 8003a24:	463a      	mov	r2, r7
 8003a26:	4620      	mov	r0, r4
 8003a28:	f001 ff72 	bl	8005910 <__lshift>
 8003a2c:	9005      	str	r0, [sp, #20]
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	f43f ae7e 	beq.w	8003730 <_strtod_l+0x490>
 8003a34:	f1b9 0f00 	cmp.w	r9, #0
 8003a38:	dd08      	ble.n	8003a4c <_strtod_l+0x7ac>
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f001 ff66 	bl	8005910 <__lshift>
 8003a44:	4606      	mov	r6, r0
 8003a46:	2800      	cmp	r0, #0
 8003a48:	f43f ae72 	beq.w	8003730 <_strtod_l+0x490>
 8003a4c:	9a05      	ldr	r2, [sp, #20]
 8003a4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003a50:	4620      	mov	r0, r4
 8003a52:	f001 ffe9 	bl	8005a28 <__mdiff>
 8003a56:	4605      	mov	r5, r0
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f43f ae69 	beq.w	8003730 <_strtod_l+0x490>
 8003a5e:	68c3      	ldr	r3, [r0, #12]
 8003a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a62:	2300      	movs	r3, #0
 8003a64:	60c3      	str	r3, [r0, #12]
 8003a66:	4631      	mov	r1, r6
 8003a68:	f001 ffc2 	bl	80059f0 <__mcmp>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	da60      	bge.n	8003b32 <_strtod_l+0x892>
 8003a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a72:	ea53 030a 	orrs.w	r3, r3, sl
 8003a76:	f040 8082 	bne.w	8003b7e <_strtod_l+0x8de>
 8003a7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d17d      	bne.n	8003b7e <_strtod_l+0x8de>
 8003a82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003a86:	0d1b      	lsrs	r3, r3, #20
 8003a88:	051b      	lsls	r3, r3, #20
 8003a8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003a8e:	d976      	bls.n	8003b7e <_strtod_l+0x8de>
 8003a90:	696b      	ldr	r3, [r5, #20]
 8003a92:	b913      	cbnz	r3, 8003a9a <_strtod_l+0x7fa>
 8003a94:	692b      	ldr	r3, [r5, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	dd71      	ble.n	8003b7e <_strtod_l+0x8de>
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f001 ff36 	bl	8005910 <__lshift>
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	f001 ffa2 	bl	80059f0 <__mcmp>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	dd66      	ble.n	8003b7e <_strtod_l+0x8de>
 8003ab0:	9904      	ldr	r1, [sp, #16]
 8003ab2:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <_strtod_l+0x960>)
 8003ab4:	465b      	mov	r3, fp
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	f000 8081 	beq.w	8003bbe <_strtod_l+0x91e>
 8003abc:	ea02 010b 	and.w	r1, r2, fp
 8003ac0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003ac4:	dc7b      	bgt.n	8003bbe <_strtod_l+0x91e>
 8003ac6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003aca:	f77f aea9 	ble.w	8003820 <_strtod_l+0x580>
 8003ace:	4b4d      	ldr	r3, [pc, #308]	; (8003c04 <_strtod_l+0x964>)
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	4659      	mov	r1, fp
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f7fc fda7 	bl	8000628 <__aeabi_dmul>
 8003ada:	460b      	mov	r3, r1
 8003adc:	4303      	orrs	r3, r0
 8003ade:	bf08      	it	eq
 8003ae0:	2322      	moveq	r3, #34	; 0x22
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	468b      	mov	fp, r1
 8003ae6:	bf08      	it	eq
 8003ae8:	6023      	streq	r3, [r4, #0]
 8003aea:	e62b      	b.n	8003744 <_strtod_l+0x4a4>
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	ea03 0a0a 	and.w	sl, r3, sl
 8003af8:	e6e3      	b.n	80038c2 <_strtod_l+0x622>
 8003afa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003afe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003b02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003b06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003b0a:	fa01 f308 	lsl.w	r3, r1, r8
 8003b0e:	9308      	str	r3, [sp, #32]
 8003b10:	910d      	str	r1, [sp, #52]	; 0x34
 8003b12:	e746      	b.n	80039a2 <_strtod_l+0x702>
 8003b14:	2300      	movs	r3, #0
 8003b16:	9308      	str	r3, [sp, #32]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8003b1c:	e741      	b.n	80039a2 <_strtod_l+0x702>
 8003b1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003b20:	4642      	mov	r2, r8
 8003b22:	4620      	mov	r0, r4
 8003b24:	f001 fef4 	bl	8005910 <__lshift>
 8003b28:	9018      	str	r0, [sp, #96]	; 0x60
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f47f af6b 	bne.w	8003a06 <_strtod_l+0x766>
 8003b30:	e5fe      	b.n	8003730 <_strtod_l+0x490>
 8003b32:	465f      	mov	r7, fp
 8003b34:	d16e      	bne.n	8003c14 <_strtod_l+0x974>
 8003b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003b3c:	b342      	cbz	r2, 8003b90 <_strtod_l+0x8f0>
 8003b3e:	4a32      	ldr	r2, [pc, #200]	; (8003c08 <_strtod_l+0x968>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d128      	bne.n	8003b96 <_strtod_l+0x8f6>
 8003b44:	9b04      	ldr	r3, [sp, #16]
 8003b46:	4651      	mov	r1, sl
 8003b48:	b1eb      	cbz	r3, 8003b86 <_strtod_l+0x8e6>
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <_strtod_l+0x960>)
 8003b4c:	403b      	ands	r3, r7
 8003b4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	d819      	bhi.n	8003b8c <_strtod_l+0x8ec>
 8003b58:	0d1b      	lsrs	r3, r3, #20
 8003b5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d117      	bne.n	8003b96 <_strtod_l+0x8f6>
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <_strtod_l+0x96c>)
 8003b68:	429f      	cmp	r7, r3
 8003b6a:	d102      	bne.n	8003b72 <_strtod_l+0x8d2>
 8003b6c:	3101      	adds	r1, #1
 8003b6e:	f43f addf 	beq.w	8003730 <_strtod_l+0x490>
 8003b72:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <_strtod_l+0x960>)
 8003b74:	403b      	ands	r3, r7
 8003b76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003b7a:	f04f 0a00 	mov.w	sl, #0
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1a4      	bne.n	8003ace <_strtod_l+0x82e>
 8003b84:	e5de      	b.n	8003744 <_strtod_l+0x4a4>
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e7ea      	b.n	8003b62 <_strtod_l+0x8c2>
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	e7e8      	b.n	8003b62 <_strtod_l+0x8c2>
 8003b90:	ea53 030a 	orrs.w	r3, r3, sl
 8003b94:	d08c      	beq.n	8003ab0 <_strtod_l+0x810>
 8003b96:	9b08      	ldr	r3, [sp, #32]
 8003b98:	b1db      	cbz	r3, 8003bd2 <_strtod_l+0x932>
 8003b9a:	423b      	tst	r3, r7
 8003b9c:	d0ef      	beq.n	8003b7e <_strtod_l+0x8de>
 8003b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ba0:	9a04      	ldr	r2, [sp, #16]
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	b1c3      	cbz	r3, 8003bda <_strtod_l+0x93a>
 8003ba8:	f7ff fb5b 	bl	8003262 <sulp>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	ec51 0b18 	vmov	r0, r1, d8
 8003bb4:	f7fc fb82 	bl	80002bc <__adddf3>
 8003bb8:	4682      	mov	sl, r0
 8003bba:	468b      	mov	fp, r1
 8003bbc:	e7df      	b.n	8003b7e <_strtod_l+0x8de>
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003bc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003bc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003bcc:	f04f 3aff 	mov.w	sl, #4294967295
 8003bd0:	e7d5      	b.n	8003b7e <_strtod_l+0x8de>
 8003bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bd4:	ea13 0f0a 	tst.w	r3, sl
 8003bd8:	e7e0      	b.n	8003b9c <_strtod_l+0x8fc>
 8003bda:	f7ff fb42 	bl	8003262 <sulp>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	ec51 0b18 	vmov	r0, r1, d8
 8003be6:	f7fc fb67 	bl	80002b8 <__aeabi_dsub>
 8003bea:	2200      	movs	r2, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	4682      	mov	sl, r0
 8003bf0:	468b      	mov	fp, r1
 8003bf2:	f7fc ff81 	bl	8000af8 <__aeabi_dcmpeq>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d0c1      	beq.n	8003b7e <_strtod_l+0x8de>
 8003bfa:	e611      	b.n	8003820 <_strtod_l+0x580>
 8003bfc:	fffffc02 	.word	0xfffffc02
 8003c00:	7ff00000 	.word	0x7ff00000
 8003c04:	39500000 	.word	0x39500000
 8003c08:	000fffff 	.word	0x000fffff
 8003c0c:	7fefffff 	.word	0x7fefffff
 8003c10:	08007810 	.word	0x08007810
 8003c14:	4631      	mov	r1, r6
 8003c16:	4628      	mov	r0, r5
 8003c18:	f002 f868 	bl	8005cec <__ratio>
 8003c1c:	ec59 8b10 	vmov	r8, r9, d0
 8003c20:	ee10 0a10 	vmov	r0, s0
 8003c24:	2200      	movs	r2, #0
 8003c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	f7fc ff78 	bl	8000b20 <__aeabi_dcmple>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d07a      	beq.n	8003d2a <_strtod_l+0xa8a>
 8003c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04a      	beq.n	8003cd0 <_strtod_l+0xa30>
 8003c3a:	4b95      	ldr	r3, [pc, #596]	; (8003e90 <_strtod_l+0xbf0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8003e90 <_strtod_l+0xbf0>
 8003c46:	f04f 0800 	mov.w	r8, #0
 8003c4a:	4b92      	ldr	r3, [pc, #584]	; (8003e94 <_strtod_l+0xbf4>)
 8003c4c:	403b      	ands	r3, r7
 8003c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c52:	4b91      	ldr	r3, [pc, #580]	; (8003e98 <_strtod_l+0xbf8>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f040 80b0 	bne.w	8003dba <_strtod_l+0xb1a>
 8003c5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8003c62:	ec4b ab10 	vmov	d0, sl, fp
 8003c66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c6a:	f001 ff67 	bl	8005b3c <__ulp>
 8003c6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c72:	ec53 2b10 	vmov	r2, r3, d0
 8003c76:	f7fc fcd7 	bl	8000628 <__aeabi_dmul>
 8003c7a:	4652      	mov	r2, sl
 8003c7c:	465b      	mov	r3, fp
 8003c7e:	f7fc fb1d 	bl	80002bc <__adddf3>
 8003c82:	460b      	mov	r3, r1
 8003c84:	4983      	ldr	r1, [pc, #524]	; (8003e94 <_strtod_l+0xbf4>)
 8003c86:	4a85      	ldr	r2, [pc, #532]	; (8003e9c <_strtod_l+0xbfc>)
 8003c88:	4019      	ands	r1, r3
 8003c8a:	4291      	cmp	r1, r2
 8003c8c:	4682      	mov	sl, r0
 8003c8e:	d960      	bls.n	8003d52 <_strtod_l+0xab2>
 8003c90:	ee18 3a90 	vmov	r3, s17
 8003c94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d104      	bne.n	8003ca6 <_strtod_l+0xa06>
 8003c9c:	ee18 3a10 	vmov	r3, s16
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f43f ad45 	beq.w	8003730 <_strtod_l+0x490>
 8003ca6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003ea8 <_strtod_l+0xc08>
 8003caa:	f04f 3aff 	mov.w	sl, #4294967295
 8003cae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f001 fc11 	bl	80054d8 <_Bfree>
 8003cb6:	9905      	ldr	r1, [sp, #20]
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f001 fc0d 	bl	80054d8 <_Bfree>
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f001 fc09 	bl	80054d8 <_Bfree>
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f001 fc05 	bl	80054d8 <_Bfree>
 8003cce:	e61a      	b.n	8003906 <_strtod_l+0x666>
 8003cd0:	f1ba 0f00 	cmp.w	sl, #0
 8003cd4:	d11b      	bne.n	8003d0e <_strtod_l+0xa6e>
 8003cd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003cda:	b9f3      	cbnz	r3, 8003d1a <_strtod_l+0xa7a>
 8003cdc:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <_strtod_l+0xbf0>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	f7fc ff12 	bl	8000b0c <__aeabi_dcmplt>
 8003ce8:	b9d0      	cbnz	r0, 8003d20 <_strtod_l+0xa80>
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <_strtod_l+0xc00>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f7fc fc99 	bl	8000628 <__aeabi_dmul>
 8003cf6:	4680      	mov	r8, r0
 8003cf8:	4689      	mov	r9, r1
 8003cfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003cfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8003d02:	9315      	str	r3, [sp, #84]	; 0x54
 8003d04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003d08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d0c:	e79d      	b.n	8003c4a <_strtod_l+0x9aa>
 8003d0e:	f1ba 0f01 	cmp.w	sl, #1
 8003d12:	d102      	bne.n	8003d1a <_strtod_l+0xa7a>
 8003d14:	2f00      	cmp	r7, #0
 8003d16:	f43f ad83 	beq.w	8003820 <_strtod_l+0x580>
 8003d1a:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <_strtod_l+0xc04>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	e78e      	b.n	8003c3e <_strtod_l+0x99e>
 8003d20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003ea0 <_strtod_l+0xc00>
 8003d24:	f04f 0800 	mov.w	r8, #0
 8003d28:	e7e7      	b.n	8003cfa <_strtod_l+0xa5a>
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <_strtod_l+0xc00>)
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	4649      	mov	r1, r9
 8003d30:	2200      	movs	r2, #0
 8003d32:	f7fc fc79 	bl	8000628 <__aeabi_dmul>
 8003d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d38:	4680      	mov	r8, r0
 8003d3a:	4689      	mov	r9, r1
 8003d3c:	b933      	cbnz	r3, 8003d4c <_strtod_l+0xaac>
 8003d3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d42:	900e      	str	r0, [sp, #56]	; 0x38
 8003d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003d4a:	e7dd      	b.n	8003d08 <_strtod_l+0xa68>
 8003d4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8003d50:	e7f9      	b.n	8003d46 <_strtod_l+0xaa6>
 8003d52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8003d56:	9b04      	ldr	r3, [sp, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1a8      	bne.n	8003cae <_strtod_l+0xa0e>
 8003d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d62:	0d1b      	lsrs	r3, r3, #20
 8003d64:	051b      	lsls	r3, r3, #20
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d1a1      	bne.n	8003cae <_strtod_l+0xa0e>
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	f7fc ffa3 	bl	8000cb8 <__aeabi_d2lz>
 8003d72:	f7fc fc2b 	bl	80005cc <__aeabi_l2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	f7fc fa9b 	bl	80002b8 <__aeabi_dsub>
 8003d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003d88:	ea43 030a 	orr.w	r3, r3, sl
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	4680      	mov	r8, r0
 8003d90:	4689      	mov	r9, r1
 8003d92:	d055      	beq.n	8003e40 <_strtod_l+0xba0>
 8003d94:	a336      	add	r3, pc, #216	; (adr r3, 8003e70 <_strtod_l+0xbd0>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc feb7 	bl	8000b0c <__aeabi_dcmplt>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f47f acd0 	bne.w	8003744 <_strtod_l+0x4a4>
 8003da4:	a334      	add	r3, pc, #208	; (adr r3, 8003e78 <_strtod_l+0xbd8>)
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	4640      	mov	r0, r8
 8003dac:	4649      	mov	r1, r9
 8003dae:	f7fc fecb 	bl	8000b48 <__aeabi_dcmpgt>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f43f af7b 	beq.w	8003cae <_strtod_l+0xa0e>
 8003db8:	e4c4      	b.n	8003744 <_strtod_l+0x4a4>
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	b333      	cbz	r3, 8003e0c <_strtod_l+0xb6c>
 8003dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003dc4:	d822      	bhi.n	8003e0c <_strtod_l+0xb6c>
 8003dc6:	a32e      	add	r3, pc, #184	; (adr r3, 8003e80 <_strtod_l+0xbe0>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	4640      	mov	r0, r8
 8003dce:	4649      	mov	r1, r9
 8003dd0:	f7fc fea6 	bl	8000b20 <__aeabi_dcmple>
 8003dd4:	b1a0      	cbz	r0, 8003e00 <_strtod_l+0xb60>
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	f7fc fefd 	bl	8000bd8 <__aeabi_d2uiz>
 8003dde:	2801      	cmp	r0, #1
 8003de0:	bf38      	it	cc
 8003de2:	2001      	movcc	r0, #1
 8003de4:	f7fc fba6 	bl	8000534 <__aeabi_ui2d>
 8003de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dea:	4680      	mov	r8, r0
 8003dec:	4689      	mov	r9, r1
 8003dee:	bb23      	cbnz	r3, 8003e3a <_strtod_l+0xb9a>
 8003df0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003df4:	9010      	str	r0, [sp, #64]	; 0x40
 8003df6:	9311      	str	r3, [sp, #68]	; 0x44
 8003df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e10:	eeb0 0a48 	vmov.f32	s0, s16
 8003e14:	eef0 0a68 	vmov.f32	s1, s17
 8003e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e1c:	f001 fe8e 	bl	8005b3c <__ulp>
 8003e20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e24:	ec53 2b10 	vmov	r2, r3, d0
 8003e28:	f7fc fbfe 	bl	8000628 <__aeabi_dmul>
 8003e2c:	ec53 2b18 	vmov	r2, r3, d8
 8003e30:	f7fc fa44 	bl	80002bc <__adddf3>
 8003e34:	4682      	mov	sl, r0
 8003e36:	468b      	mov	fp, r1
 8003e38:	e78d      	b.n	8003d56 <_strtod_l+0xab6>
 8003e3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8003e3e:	e7db      	b.n	8003df8 <_strtod_l+0xb58>
 8003e40:	a311      	add	r3, pc, #68	; (adr r3, 8003e88 <_strtod_l+0xbe8>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc fe61 	bl	8000b0c <__aeabi_dcmplt>
 8003e4a:	e7b2      	b.n	8003db2 <_strtod_l+0xb12>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	f7ff ba6b 	b.w	8003330 <_strtod_l+0x90>
 8003e5a:	2a65      	cmp	r2, #101	; 0x65
 8003e5c:	f43f ab5f 	beq.w	800351e <_strtod_l+0x27e>
 8003e60:	2a45      	cmp	r2, #69	; 0x45
 8003e62:	f43f ab5c 	beq.w	800351e <_strtod_l+0x27e>
 8003e66:	2301      	movs	r3, #1
 8003e68:	f7ff bb94 	b.w	8003594 <_strtod_l+0x2f4>
 8003e6c:	f3af 8000 	nop.w
 8003e70:	94a03595 	.word	0x94a03595
 8003e74:	3fdfffff 	.word	0x3fdfffff
 8003e78:	35afe535 	.word	0x35afe535
 8003e7c:	3fe00000 	.word	0x3fe00000
 8003e80:	ffc00000 	.word	0xffc00000
 8003e84:	41dfffff 	.word	0x41dfffff
 8003e88:	94a03595 	.word	0x94a03595
 8003e8c:	3fcfffff 	.word	0x3fcfffff
 8003e90:	3ff00000 	.word	0x3ff00000
 8003e94:	7ff00000 	.word	0x7ff00000
 8003e98:	7fe00000 	.word	0x7fe00000
 8003e9c:	7c9fffff 	.word	0x7c9fffff
 8003ea0:	3fe00000 	.word	0x3fe00000
 8003ea4:	bff00000 	.word	0xbff00000
 8003ea8:	7fefffff 	.word	0x7fefffff

08003eac <_strtod_r>:
 8003eac:	4b01      	ldr	r3, [pc, #4]	; (8003eb4 <_strtod_r+0x8>)
 8003eae:	f7ff b9f7 	b.w	80032a0 <_strtod_l>
 8003eb2:	bf00      	nop
 8003eb4:	20000078 	.word	0x20000078

08003eb8 <_strtol_l.constprop.0>:
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebe:	d001      	beq.n	8003ec4 <_strtol_l.constprop.0+0xc>
 8003ec0:	2b24      	cmp	r3, #36	; 0x24
 8003ec2:	d906      	bls.n	8003ed2 <_strtol_l.constprop.0+0x1a>
 8003ec4:	f7fe fa8a 	bl	80023dc <__errno>
 8003ec8:	2316      	movs	r3, #22
 8003eca:	6003      	str	r3, [r0, #0]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fb8 <_strtol_l.constprop.0+0x100>
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	462e      	mov	r6, r5
 8003eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ede:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003ee2:	f017 0708 	ands.w	r7, r7, #8
 8003ee6:	d1f7      	bne.n	8003ed8 <_strtol_l.constprop.0+0x20>
 8003ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8003eea:	d132      	bne.n	8003f52 <_strtol_l.constprop.0+0x9a>
 8003eec:	782c      	ldrb	r4, [r5, #0]
 8003eee:	2701      	movs	r7, #1
 8003ef0:	1cb5      	adds	r5, r6, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d05b      	beq.n	8003fae <_strtol_l.constprop.0+0xf6>
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d109      	bne.n	8003f0e <_strtol_l.constprop.0+0x56>
 8003efa:	2c30      	cmp	r4, #48	; 0x30
 8003efc:	d107      	bne.n	8003f0e <_strtol_l.constprop.0+0x56>
 8003efe:	782c      	ldrb	r4, [r5, #0]
 8003f00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f04:	2c58      	cmp	r4, #88	; 0x58
 8003f06:	d14d      	bne.n	8003fa4 <_strtol_l.constprop.0+0xec>
 8003f08:	786c      	ldrb	r4, [r5, #1]
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	3502      	adds	r5, #2
 8003f0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f12:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f16:	f04f 0c00 	mov.w	ip, #0
 8003f1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f1e:	4666      	mov	r6, ip
 8003f20:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f28:	f1be 0f09 	cmp.w	lr, #9
 8003f2c:	d816      	bhi.n	8003f5c <_strtol_l.constprop.0+0xa4>
 8003f2e:	4674      	mov	r4, lr
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	dd24      	ble.n	8003f7e <_strtol_l.constprop.0+0xc6>
 8003f34:	f1bc 0f00 	cmp.w	ip, #0
 8003f38:	db1e      	blt.n	8003f78 <_strtol_l.constprop.0+0xc0>
 8003f3a:	45b1      	cmp	r9, r6
 8003f3c:	d31c      	bcc.n	8003f78 <_strtol_l.constprop.0+0xc0>
 8003f3e:	d101      	bne.n	8003f44 <_strtol_l.constprop.0+0x8c>
 8003f40:	45a2      	cmp	sl, r4
 8003f42:	db19      	blt.n	8003f78 <_strtol_l.constprop.0+0xc0>
 8003f44:	fb06 4603 	mla	r6, r6, r3, r4
 8003f48:	f04f 0c01 	mov.w	ip, #1
 8003f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f50:	e7e8      	b.n	8003f24 <_strtol_l.constprop.0+0x6c>
 8003f52:	2c2b      	cmp	r4, #43	; 0x2b
 8003f54:	bf04      	itt	eq
 8003f56:	782c      	ldrbeq	r4, [r5, #0]
 8003f58:	1cb5      	addeq	r5, r6, #2
 8003f5a:	e7ca      	b.n	8003ef2 <_strtol_l.constprop.0+0x3a>
 8003f5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f60:	f1be 0f19 	cmp.w	lr, #25
 8003f64:	d801      	bhi.n	8003f6a <_strtol_l.constprop.0+0xb2>
 8003f66:	3c37      	subs	r4, #55	; 0x37
 8003f68:	e7e2      	b.n	8003f30 <_strtol_l.constprop.0+0x78>
 8003f6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003f6e:	f1be 0f19 	cmp.w	lr, #25
 8003f72:	d804      	bhi.n	8003f7e <_strtol_l.constprop.0+0xc6>
 8003f74:	3c57      	subs	r4, #87	; 0x57
 8003f76:	e7db      	b.n	8003f30 <_strtol_l.constprop.0+0x78>
 8003f78:	f04f 3cff 	mov.w	ip, #4294967295
 8003f7c:	e7e6      	b.n	8003f4c <_strtol_l.constprop.0+0x94>
 8003f7e:	f1bc 0f00 	cmp.w	ip, #0
 8003f82:	da05      	bge.n	8003f90 <_strtol_l.constprop.0+0xd8>
 8003f84:	2322      	movs	r3, #34	; 0x22
 8003f86:	6003      	str	r3, [r0, #0]
 8003f88:	4646      	mov	r6, r8
 8003f8a:	b942      	cbnz	r2, 8003f9e <_strtol_l.constprop.0+0xe6>
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	e79e      	b.n	8003ece <_strtol_l.constprop.0+0x16>
 8003f90:	b107      	cbz	r7, 8003f94 <_strtol_l.constprop.0+0xdc>
 8003f92:	4276      	negs	r6, r6
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d0f9      	beq.n	8003f8c <_strtol_l.constprop.0+0xd4>
 8003f98:	f1bc 0f00 	cmp.w	ip, #0
 8003f9c:	d000      	beq.n	8003fa0 <_strtol_l.constprop.0+0xe8>
 8003f9e:	1e69      	subs	r1, r5, #1
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	e7f3      	b.n	8003f8c <_strtol_l.constprop.0+0xd4>
 8003fa4:	2430      	movs	r4, #48	; 0x30
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1b1      	bne.n	8003f0e <_strtol_l.constprop.0+0x56>
 8003faa:	2308      	movs	r3, #8
 8003fac:	e7af      	b.n	8003f0e <_strtol_l.constprop.0+0x56>
 8003fae:	2c30      	cmp	r4, #48	; 0x30
 8003fb0:	d0a5      	beq.n	8003efe <_strtol_l.constprop.0+0x46>
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	e7ab      	b.n	8003f0e <_strtol_l.constprop.0+0x56>
 8003fb6:	bf00      	nop
 8003fb8:	08007839 	.word	0x08007839

08003fbc <_strtol_r>:
 8003fbc:	f7ff bf7c 	b.w	8003eb8 <_strtol_l.constprop.0>

08003fc0 <_write_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d07      	ldr	r5, [pc, #28]	; (8003fe0 <_write_r+0x20>)
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	4608      	mov	r0, r1
 8003fc8:	4611      	mov	r1, r2
 8003fca:	2200      	movs	r2, #0
 8003fcc:	602a      	str	r2, [r5, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f7fd f977 	bl	80012c2 <_write>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_write_r+0x1e>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_write_r+0x1e>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	2000063c 	.word	0x2000063c

08003fe4 <_close_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d06      	ldr	r5, [pc, #24]	; (8004000 <_close_r+0x1c>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	f7fd f983 	bl	80012fa <_close>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_close_r+0x1a>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_close_r+0x1a>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	2000063c 	.word	0x2000063c

08004004 <quorem>:
 8004004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	6903      	ldr	r3, [r0, #16]
 800400a:	690c      	ldr	r4, [r1, #16]
 800400c:	42a3      	cmp	r3, r4
 800400e:	4607      	mov	r7, r0
 8004010:	f2c0 8081 	blt.w	8004116 <quorem+0x112>
 8004014:	3c01      	subs	r4, #1
 8004016:	f101 0814 	add.w	r8, r1, #20
 800401a:	f100 0514 	add.w	r5, r0, #20
 800401e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800402c:	3301      	adds	r3, #1
 800402e:	429a      	cmp	r2, r3
 8004030:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004038:	fbb2 f6f3 	udiv	r6, r2, r3
 800403c:	d331      	bcc.n	80040a2 <quorem+0x9e>
 800403e:	f04f 0e00 	mov.w	lr, #0
 8004042:	4640      	mov	r0, r8
 8004044:	46ac      	mov	ip, r5
 8004046:	46f2      	mov	sl, lr
 8004048:	f850 2b04 	ldr.w	r2, [r0], #4
 800404c:	b293      	uxth	r3, r2
 800404e:	fb06 e303 	mla	r3, r6, r3, lr
 8004052:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004056:	b29b      	uxth	r3, r3
 8004058:	ebaa 0303 	sub.w	r3, sl, r3
 800405c:	f8dc a000 	ldr.w	sl, [ip]
 8004060:	0c12      	lsrs	r2, r2, #16
 8004062:	fa13 f38a 	uxtah	r3, r3, sl
 8004066:	fb06 e202 	mla	r2, r6, r2, lr
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	9b00      	ldr	r3, [sp, #0]
 800406e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004072:	b292      	uxth	r2, r2
 8004074:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800407c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004080:	4581      	cmp	r9, r0
 8004082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004086:	f84c 3b04 	str.w	r3, [ip], #4
 800408a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800408e:	d2db      	bcs.n	8004048 <quorem+0x44>
 8004090:	f855 300b 	ldr.w	r3, [r5, fp]
 8004094:	b92b      	cbnz	r3, 80040a2 <quorem+0x9e>
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	3b04      	subs	r3, #4
 800409a:	429d      	cmp	r5, r3
 800409c:	461a      	mov	r2, r3
 800409e:	d32e      	bcc.n	80040fe <quorem+0xfa>
 80040a0:	613c      	str	r4, [r7, #16]
 80040a2:	4638      	mov	r0, r7
 80040a4:	f001 fca4 	bl	80059f0 <__mcmp>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	db24      	blt.n	80040f6 <quorem+0xf2>
 80040ac:	3601      	adds	r6, #1
 80040ae:	4628      	mov	r0, r5
 80040b0:	f04f 0c00 	mov.w	ip, #0
 80040b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80040b8:	f8d0 e000 	ldr.w	lr, [r0]
 80040bc:	b293      	uxth	r3, r2
 80040be:	ebac 0303 	sub.w	r3, ip, r3
 80040c2:	0c12      	lsrs	r2, r2, #16
 80040c4:	fa13 f38e 	uxtah	r3, r3, lr
 80040c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040d6:	45c1      	cmp	r9, r8
 80040d8:	f840 3b04 	str.w	r3, [r0], #4
 80040dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040e0:	d2e8      	bcs.n	80040b4 <quorem+0xb0>
 80040e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040ea:	b922      	cbnz	r2, 80040f6 <quorem+0xf2>
 80040ec:	3b04      	subs	r3, #4
 80040ee:	429d      	cmp	r5, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	d30a      	bcc.n	800410a <quorem+0x106>
 80040f4:	613c      	str	r4, [r7, #16]
 80040f6:	4630      	mov	r0, r6
 80040f8:	b003      	add	sp, #12
 80040fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	3b04      	subs	r3, #4
 8004102:	2a00      	cmp	r2, #0
 8004104:	d1cc      	bne.n	80040a0 <quorem+0x9c>
 8004106:	3c01      	subs	r4, #1
 8004108:	e7c7      	b.n	800409a <quorem+0x96>
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	3b04      	subs	r3, #4
 800410e:	2a00      	cmp	r2, #0
 8004110:	d1f0      	bne.n	80040f4 <quorem+0xf0>
 8004112:	3c01      	subs	r4, #1
 8004114:	e7eb      	b.n	80040ee <quorem+0xea>
 8004116:	2000      	movs	r0, #0
 8004118:	e7ee      	b.n	80040f8 <quorem+0xf4>
 800411a:	0000      	movs	r0, r0
 800411c:	0000      	movs	r0, r0
	...

08004120 <_dtoa_r>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	ed2d 8b04 	vpush	{d8-d9}
 8004128:	ec57 6b10 	vmov	r6, r7, d0
 800412c:	b093      	sub	sp, #76	; 0x4c
 800412e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004134:	9106      	str	r1, [sp, #24]
 8004136:	ee10 aa10 	vmov	sl, s0
 800413a:	4604      	mov	r4, r0
 800413c:	9209      	str	r2, [sp, #36]	; 0x24
 800413e:	930c      	str	r3, [sp, #48]	; 0x30
 8004140:	46bb      	mov	fp, r7
 8004142:	b975      	cbnz	r5, 8004162 <_dtoa_r+0x42>
 8004144:	2010      	movs	r0, #16
 8004146:	f001 f95f 	bl	8005408 <malloc>
 800414a:	4602      	mov	r2, r0
 800414c:	6260      	str	r0, [r4, #36]	; 0x24
 800414e:	b920      	cbnz	r0, 800415a <_dtoa_r+0x3a>
 8004150:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <_dtoa_r+0x2d0>)
 8004152:	21ea      	movs	r1, #234	; 0xea
 8004154:	48a7      	ldr	r0, [pc, #668]	; (80043f4 <_dtoa_r+0x2d4>)
 8004156:	f002 fceb 	bl	8006b30 <__assert_func>
 800415a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800415e:	6005      	str	r5, [r0, #0]
 8004160:	60c5      	str	r5, [r0, #12]
 8004162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	b151      	cbz	r1, 800417e <_dtoa_r+0x5e>
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	604a      	str	r2, [r1, #4]
 800416c:	2301      	movs	r3, #1
 800416e:	4093      	lsls	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
 8004172:	4620      	mov	r0, r4
 8004174:	f001 f9b0 	bl	80054d8 <_Bfree>
 8004178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	1e3b      	subs	r3, r7, #0
 8004180:	bfaa      	itet	ge
 8004182:	2300      	movge	r3, #0
 8004184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004188:	f8c8 3000 	strge.w	r3, [r8]
 800418c:	4b9a      	ldr	r3, [pc, #616]	; (80043f8 <_dtoa_r+0x2d8>)
 800418e:	bfbc      	itt	lt
 8004190:	2201      	movlt	r2, #1
 8004192:	f8c8 2000 	strlt.w	r2, [r8]
 8004196:	ea33 030b 	bics.w	r3, r3, fp
 800419a:	d11b      	bne.n	80041d4 <_dtoa_r+0xb4>
 800419c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800419e:	f242 730f 	movw	r3, #9999	; 0x270f
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041a8:	4333      	orrs	r3, r6
 80041aa:	f000 8592 	beq.w	8004cd2 <_dtoa_r+0xbb2>
 80041ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041b0:	b963      	cbnz	r3, 80041cc <_dtoa_r+0xac>
 80041b2:	4b92      	ldr	r3, [pc, #584]	; (80043fc <_dtoa_r+0x2dc>)
 80041b4:	e022      	b.n	80041fc <_dtoa_r+0xdc>
 80041b6:	4b92      	ldr	r3, [pc, #584]	; (8004400 <_dtoa_r+0x2e0>)
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	3308      	adds	r3, #8
 80041bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	9801      	ldr	r0, [sp, #4]
 80041c2:	b013      	add	sp, #76	; 0x4c
 80041c4:	ecbd 8b04 	vpop	{d8-d9}
 80041c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041cc:	4b8b      	ldr	r3, [pc, #556]	; (80043fc <_dtoa_r+0x2dc>)
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	3303      	adds	r3, #3
 80041d2:	e7f3      	b.n	80041bc <_dtoa_r+0x9c>
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	4650      	mov	r0, sl
 80041da:	4659      	mov	r1, fp
 80041dc:	f7fc fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 80041e0:	ec4b ab19 	vmov	d9, sl, fp
 80041e4:	4680      	mov	r8, r0
 80041e6:	b158      	cbz	r0, 8004200 <_dtoa_r+0xe0>
 80041e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041ea:	2301      	movs	r3, #1
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 856b 	beq.w	8004ccc <_dtoa_r+0xbac>
 80041f6:	4883      	ldr	r0, [pc, #524]	; (8004404 <_dtoa_r+0x2e4>)
 80041f8:	6018      	str	r0, [r3, #0]
 80041fa:	1e43      	subs	r3, r0, #1
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	e7df      	b.n	80041c0 <_dtoa_r+0xa0>
 8004200:	ec4b ab10 	vmov	d0, sl, fp
 8004204:	aa10      	add	r2, sp, #64	; 0x40
 8004206:	a911      	add	r1, sp, #68	; 0x44
 8004208:	4620      	mov	r0, r4
 800420a:	f001 fd13 	bl	8005c34 <__d2b>
 800420e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004212:	ee08 0a10 	vmov	s16, r0
 8004216:	2d00      	cmp	r5, #0
 8004218:	f000 8084 	beq.w	8004324 <_dtoa_r+0x204>
 800421c:	ee19 3a90 	vmov	r3, s19
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004228:	4656      	mov	r6, sl
 800422a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800422e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004236:	4b74      	ldr	r3, [pc, #464]	; (8004408 <_dtoa_r+0x2e8>)
 8004238:	2200      	movs	r2, #0
 800423a:	4630      	mov	r0, r6
 800423c:	4639      	mov	r1, r7
 800423e:	f7fc f83b 	bl	80002b8 <__aeabi_dsub>
 8004242:	a365      	add	r3, pc, #404	; (adr r3, 80043d8 <_dtoa_r+0x2b8>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fc f9ee 	bl	8000628 <__aeabi_dmul>
 800424c:	a364      	add	r3, pc, #400	; (adr r3, 80043e0 <_dtoa_r+0x2c0>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f833 	bl	80002bc <__adddf3>
 8004256:	4606      	mov	r6, r0
 8004258:	4628      	mov	r0, r5
 800425a:	460f      	mov	r7, r1
 800425c:	f7fc f97a 	bl	8000554 <__aeabi_i2d>
 8004260:	a361      	add	r3, pc, #388	; (adr r3, 80043e8 <_dtoa_r+0x2c8>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fc f9df 	bl	8000628 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fc f823 	bl	80002bc <__adddf3>
 8004276:	4606      	mov	r6, r0
 8004278:	460f      	mov	r7, r1
 800427a:	f7fc fc85 	bl	8000b88 <__aeabi_d2iz>
 800427e:	2200      	movs	r2, #0
 8004280:	9000      	str	r0, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc fc40 	bl	8000b0c <__aeabi_dcmplt>
 800428c:	b150      	cbz	r0, 80042a4 <_dtoa_r+0x184>
 800428e:	9800      	ldr	r0, [sp, #0]
 8004290:	f7fc f960 	bl	8000554 <__aeabi_i2d>
 8004294:	4632      	mov	r2, r6
 8004296:	463b      	mov	r3, r7
 8004298:	f7fc fc2e 	bl	8000af8 <__aeabi_dcmpeq>
 800429c:	b910      	cbnz	r0, 80042a4 <_dtoa_r+0x184>
 800429e:	9b00      	ldr	r3, [sp, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	9b00      	ldr	r3, [sp, #0]
 80042a6:	2b16      	cmp	r3, #22
 80042a8:	d85a      	bhi.n	8004360 <_dtoa_r+0x240>
 80042aa:	9a00      	ldr	r2, [sp, #0]
 80042ac:	4b57      	ldr	r3, [pc, #348]	; (800440c <_dtoa_r+0x2ec>)
 80042ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	ec51 0b19 	vmov	r0, r1, d9
 80042ba:	f7fc fc27 	bl	8000b0c <__aeabi_dcmplt>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d050      	beq.n	8004364 <_dtoa_r+0x244>
 80042c2:	9b00      	ldr	r3, [sp, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80042cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042ce:	1b5d      	subs	r5, r3, r5
 80042d0:	1e6b      	subs	r3, r5, #1
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	bf45      	ittet	mi
 80042d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80042da:	9304      	strmi	r3, [sp, #16]
 80042dc:	2300      	movpl	r3, #0
 80042de:	2300      	movmi	r3, #0
 80042e0:	bf4c      	ite	mi
 80042e2:	9305      	strmi	r3, [sp, #20]
 80042e4:	9304      	strpl	r3, [sp, #16]
 80042e6:	9b00      	ldr	r3, [sp, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db3d      	blt.n	8004368 <_dtoa_r+0x248>
 80042ec:	9b05      	ldr	r3, [sp, #20]
 80042ee:	9a00      	ldr	r2, [sp, #0]
 80042f0:	920a      	str	r2, [sp, #40]	; 0x28
 80042f2:	4413      	add	r3, r2
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9307      	str	r3, [sp, #28]
 80042fa:	9b06      	ldr	r3, [sp, #24]
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	f200 8089 	bhi.w	8004414 <_dtoa_r+0x2f4>
 8004302:	2b05      	cmp	r3, #5
 8004304:	bfc4      	itt	gt
 8004306:	3b04      	subgt	r3, #4
 8004308:	9306      	strgt	r3, [sp, #24]
 800430a:	9b06      	ldr	r3, [sp, #24]
 800430c:	f1a3 0302 	sub.w	r3, r3, #2
 8004310:	bfcc      	ite	gt
 8004312:	2500      	movgt	r5, #0
 8004314:	2501      	movle	r5, #1
 8004316:	2b03      	cmp	r3, #3
 8004318:	f200 8087 	bhi.w	800442a <_dtoa_r+0x30a>
 800431c:	e8df f003 	tbb	[pc, r3]
 8004320:	59383a2d 	.word	0x59383a2d
 8004324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004328:	441d      	add	r5, r3
 800432a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800432e:	2b20      	cmp	r3, #32
 8004330:	bfc1      	itttt	gt
 8004332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800433a:	fa0b f303 	lslgt.w	r3, fp, r3
 800433e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004342:	bfda      	itte	le
 8004344:	f1c3 0320 	rsble	r3, r3, #32
 8004348:	fa06 f003 	lslle.w	r0, r6, r3
 800434c:	4318      	orrgt	r0, r3
 800434e:	f7fc f8f1 	bl	8000534 <__aeabi_ui2d>
 8004352:	2301      	movs	r3, #1
 8004354:	4606      	mov	r6, r0
 8004356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800435a:	3d01      	subs	r5, #1
 800435c:	930e      	str	r3, [sp, #56]	; 0x38
 800435e:	e76a      	b.n	8004236 <_dtoa_r+0x116>
 8004360:	2301      	movs	r3, #1
 8004362:	e7b2      	b.n	80042ca <_dtoa_r+0x1aa>
 8004364:	900b      	str	r0, [sp, #44]	; 0x2c
 8004366:	e7b1      	b.n	80042cc <_dtoa_r+0x1ac>
 8004368:	9b04      	ldr	r3, [sp, #16]
 800436a:	9a00      	ldr	r2, [sp, #0]
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	4253      	negs	r3, r2
 8004372:	9307      	str	r3, [sp, #28]
 8004374:	2300      	movs	r3, #0
 8004376:	930a      	str	r3, [sp, #40]	; 0x28
 8004378:	e7bf      	b.n	80042fa <_dtoa_r+0x1da>
 800437a:	2300      	movs	r3, #0
 800437c:	9308      	str	r3, [sp, #32]
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc55      	bgt.n	8004430 <_dtoa_r+0x310>
 8004384:	2301      	movs	r3, #1
 8004386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800438a:	461a      	mov	r2, r3
 800438c:	9209      	str	r2, [sp, #36]	; 0x24
 800438e:	e00c      	b.n	80043aa <_dtoa_r+0x28a>
 8004390:	2301      	movs	r3, #1
 8004392:	e7f3      	b.n	800437c <_dtoa_r+0x25c>
 8004394:	2300      	movs	r3, #0
 8004396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004398:	9308      	str	r3, [sp, #32]
 800439a:	9b00      	ldr	r3, [sp, #0]
 800439c:	4413      	add	r3, r2
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	9303      	str	r3, [sp, #12]
 80043a6:	bfb8      	it	lt
 80043a8:	2301      	movlt	r3, #1
 80043aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	6042      	str	r2, [r0, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	f102 0614 	add.w	r6, r2, #20
 80043b6:	429e      	cmp	r6, r3
 80043b8:	6841      	ldr	r1, [r0, #4]
 80043ba:	d93d      	bls.n	8004438 <_dtoa_r+0x318>
 80043bc:	4620      	mov	r0, r4
 80043be:	f001 f84b 	bl	8005458 <_Balloc>
 80043c2:	9001      	str	r0, [sp, #4]
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d13b      	bne.n	8004440 <_dtoa_r+0x320>
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <_dtoa_r+0x2f0>)
 80043ca:	4602      	mov	r2, r0
 80043cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043d0:	e6c0      	b.n	8004154 <_dtoa_r+0x34>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e7df      	b.n	8004396 <_dtoa_r+0x276>
 80043d6:	bf00      	nop
 80043d8:	636f4361 	.word	0x636f4361
 80043dc:	3fd287a7 	.word	0x3fd287a7
 80043e0:	8b60c8b3 	.word	0x8b60c8b3
 80043e4:	3fc68a28 	.word	0x3fc68a28
 80043e8:	509f79fb 	.word	0x509f79fb
 80043ec:	3fd34413 	.word	0x3fd34413
 80043f0:	08007946 	.word	0x08007946
 80043f4:	0800795d 	.word	0x0800795d
 80043f8:	7ff00000 	.word	0x7ff00000
 80043fc:	08007942 	.word	0x08007942
 8004400:	08007939 	.word	0x08007939
 8004404:	08007bb2 	.word	0x08007bb2
 8004408:	3ff80000 	.word	0x3ff80000
 800440c:	08007ac8 	.word	0x08007ac8
 8004410:	080079b8 	.word	0x080079b8
 8004414:	2501      	movs	r5, #1
 8004416:	2300      	movs	r3, #0
 8004418:	9306      	str	r3, [sp, #24]
 800441a:	9508      	str	r5, [sp, #32]
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	2312      	movs	r3, #18
 8004428:	e7b0      	b.n	800438c <_dtoa_r+0x26c>
 800442a:	2301      	movs	r3, #1
 800442c:	9308      	str	r3, [sp, #32]
 800442e:	e7f5      	b.n	800441c <_dtoa_r+0x2fc>
 8004430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004436:	e7b8      	b.n	80043aa <_dtoa_r+0x28a>
 8004438:	3101      	adds	r1, #1
 800443a:	6041      	str	r1, [r0, #4]
 800443c:	0052      	lsls	r2, r2, #1
 800443e:	e7b8      	b.n	80043b2 <_dtoa_r+0x292>
 8004440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004442:	9a01      	ldr	r2, [sp, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	2b0e      	cmp	r3, #14
 800444a:	f200 809d 	bhi.w	8004588 <_dtoa_r+0x468>
 800444e:	2d00      	cmp	r5, #0
 8004450:	f000 809a 	beq.w	8004588 <_dtoa_r+0x468>
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dd32      	ble.n	80044c0 <_dtoa_r+0x3a0>
 800445a:	4ab7      	ldr	r2, [pc, #732]	; (8004738 <_dtoa_r+0x618>)
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004468:	9b00      	ldr	r3, [sp, #0]
 800446a:	05d8      	lsls	r0, r3, #23
 800446c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004470:	d516      	bpl.n	80044a0 <_dtoa_r+0x380>
 8004472:	4bb2      	ldr	r3, [pc, #712]	; (800473c <_dtoa_r+0x61c>)
 8004474:	ec51 0b19 	vmov	r0, r1, d9
 8004478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800447c:	f7fc f9fe 	bl	800087c <__aeabi_ddiv>
 8004480:	f007 070f 	and.w	r7, r7, #15
 8004484:	4682      	mov	sl, r0
 8004486:	468b      	mov	fp, r1
 8004488:	2503      	movs	r5, #3
 800448a:	4eac      	ldr	r6, [pc, #688]	; (800473c <_dtoa_r+0x61c>)
 800448c:	b957      	cbnz	r7, 80044a4 <_dtoa_r+0x384>
 800448e:	4642      	mov	r2, r8
 8004490:	464b      	mov	r3, r9
 8004492:	4650      	mov	r0, sl
 8004494:	4659      	mov	r1, fp
 8004496:	f7fc f9f1 	bl	800087c <__aeabi_ddiv>
 800449a:	4682      	mov	sl, r0
 800449c:	468b      	mov	fp, r1
 800449e:	e028      	b.n	80044f2 <_dtoa_r+0x3d2>
 80044a0:	2502      	movs	r5, #2
 80044a2:	e7f2      	b.n	800448a <_dtoa_r+0x36a>
 80044a4:	07f9      	lsls	r1, r7, #31
 80044a6:	d508      	bpl.n	80044ba <_dtoa_r+0x39a>
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044b0:	f7fc f8ba 	bl	8000628 <__aeabi_dmul>
 80044b4:	3501      	adds	r5, #1
 80044b6:	4680      	mov	r8, r0
 80044b8:	4689      	mov	r9, r1
 80044ba:	107f      	asrs	r7, r7, #1
 80044bc:	3608      	adds	r6, #8
 80044be:	e7e5      	b.n	800448c <_dtoa_r+0x36c>
 80044c0:	f000 809b 	beq.w	80045fa <_dtoa_r+0x4da>
 80044c4:	9b00      	ldr	r3, [sp, #0]
 80044c6:	4f9d      	ldr	r7, [pc, #628]	; (800473c <_dtoa_r+0x61c>)
 80044c8:	425e      	negs	r6, r3
 80044ca:	4b9b      	ldr	r3, [pc, #620]	; (8004738 <_dtoa_r+0x618>)
 80044cc:	f006 020f 	and.w	r2, r6, #15
 80044d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	ec51 0b19 	vmov	r0, r1, d9
 80044dc:	f7fc f8a4 	bl	8000628 <__aeabi_dmul>
 80044e0:	1136      	asrs	r6, r6, #4
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	2300      	movs	r3, #0
 80044e8:	2502      	movs	r5, #2
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	d17a      	bne.n	80045e4 <_dtoa_r+0x4c4>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d3      	bne.n	800449a <_dtoa_r+0x37a>
 80044f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8082 	beq.w	80045fe <_dtoa_r+0x4de>
 80044fa:	4b91      	ldr	r3, [pc, #580]	; (8004740 <_dtoa_r+0x620>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	4650      	mov	r0, sl
 8004500:	4659      	mov	r1, fp
 8004502:	f7fc fb03 	bl	8000b0c <__aeabi_dcmplt>
 8004506:	2800      	cmp	r0, #0
 8004508:	d079      	beq.n	80045fe <_dtoa_r+0x4de>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d076      	beq.n	80045fe <_dtoa_r+0x4de>
 8004510:	9b02      	ldr	r3, [sp, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	dd36      	ble.n	8004584 <_dtoa_r+0x464>
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	1e5f      	subs	r7, r3, #1
 800451e:	2200      	movs	r2, #0
 8004520:	4b88      	ldr	r3, [pc, #544]	; (8004744 <_dtoa_r+0x624>)
 8004522:	f7fc f881 	bl	8000628 <__aeabi_dmul>
 8004526:	9e02      	ldr	r6, [sp, #8]
 8004528:	4682      	mov	sl, r0
 800452a:	468b      	mov	fp, r1
 800452c:	3501      	adds	r5, #1
 800452e:	4628      	mov	r0, r5
 8004530:	f7fc f810 	bl	8000554 <__aeabi_i2d>
 8004534:	4652      	mov	r2, sl
 8004536:	465b      	mov	r3, fp
 8004538:	f7fc f876 	bl	8000628 <__aeabi_dmul>
 800453c:	4b82      	ldr	r3, [pc, #520]	; (8004748 <_dtoa_r+0x628>)
 800453e:	2200      	movs	r2, #0
 8004540:	f7fb febc 	bl	80002bc <__adddf3>
 8004544:	46d0      	mov	r8, sl
 8004546:	46d9      	mov	r9, fp
 8004548:	4682      	mov	sl, r0
 800454a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800454e:	2e00      	cmp	r6, #0
 8004550:	d158      	bne.n	8004604 <_dtoa_r+0x4e4>
 8004552:	4b7e      	ldr	r3, [pc, #504]	; (800474c <_dtoa_r+0x62c>)
 8004554:	2200      	movs	r2, #0
 8004556:	4640      	mov	r0, r8
 8004558:	4649      	mov	r1, r9
 800455a:	f7fb fead 	bl	80002b8 <__aeabi_dsub>
 800455e:	4652      	mov	r2, sl
 8004560:	465b      	mov	r3, fp
 8004562:	4680      	mov	r8, r0
 8004564:	4689      	mov	r9, r1
 8004566:	f7fc faef 	bl	8000b48 <__aeabi_dcmpgt>
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 8295 	bne.w	8004a9a <_dtoa_r+0x97a>
 8004570:	4652      	mov	r2, sl
 8004572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fc fac7 	bl	8000b0c <__aeabi_dcmplt>
 800457e:	2800      	cmp	r0, #0
 8004580:	f040 8289 	bne.w	8004a96 <_dtoa_r+0x976>
 8004584:	ec5b ab19 	vmov	sl, fp, d9
 8004588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800458a:	2b00      	cmp	r3, #0
 800458c:	f2c0 8148 	blt.w	8004820 <_dtoa_r+0x700>
 8004590:	9a00      	ldr	r2, [sp, #0]
 8004592:	2a0e      	cmp	r2, #14
 8004594:	f300 8144 	bgt.w	8004820 <_dtoa_r+0x700>
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <_dtoa_r+0x618>)
 800459a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800459e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f280 80d5 	bge.w	8004754 <_dtoa_r+0x634>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f300 80d1 	bgt.w	8004754 <_dtoa_r+0x634>
 80045b2:	f040 826f 	bne.w	8004a94 <_dtoa_r+0x974>
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <_dtoa_r+0x62c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fc f833 	bl	8000628 <__aeabi_dmul>
 80045c2:	4652      	mov	r2, sl
 80045c4:	465b      	mov	r3, fp
 80045c6:	f7fc fab5 	bl	8000b34 <__aeabi_dcmpge>
 80045ca:	9e03      	ldr	r6, [sp, #12]
 80045cc:	4637      	mov	r7, r6
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f040 8245 	bne.w	8004a5e <_dtoa_r+0x93e>
 80045d4:	9d01      	ldr	r5, [sp, #4]
 80045d6:	2331      	movs	r3, #49	; 0x31
 80045d8:	f805 3b01 	strb.w	r3, [r5], #1
 80045dc:	9b00      	ldr	r3, [sp, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	e240      	b.n	8004a66 <_dtoa_r+0x946>
 80045e4:	07f2      	lsls	r2, r6, #31
 80045e6:	d505      	bpl.n	80045f4 <_dtoa_r+0x4d4>
 80045e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ec:	f7fc f81c 	bl	8000628 <__aeabi_dmul>
 80045f0:	3501      	adds	r5, #1
 80045f2:	2301      	movs	r3, #1
 80045f4:	1076      	asrs	r6, r6, #1
 80045f6:	3708      	adds	r7, #8
 80045f8:	e777      	b.n	80044ea <_dtoa_r+0x3ca>
 80045fa:	2502      	movs	r5, #2
 80045fc:	e779      	b.n	80044f2 <_dtoa_r+0x3d2>
 80045fe:	9f00      	ldr	r7, [sp, #0]
 8004600:	9e03      	ldr	r6, [sp, #12]
 8004602:	e794      	b.n	800452e <_dtoa_r+0x40e>
 8004604:	9901      	ldr	r1, [sp, #4]
 8004606:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <_dtoa_r+0x618>)
 8004608:	4431      	add	r1, r6
 800460a:	910d      	str	r1, [sp, #52]	; 0x34
 800460c:	9908      	ldr	r1, [sp, #32]
 800460e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004616:	2900      	cmp	r1, #0
 8004618:	d043      	beq.n	80046a2 <_dtoa_r+0x582>
 800461a:	494d      	ldr	r1, [pc, #308]	; (8004750 <_dtoa_r+0x630>)
 800461c:	2000      	movs	r0, #0
 800461e:	f7fc f92d 	bl	800087c <__aeabi_ddiv>
 8004622:	4652      	mov	r2, sl
 8004624:	465b      	mov	r3, fp
 8004626:	f7fb fe47 	bl	80002b8 <__aeabi_dsub>
 800462a:	9d01      	ldr	r5, [sp, #4]
 800462c:	4682      	mov	sl, r0
 800462e:	468b      	mov	fp, r1
 8004630:	4649      	mov	r1, r9
 8004632:	4640      	mov	r0, r8
 8004634:	f7fc faa8 	bl	8000b88 <__aeabi_d2iz>
 8004638:	4606      	mov	r6, r0
 800463a:	f7fb ff8b 	bl	8000554 <__aeabi_i2d>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4640      	mov	r0, r8
 8004644:	4649      	mov	r1, r9
 8004646:	f7fb fe37 	bl	80002b8 <__aeabi_dsub>
 800464a:	3630      	adds	r6, #48	; 0x30
 800464c:	f805 6b01 	strb.w	r6, [r5], #1
 8004650:	4652      	mov	r2, sl
 8004652:	465b      	mov	r3, fp
 8004654:	4680      	mov	r8, r0
 8004656:	4689      	mov	r9, r1
 8004658:	f7fc fa58 	bl	8000b0c <__aeabi_dcmplt>
 800465c:	2800      	cmp	r0, #0
 800465e:	d163      	bne.n	8004728 <_dtoa_r+0x608>
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	4936      	ldr	r1, [pc, #216]	; (8004740 <_dtoa_r+0x620>)
 8004666:	2000      	movs	r0, #0
 8004668:	f7fb fe26 	bl	80002b8 <__aeabi_dsub>
 800466c:	4652      	mov	r2, sl
 800466e:	465b      	mov	r3, fp
 8004670:	f7fc fa4c 	bl	8000b0c <__aeabi_dcmplt>
 8004674:	2800      	cmp	r0, #0
 8004676:	f040 80b5 	bne.w	80047e4 <_dtoa_r+0x6c4>
 800467a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800467c:	429d      	cmp	r5, r3
 800467e:	d081      	beq.n	8004584 <_dtoa_r+0x464>
 8004680:	4b30      	ldr	r3, [pc, #192]	; (8004744 <_dtoa_r+0x624>)
 8004682:	2200      	movs	r2, #0
 8004684:	4650      	mov	r0, sl
 8004686:	4659      	mov	r1, fp
 8004688:	f7fb ffce 	bl	8000628 <__aeabi_dmul>
 800468c:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <_dtoa_r+0x624>)
 800468e:	4682      	mov	sl, r0
 8004690:	468b      	mov	fp, r1
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	2200      	movs	r2, #0
 8004698:	f7fb ffc6 	bl	8000628 <__aeabi_dmul>
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	e7c6      	b.n	8004630 <_dtoa_r+0x510>
 80046a2:	4650      	mov	r0, sl
 80046a4:	4659      	mov	r1, fp
 80046a6:	f7fb ffbf 	bl	8000628 <__aeabi_dmul>
 80046aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ac:	9d01      	ldr	r5, [sp, #4]
 80046ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80046b0:	4682      	mov	sl, r0
 80046b2:	468b      	mov	fp, r1
 80046b4:	4649      	mov	r1, r9
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7fc fa66 	bl	8000b88 <__aeabi_d2iz>
 80046bc:	4606      	mov	r6, r0
 80046be:	f7fb ff49 	bl	8000554 <__aeabi_i2d>
 80046c2:	3630      	adds	r6, #48	; 0x30
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fb fdf4 	bl	80002b8 <__aeabi_dsub>
 80046d0:	f805 6b01 	strb.w	r6, [r5], #1
 80046d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d6:	429d      	cmp	r5, r3
 80046d8:	4680      	mov	r8, r0
 80046da:	4689      	mov	r9, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	d124      	bne.n	800472c <_dtoa_r+0x60c>
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <_dtoa_r+0x630>)
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fb fde8 	bl	80002bc <__adddf3>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4640      	mov	r0, r8
 80046f2:	4649      	mov	r1, r9
 80046f4:	f7fc fa28 	bl	8000b48 <__aeabi_dcmpgt>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d173      	bne.n	80047e4 <_dtoa_r+0x6c4>
 80046fc:	4652      	mov	r2, sl
 80046fe:	465b      	mov	r3, fp
 8004700:	4913      	ldr	r1, [pc, #76]	; (8004750 <_dtoa_r+0x630>)
 8004702:	2000      	movs	r0, #0
 8004704:	f7fb fdd8 	bl	80002b8 <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4640      	mov	r0, r8
 800470e:	4649      	mov	r1, r9
 8004710:	f7fc f9fc 	bl	8000b0c <__aeabi_dcmplt>
 8004714:	2800      	cmp	r0, #0
 8004716:	f43f af35 	beq.w	8004584 <_dtoa_r+0x464>
 800471a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800471c:	1e6b      	subs	r3, r5, #1
 800471e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d0f8      	beq.n	800471a <_dtoa_r+0x5fa>
 8004728:	9700      	str	r7, [sp, #0]
 800472a:	e049      	b.n	80047c0 <_dtoa_r+0x6a0>
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <_dtoa_r+0x624>)
 800472e:	f7fb ff7b 	bl	8000628 <__aeabi_dmul>
 8004732:	4680      	mov	r8, r0
 8004734:	4689      	mov	r9, r1
 8004736:	e7bd      	b.n	80046b4 <_dtoa_r+0x594>
 8004738:	08007ac8 	.word	0x08007ac8
 800473c:	08007aa0 	.word	0x08007aa0
 8004740:	3ff00000 	.word	0x3ff00000
 8004744:	40240000 	.word	0x40240000
 8004748:	401c0000 	.word	0x401c0000
 800474c:	40140000 	.word	0x40140000
 8004750:	3fe00000 	.word	0x3fe00000
 8004754:	9d01      	ldr	r5, [sp, #4]
 8004756:	4656      	mov	r6, sl
 8004758:	465f      	mov	r7, fp
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7fc f88b 	bl	800087c <__aeabi_ddiv>
 8004766:	f7fc fa0f 	bl	8000b88 <__aeabi_d2iz>
 800476a:	4682      	mov	sl, r0
 800476c:	f7fb fef2 	bl	8000554 <__aeabi_i2d>
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	f7fb ff58 	bl	8000628 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4630      	mov	r0, r6
 800477e:	4639      	mov	r1, r7
 8004780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004784:	f7fb fd98 	bl	80002b8 <__aeabi_dsub>
 8004788:	f805 6b01 	strb.w	r6, [r5], #1
 800478c:	9e01      	ldr	r6, [sp, #4]
 800478e:	9f03      	ldr	r7, [sp, #12]
 8004790:	1bae      	subs	r6, r5, r6
 8004792:	42b7      	cmp	r7, r6
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	d135      	bne.n	8004806 <_dtoa_r+0x6e6>
 800479a:	f7fb fd8f 	bl	80002bc <__adddf3>
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	4606      	mov	r6, r0
 80047a4:	460f      	mov	r7, r1
 80047a6:	f7fc f9cf 	bl	8000b48 <__aeabi_dcmpgt>
 80047aa:	b9d0      	cbnz	r0, 80047e2 <_dtoa_r+0x6c2>
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fc f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 80047b8:	b110      	cbz	r0, 80047c0 <_dtoa_r+0x6a0>
 80047ba:	f01a 0f01 	tst.w	sl, #1
 80047be:	d110      	bne.n	80047e2 <_dtoa_r+0x6c2>
 80047c0:	4620      	mov	r0, r4
 80047c2:	ee18 1a10 	vmov	r1, s16
 80047c6:	f000 fe87 	bl	80054d8 <_Bfree>
 80047ca:	2300      	movs	r3, #0
 80047cc:	9800      	ldr	r0, [sp, #0]
 80047ce:	702b      	strb	r3, [r5, #0]
 80047d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047d2:	3001      	adds	r0, #1
 80047d4:	6018      	str	r0, [r3, #0]
 80047d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f43f acf1 	beq.w	80041c0 <_dtoa_r+0xa0>
 80047de:	601d      	str	r5, [r3, #0]
 80047e0:	e4ee      	b.n	80041c0 <_dtoa_r+0xa0>
 80047e2:	9f00      	ldr	r7, [sp, #0]
 80047e4:	462b      	mov	r3, r5
 80047e6:	461d      	mov	r5, r3
 80047e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ec:	2a39      	cmp	r2, #57	; 0x39
 80047ee:	d106      	bne.n	80047fe <_dtoa_r+0x6de>
 80047f0:	9a01      	ldr	r2, [sp, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d1f7      	bne.n	80047e6 <_dtoa_r+0x6c6>
 80047f6:	9901      	ldr	r1, [sp, #4]
 80047f8:	2230      	movs	r2, #48	; 0x30
 80047fa:	3701      	adds	r7, #1
 80047fc:	700a      	strb	r2, [r1, #0]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	3201      	adds	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e790      	b.n	8004728 <_dtoa_r+0x608>
 8004806:	4ba6      	ldr	r3, [pc, #664]	; (8004aa0 <_dtoa_r+0x980>)
 8004808:	2200      	movs	r2, #0
 800480a:	f7fb ff0d 	bl	8000628 <__aeabi_dmul>
 800480e:	2200      	movs	r2, #0
 8004810:	2300      	movs	r3, #0
 8004812:	4606      	mov	r6, r0
 8004814:	460f      	mov	r7, r1
 8004816:	f7fc f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800481a:	2800      	cmp	r0, #0
 800481c:	d09d      	beq.n	800475a <_dtoa_r+0x63a>
 800481e:	e7cf      	b.n	80047c0 <_dtoa_r+0x6a0>
 8004820:	9a08      	ldr	r2, [sp, #32]
 8004822:	2a00      	cmp	r2, #0
 8004824:	f000 80d7 	beq.w	80049d6 <_dtoa_r+0x8b6>
 8004828:	9a06      	ldr	r2, [sp, #24]
 800482a:	2a01      	cmp	r2, #1
 800482c:	f300 80ba 	bgt.w	80049a4 <_dtoa_r+0x884>
 8004830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004832:	2a00      	cmp	r2, #0
 8004834:	f000 80b2 	beq.w	800499c <_dtoa_r+0x87c>
 8004838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800483c:	9e07      	ldr	r6, [sp, #28]
 800483e:	9d04      	ldr	r5, [sp, #16]
 8004840:	9a04      	ldr	r2, [sp, #16]
 8004842:	441a      	add	r2, r3
 8004844:	9204      	str	r2, [sp, #16]
 8004846:	9a05      	ldr	r2, [sp, #20]
 8004848:	2101      	movs	r1, #1
 800484a:	441a      	add	r2, r3
 800484c:	4620      	mov	r0, r4
 800484e:	9205      	str	r2, [sp, #20]
 8004850:	f000 ff44 	bl	80056dc <__i2b>
 8004854:	4607      	mov	r7, r0
 8004856:	2d00      	cmp	r5, #0
 8004858:	dd0c      	ble.n	8004874 <_dtoa_r+0x754>
 800485a:	9b05      	ldr	r3, [sp, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd09      	ble.n	8004874 <_dtoa_r+0x754>
 8004860:	42ab      	cmp	r3, r5
 8004862:	9a04      	ldr	r2, [sp, #16]
 8004864:	bfa8      	it	ge
 8004866:	462b      	movge	r3, r5
 8004868:	1ad2      	subs	r2, r2, r3
 800486a:	9204      	str	r2, [sp, #16]
 800486c:	9a05      	ldr	r2, [sp, #20]
 800486e:	1aed      	subs	r5, r5, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	b31b      	cbz	r3, 80048c0 <_dtoa_r+0x7a0>
 8004878:	9b08      	ldr	r3, [sp, #32]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80af 	beq.w	80049de <_dtoa_r+0x8be>
 8004880:	2e00      	cmp	r6, #0
 8004882:	dd13      	ble.n	80048ac <_dtoa_r+0x78c>
 8004884:	4639      	mov	r1, r7
 8004886:	4632      	mov	r2, r6
 8004888:	4620      	mov	r0, r4
 800488a:	f000 ffe7 	bl	800585c <__pow5mult>
 800488e:	ee18 2a10 	vmov	r2, s16
 8004892:	4601      	mov	r1, r0
 8004894:	4607      	mov	r7, r0
 8004896:	4620      	mov	r0, r4
 8004898:	f000 ff36 	bl	8005708 <__multiply>
 800489c:	ee18 1a10 	vmov	r1, s16
 80048a0:	4680      	mov	r8, r0
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 fe18 	bl	80054d8 <_Bfree>
 80048a8:	ee08 8a10 	vmov	s16, r8
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	1b9a      	subs	r2, r3, r6
 80048b0:	d006      	beq.n	80048c0 <_dtoa_r+0x7a0>
 80048b2:	ee18 1a10 	vmov	r1, s16
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 ffd0 	bl	800585c <__pow5mult>
 80048bc:	ee08 0a10 	vmov	s16, r0
 80048c0:	2101      	movs	r1, #1
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 ff0a 	bl	80056dc <__i2b>
 80048c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	4606      	mov	r6, r0
 80048ce:	f340 8088 	ble.w	80049e2 <_dtoa_r+0x8c2>
 80048d2:	461a      	mov	r2, r3
 80048d4:	4601      	mov	r1, r0
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 ffc0 	bl	800585c <__pow5mult>
 80048dc:	9b06      	ldr	r3, [sp, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	4606      	mov	r6, r0
 80048e2:	f340 8081 	ble.w	80049e8 <_dtoa_r+0x8c8>
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	6933      	ldr	r3, [r6, #16]
 80048ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048f0:	6918      	ldr	r0, [r3, #16]
 80048f2:	f000 fea3 	bl	800563c <__hi0bits>
 80048f6:	f1c0 0020 	rsb	r0, r0, #32
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	4418      	add	r0, r3
 80048fe:	f010 001f 	ands.w	r0, r0, #31
 8004902:	f000 8092 	beq.w	8004a2a <_dtoa_r+0x90a>
 8004906:	f1c0 0320 	rsb	r3, r0, #32
 800490a:	2b04      	cmp	r3, #4
 800490c:	f340 808a 	ble.w	8004a24 <_dtoa_r+0x904>
 8004910:	f1c0 001c 	rsb	r0, r0, #28
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	4403      	add	r3, r0
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	9b05      	ldr	r3, [sp, #20]
 800491c:	4403      	add	r3, r0
 800491e:	4405      	add	r5, r0
 8004920:	9305      	str	r3, [sp, #20]
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	dd07      	ble.n	8004938 <_dtoa_r+0x818>
 8004928:	ee18 1a10 	vmov	r1, s16
 800492c:	461a      	mov	r2, r3
 800492e:	4620      	mov	r0, r4
 8004930:	f000 ffee 	bl	8005910 <__lshift>
 8004934:	ee08 0a10 	vmov	s16, r0
 8004938:	9b05      	ldr	r3, [sp, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	dd05      	ble.n	800494a <_dtoa_r+0x82a>
 800493e:	4631      	mov	r1, r6
 8004940:	461a      	mov	r2, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f000 ffe4 	bl	8005910 <__lshift>
 8004948:	4606      	mov	r6, r0
 800494a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d06e      	beq.n	8004a2e <_dtoa_r+0x90e>
 8004950:	ee18 0a10 	vmov	r0, s16
 8004954:	4631      	mov	r1, r6
 8004956:	f001 f84b 	bl	80059f0 <__mcmp>
 800495a:	2800      	cmp	r0, #0
 800495c:	da67      	bge.n	8004a2e <_dtoa_r+0x90e>
 800495e:	9b00      	ldr	r3, [sp, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	ee18 1a10 	vmov	r1, s16
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	220a      	movs	r2, #10
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fdd5 	bl	800551c <__multadd>
 8004972:	9b08      	ldr	r3, [sp, #32]
 8004974:	ee08 0a10 	vmov	s16, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 81b1 	beq.w	8004ce0 <_dtoa_r+0xbc0>
 800497e:	2300      	movs	r3, #0
 8004980:	4639      	mov	r1, r7
 8004982:	220a      	movs	r2, #10
 8004984:	4620      	mov	r0, r4
 8004986:	f000 fdc9 	bl	800551c <__multadd>
 800498a:	9b02      	ldr	r3, [sp, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	4607      	mov	r7, r0
 8004990:	f300 808e 	bgt.w	8004ab0 <_dtoa_r+0x990>
 8004994:	9b06      	ldr	r3, [sp, #24]
 8004996:	2b02      	cmp	r3, #2
 8004998:	dc51      	bgt.n	8004a3e <_dtoa_r+0x91e>
 800499a:	e089      	b.n	8004ab0 <_dtoa_r+0x990>
 800499c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800499e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049a2:	e74b      	b.n	800483c <_dtoa_r+0x71c>
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	1e5e      	subs	r6, r3, #1
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	42b3      	cmp	r3, r6
 80049ac:	bfbf      	itttt	lt
 80049ae:	9b07      	ldrlt	r3, [sp, #28]
 80049b0:	9607      	strlt	r6, [sp, #28]
 80049b2:	1af2      	sublt	r2, r6, r3
 80049b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049b6:	bfb6      	itet	lt
 80049b8:	189b      	addlt	r3, r3, r2
 80049ba:	1b9e      	subge	r6, r3, r6
 80049bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	bfb8      	it	lt
 80049c2:	2600      	movlt	r6, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bfb7      	itett	lt
 80049c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80049cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80049d0:	1a9d      	sublt	r5, r3, r2
 80049d2:	2300      	movlt	r3, #0
 80049d4:	e734      	b.n	8004840 <_dtoa_r+0x720>
 80049d6:	9e07      	ldr	r6, [sp, #28]
 80049d8:	9d04      	ldr	r5, [sp, #16]
 80049da:	9f08      	ldr	r7, [sp, #32]
 80049dc:	e73b      	b.n	8004856 <_dtoa_r+0x736>
 80049de:	9a07      	ldr	r2, [sp, #28]
 80049e0:	e767      	b.n	80048b2 <_dtoa_r+0x792>
 80049e2:	9b06      	ldr	r3, [sp, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	dc18      	bgt.n	8004a1a <_dtoa_r+0x8fa>
 80049e8:	f1ba 0f00 	cmp.w	sl, #0
 80049ec:	d115      	bne.n	8004a1a <_dtoa_r+0x8fa>
 80049ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049f2:	b993      	cbnz	r3, 8004a1a <_dtoa_r+0x8fa>
 80049f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	051b      	lsls	r3, r3, #20
 80049fc:	b183      	cbz	r3, 8004a20 <_dtoa_r+0x900>
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	3301      	adds	r3, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	9b05      	ldr	r3, [sp, #20]
 8004a06:	3301      	adds	r3, #1
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	f04f 0801 	mov.w	r8, #1
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f af6a 	bne.w	80048ea <_dtoa_r+0x7ca>
 8004a16:	2001      	movs	r0, #1
 8004a18:	e76f      	b.n	80048fa <_dtoa_r+0x7da>
 8004a1a:	f04f 0800 	mov.w	r8, #0
 8004a1e:	e7f6      	b.n	8004a0e <_dtoa_r+0x8ee>
 8004a20:	4698      	mov	r8, r3
 8004a22:	e7f4      	b.n	8004a0e <_dtoa_r+0x8ee>
 8004a24:	f43f af7d 	beq.w	8004922 <_dtoa_r+0x802>
 8004a28:	4618      	mov	r0, r3
 8004a2a:	301c      	adds	r0, #28
 8004a2c:	e772      	b.n	8004914 <_dtoa_r+0x7f4>
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc37      	bgt.n	8004aa4 <_dtoa_r+0x984>
 8004a34:	9b06      	ldr	r3, [sp, #24]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	dd34      	ble.n	8004aa4 <_dtoa_r+0x984>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	9302      	str	r3, [sp, #8]
 8004a3e:	9b02      	ldr	r3, [sp, #8]
 8004a40:	b96b      	cbnz	r3, 8004a5e <_dtoa_r+0x93e>
 8004a42:	4631      	mov	r1, r6
 8004a44:	2205      	movs	r2, #5
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 fd68 	bl	800551c <__multadd>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4606      	mov	r6, r0
 8004a50:	ee18 0a10 	vmov	r0, s16
 8004a54:	f000 ffcc 	bl	80059f0 <__mcmp>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f73f adbb 	bgt.w	80045d4 <_dtoa_r+0x4b4>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	9d01      	ldr	r5, [sp, #4]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 fd33 	bl	80054d8 <_Bfree>
 8004a72:	2f00      	cmp	r7, #0
 8004a74:	f43f aea4 	beq.w	80047c0 <_dtoa_r+0x6a0>
 8004a78:	f1b8 0f00 	cmp.w	r8, #0
 8004a7c:	d005      	beq.n	8004a8a <_dtoa_r+0x96a>
 8004a7e:	45b8      	cmp	r8, r7
 8004a80:	d003      	beq.n	8004a8a <_dtoa_r+0x96a>
 8004a82:	4641      	mov	r1, r8
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 fd27 	bl	80054d8 <_Bfree>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fd23 	bl	80054d8 <_Bfree>
 8004a92:	e695      	b.n	80047c0 <_dtoa_r+0x6a0>
 8004a94:	2600      	movs	r6, #0
 8004a96:	4637      	mov	r7, r6
 8004a98:	e7e1      	b.n	8004a5e <_dtoa_r+0x93e>
 8004a9a:	9700      	str	r7, [sp, #0]
 8004a9c:	4637      	mov	r7, r6
 8004a9e:	e599      	b.n	80045d4 <_dtoa_r+0x4b4>
 8004aa0:	40240000 	.word	0x40240000
 8004aa4:	9b08      	ldr	r3, [sp, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80ca 	beq.w	8004c40 <_dtoa_r+0xb20>
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	dd05      	ble.n	8004ac0 <_dtoa_r+0x9a0>
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 ff29 	bl	8005910 <__lshift>
 8004abe:	4607      	mov	r7, r0
 8004ac0:	f1b8 0f00 	cmp.w	r8, #0
 8004ac4:	d05b      	beq.n	8004b7e <_dtoa_r+0xa5e>
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fcc5 	bl	8005458 <_Balloc>
 8004ace:	4605      	mov	r5, r0
 8004ad0:	b928      	cbnz	r0, 8004ade <_dtoa_r+0x9be>
 8004ad2:	4b87      	ldr	r3, [pc, #540]	; (8004cf0 <_dtoa_r+0xbd0>)
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ada:	f7ff bb3b 	b.w	8004154 <_dtoa_r+0x34>
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	3202      	adds	r2, #2
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	f107 010c 	add.w	r1, r7, #12
 8004ae8:	300c      	adds	r0, #12
 8004aea:	f000 fca7 	bl	800543c <memcpy>
 8004aee:	2201      	movs	r2, #1
 8004af0:	4629      	mov	r1, r5
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 ff0c 	bl	8005910 <__lshift>
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	f103 0901 	add.w	r9, r3, #1
 8004afe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	f00a 0301 	and.w	r3, sl, #1
 8004b0a:	46b8      	mov	r8, r7
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	4607      	mov	r7, r0
 8004b10:	4631      	mov	r1, r6
 8004b12:	ee18 0a10 	vmov	r0, s16
 8004b16:	f7ff fa75 	bl	8004004 <quorem>
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b22:	ee18 0a10 	vmov	r0, s16
 8004b26:	f000 ff63 	bl	80059f0 <__mcmp>
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	9003      	str	r0, [sp, #12]
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 ff79 	bl	8005a28 <__mdiff>
 8004b36:	68c2      	ldr	r2, [r0, #12]
 8004b38:	f109 3bff 	add.w	fp, r9, #4294967295
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	bb02      	cbnz	r2, 8004b82 <_dtoa_r+0xa62>
 8004b40:	4601      	mov	r1, r0
 8004b42:	ee18 0a10 	vmov	r0, s16
 8004b46:	f000 ff53 	bl	80059f0 <__mcmp>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4620      	mov	r0, r4
 8004b50:	9207      	str	r2, [sp, #28]
 8004b52:	f000 fcc1 	bl	80054d8 <_Bfree>
 8004b56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004b5a:	ea43 0102 	orr.w	r1, r3, r2
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	464d      	mov	r5, r9
 8004b64:	d10f      	bne.n	8004b86 <_dtoa_r+0xa66>
 8004b66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b6a:	d02a      	beq.n	8004bc2 <_dtoa_r+0xaa2>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dd02      	ble.n	8004b78 <_dtoa_r+0xa58>
 8004b72:	9b02      	ldr	r3, [sp, #8]
 8004b74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004b78:	f88b a000 	strb.w	sl, [fp]
 8004b7c:	e775      	b.n	8004a6a <_dtoa_r+0x94a>
 8004b7e:	4638      	mov	r0, r7
 8004b80:	e7ba      	b.n	8004af8 <_dtoa_r+0x9d8>
 8004b82:	2201      	movs	r2, #1
 8004b84:	e7e2      	b.n	8004b4c <_dtoa_r+0xa2c>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db04      	blt.n	8004b96 <_dtoa_r+0xa76>
 8004b8c:	9906      	ldr	r1, [sp, #24]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	9904      	ldr	r1, [sp, #16]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	d122      	bne.n	8004bdc <_dtoa_r+0xabc>
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	ddee      	ble.n	8004b78 <_dtoa_r+0xa58>
 8004b9a:	ee18 1a10 	vmov	r1, s16
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 feb5 	bl	8005910 <__lshift>
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	ee08 0a10 	vmov	s16, r0
 8004bac:	f000 ff20 	bl	80059f0 <__mcmp>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	dc03      	bgt.n	8004bbc <_dtoa_r+0xa9c>
 8004bb4:	d1e0      	bne.n	8004b78 <_dtoa_r+0xa58>
 8004bb6:	f01a 0f01 	tst.w	sl, #1
 8004bba:	d0dd      	beq.n	8004b78 <_dtoa_r+0xa58>
 8004bbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bc0:	d1d7      	bne.n	8004b72 <_dtoa_r+0xa52>
 8004bc2:	2339      	movs	r3, #57	; 0x39
 8004bc4:	f88b 3000 	strb.w	r3, [fp]
 8004bc8:	462b      	mov	r3, r5
 8004bca:	461d      	mov	r5, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004bd2:	2a39      	cmp	r2, #57	; 0x39
 8004bd4:	d071      	beq.n	8004cba <_dtoa_r+0xb9a>
 8004bd6:	3201      	adds	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e746      	b.n	8004a6a <_dtoa_r+0x94a>
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	dd07      	ble.n	8004bf0 <_dtoa_r+0xad0>
 8004be0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004be4:	d0ed      	beq.n	8004bc2 <_dtoa_r+0xaa2>
 8004be6:	f10a 0301 	add.w	r3, sl, #1
 8004bea:	f88b 3000 	strb.w	r3, [fp]
 8004bee:	e73c      	b.n	8004a6a <_dtoa_r+0x94a>
 8004bf0:	9b05      	ldr	r3, [sp, #20]
 8004bf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004bf6:	4599      	cmp	r9, r3
 8004bf8:	d047      	beq.n	8004c8a <_dtoa_r+0xb6a>
 8004bfa:	ee18 1a10 	vmov	r1, s16
 8004bfe:	2300      	movs	r3, #0
 8004c00:	220a      	movs	r2, #10
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 fc8a 	bl	800551c <__multadd>
 8004c08:	45b8      	cmp	r8, r7
 8004c0a:	ee08 0a10 	vmov	s16, r0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	f04f 020a 	mov.w	r2, #10
 8004c16:	4641      	mov	r1, r8
 8004c18:	4620      	mov	r0, r4
 8004c1a:	d106      	bne.n	8004c2a <_dtoa_r+0xb0a>
 8004c1c:	f000 fc7e 	bl	800551c <__multadd>
 8004c20:	4680      	mov	r8, r0
 8004c22:	4607      	mov	r7, r0
 8004c24:	f109 0901 	add.w	r9, r9, #1
 8004c28:	e772      	b.n	8004b10 <_dtoa_r+0x9f0>
 8004c2a:	f000 fc77 	bl	800551c <__multadd>
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4680      	mov	r8, r0
 8004c32:	2300      	movs	r3, #0
 8004c34:	220a      	movs	r2, #10
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 fc70 	bl	800551c <__multadd>
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	e7f1      	b.n	8004c24 <_dtoa_r+0xb04>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	9302      	str	r3, [sp, #8]
 8004c44:	9d01      	ldr	r5, [sp, #4]
 8004c46:	ee18 0a10 	vmov	r0, s16
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	f7ff f9da 	bl	8004004 <quorem>
 8004c50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	f805 ab01 	strb.w	sl, [r5], #1
 8004c5a:	1aea      	subs	r2, r5, r3
 8004c5c:	9b02      	ldr	r3, [sp, #8]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	dd09      	ble.n	8004c76 <_dtoa_r+0xb56>
 8004c62:	ee18 1a10 	vmov	r1, s16
 8004c66:	2300      	movs	r3, #0
 8004c68:	220a      	movs	r2, #10
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 fc56 	bl	800551c <__multadd>
 8004c70:	ee08 0a10 	vmov	s16, r0
 8004c74:	e7e7      	b.n	8004c46 <_dtoa_r+0xb26>
 8004c76:	9b02      	ldr	r3, [sp, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfc8      	it	gt
 8004c7c:	461d      	movgt	r5, r3
 8004c7e:	9b01      	ldr	r3, [sp, #4]
 8004c80:	bfd8      	it	le
 8004c82:	2501      	movle	r5, #1
 8004c84:	441d      	add	r5, r3
 8004c86:	f04f 0800 	mov.w	r8, #0
 8004c8a:	ee18 1a10 	vmov	r1, s16
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fe3d 	bl	8005910 <__lshift>
 8004c96:	4631      	mov	r1, r6
 8004c98:	ee08 0a10 	vmov	s16, r0
 8004c9c:	f000 fea8 	bl	80059f0 <__mcmp>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc91      	bgt.n	8004bc8 <_dtoa_r+0xaa8>
 8004ca4:	d102      	bne.n	8004cac <_dtoa_r+0xb8c>
 8004ca6:	f01a 0f01 	tst.w	sl, #1
 8004caa:	d18d      	bne.n	8004bc8 <_dtoa_r+0xaa8>
 8004cac:	462b      	mov	r3, r5
 8004cae:	461d      	mov	r5, r3
 8004cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cb4:	2a30      	cmp	r2, #48	; 0x30
 8004cb6:	d0fa      	beq.n	8004cae <_dtoa_r+0xb8e>
 8004cb8:	e6d7      	b.n	8004a6a <_dtoa_r+0x94a>
 8004cba:	9a01      	ldr	r2, [sp, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d184      	bne.n	8004bca <_dtoa_r+0xaaa>
 8004cc0:	9b00      	ldr	r3, [sp, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2331      	movs	r3, #49	; 0x31
 8004cc8:	7013      	strb	r3, [r2, #0]
 8004cca:	e6ce      	b.n	8004a6a <_dtoa_r+0x94a>
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <_dtoa_r+0xbd4>)
 8004cce:	f7ff ba95 	b.w	80041fc <_dtoa_r+0xdc>
 8004cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f aa6e 	bne.w	80041b6 <_dtoa_r+0x96>
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <_dtoa_r+0xbd8>)
 8004cdc:	f7ff ba8e 	b.w	80041fc <_dtoa_r+0xdc>
 8004ce0:	9b02      	ldr	r3, [sp, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dcae      	bgt.n	8004c44 <_dtoa_r+0xb24>
 8004ce6:	9b06      	ldr	r3, [sp, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f73f aea8 	bgt.w	8004a3e <_dtoa_r+0x91e>
 8004cee:	e7a9      	b.n	8004c44 <_dtoa_r+0xb24>
 8004cf0:	080079b8 	.word	0x080079b8
 8004cf4:	08007bb1 	.word	0x08007bb1
 8004cf8:	08007939 	.word	0x08007939

08004cfc <rshift>:
 8004cfc:	6903      	ldr	r3, [r0, #16]
 8004cfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d0a:	f100 0414 	add.w	r4, r0, #20
 8004d0e:	dd45      	ble.n	8004d9c <rshift+0xa0>
 8004d10:	f011 011f 	ands.w	r1, r1, #31
 8004d14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d1c:	d10c      	bne.n	8004d38 <rshift+0x3c>
 8004d1e:	f100 0710 	add.w	r7, r0, #16
 8004d22:	4629      	mov	r1, r5
 8004d24:	42b1      	cmp	r1, r6
 8004d26:	d334      	bcc.n	8004d92 <rshift+0x96>
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	1eea      	subs	r2, r5, #3
 8004d2e:	4296      	cmp	r6, r2
 8004d30:	bf38      	it	cc
 8004d32:	2300      	movcc	r3, #0
 8004d34:	4423      	add	r3, r4
 8004d36:	e015      	b.n	8004d64 <rshift+0x68>
 8004d38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d3c:	f1c1 0820 	rsb	r8, r1, #32
 8004d40:	40cf      	lsrs	r7, r1
 8004d42:	f105 0e04 	add.w	lr, r5, #4
 8004d46:	46a1      	mov	r9, r4
 8004d48:	4576      	cmp	r6, lr
 8004d4a:	46f4      	mov	ip, lr
 8004d4c:	d815      	bhi.n	8004d7a <rshift+0x7e>
 8004d4e:	1a9a      	subs	r2, r3, r2
 8004d50:	0092      	lsls	r2, r2, #2
 8004d52:	3a04      	subs	r2, #4
 8004d54:	3501      	adds	r5, #1
 8004d56:	42ae      	cmp	r6, r5
 8004d58:	bf38      	it	cc
 8004d5a:	2200      	movcc	r2, #0
 8004d5c:	18a3      	adds	r3, r4, r2
 8004d5e:	50a7      	str	r7, [r4, r2]
 8004d60:	b107      	cbz	r7, 8004d64 <rshift+0x68>
 8004d62:	3304      	adds	r3, #4
 8004d64:	1b1a      	subs	r2, r3, r4
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004d6c:	bf08      	it	eq
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	6102      	str	r2, [r0, #16]
 8004d72:	bf08      	it	eq
 8004d74:	6143      	streq	r3, [r0, #20]
 8004d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d7a:	f8dc c000 	ldr.w	ip, [ip]
 8004d7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8004d82:	ea4c 0707 	orr.w	r7, ip, r7
 8004d86:	f849 7b04 	str.w	r7, [r9], #4
 8004d8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d8e:	40cf      	lsrs	r7, r1
 8004d90:	e7da      	b.n	8004d48 <rshift+0x4c>
 8004d92:	f851 cb04 	ldr.w	ip, [r1], #4
 8004d96:	f847 cf04 	str.w	ip, [r7, #4]!
 8004d9a:	e7c3      	b.n	8004d24 <rshift+0x28>
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	e7e1      	b.n	8004d64 <rshift+0x68>

08004da0 <__hexdig_fun>:
 8004da0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004da4:	2b09      	cmp	r3, #9
 8004da6:	d802      	bhi.n	8004dae <__hexdig_fun+0xe>
 8004da8:	3820      	subs	r0, #32
 8004daa:	b2c0      	uxtb	r0, r0
 8004dac:	4770      	bx	lr
 8004dae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d801      	bhi.n	8004dba <__hexdig_fun+0x1a>
 8004db6:	3847      	subs	r0, #71	; 0x47
 8004db8:	e7f7      	b.n	8004daa <__hexdig_fun+0xa>
 8004dba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d801      	bhi.n	8004dc6 <__hexdig_fun+0x26>
 8004dc2:	3827      	subs	r0, #39	; 0x27
 8004dc4:	e7f1      	b.n	8004daa <__hexdig_fun+0xa>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	4770      	bx	lr
	...

08004dcc <__gethex>:
 8004dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd0:	ed2d 8b02 	vpush	{d8}
 8004dd4:	b089      	sub	sp, #36	; 0x24
 8004dd6:	ee08 0a10 	vmov	s16, r0
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	4bb4      	ldr	r3, [pc, #720]	; (80050b0 <__gethex+0x2e4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	468b      	mov	fp, r1
 8004de6:	4690      	mov	r8, r2
 8004de8:	f7fb fa04 	bl	80001f4 <strlen>
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	f8db 2000 	ldr.w	r2, [fp]
 8004df2:	4403      	add	r3, r0
 8004df4:	4682      	mov	sl, r0
 8004df6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	1c93      	adds	r3, r2, #2
 8004dfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004e02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004e06:	32fe      	adds	r2, #254	; 0xfe
 8004e08:	18d1      	adds	r1, r2, r3
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e10:	9100      	str	r1, [sp, #0]
 8004e12:	2830      	cmp	r0, #48	; 0x30
 8004e14:	d0f8      	beq.n	8004e08 <__gethex+0x3c>
 8004e16:	f7ff ffc3 	bl	8004da0 <__hexdig_fun>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d13a      	bne.n	8004e96 <__gethex+0xca>
 8004e20:	9901      	ldr	r1, [sp, #4]
 8004e22:	4652      	mov	r2, sl
 8004e24:	4638      	mov	r0, r7
 8004e26:	f001 fdb3 	bl	8006990 <strncmp>
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d168      	bne.n	8004f02 <__gethex+0x136>
 8004e30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004e34:	eb07 060a 	add.w	r6, r7, sl
 8004e38:	f7ff ffb2 	bl	8004da0 <__hexdig_fun>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d062      	beq.n	8004f06 <__gethex+0x13a>
 8004e40:	4633      	mov	r3, r6
 8004e42:	7818      	ldrb	r0, [r3, #0]
 8004e44:	2830      	cmp	r0, #48	; 0x30
 8004e46:	461f      	mov	r7, r3
 8004e48:	f103 0301 	add.w	r3, r3, #1
 8004e4c:	d0f9      	beq.n	8004e42 <__gethex+0x76>
 8004e4e:	f7ff ffa7 	bl	8004da0 <__hexdig_fun>
 8004e52:	2301      	movs	r3, #1
 8004e54:	fab0 f480 	clz	r4, r0
 8004e58:	0964      	lsrs	r4, r4, #5
 8004e5a:	4635      	mov	r5, r6
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	463a      	mov	r2, r7
 8004e60:	4616      	mov	r6, r2
 8004e62:	3201      	adds	r2, #1
 8004e64:	7830      	ldrb	r0, [r6, #0]
 8004e66:	f7ff ff9b 	bl	8004da0 <__hexdig_fun>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1f8      	bne.n	8004e60 <__gethex+0x94>
 8004e6e:	9901      	ldr	r1, [sp, #4]
 8004e70:	4652      	mov	r2, sl
 8004e72:	4630      	mov	r0, r6
 8004e74:	f001 fd8c 	bl	8006990 <strncmp>
 8004e78:	b980      	cbnz	r0, 8004e9c <__gethex+0xd0>
 8004e7a:	b94d      	cbnz	r5, 8004e90 <__gethex+0xc4>
 8004e7c:	eb06 050a 	add.w	r5, r6, sl
 8004e80:	462a      	mov	r2, r5
 8004e82:	4616      	mov	r6, r2
 8004e84:	3201      	adds	r2, #1
 8004e86:	7830      	ldrb	r0, [r6, #0]
 8004e88:	f7ff ff8a 	bl	8004da0 <__hexdig_fun>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d1f8      	bne.n	8004e82 <__gethex+0xb6>
 8004e90:	1bad      	subs	r5, r5, r6
 8004e92:	00ad      	lsls	r5, r5, #2
 8004e94:	e004      	b.n	8004ea0 <__gethex+0xd4>
 8004e96:	2400      	movs	r4, #0
 8004e98:	4625      	mov	r5, r4
 8004e9a:	e7e0      	b.n	8004e5e <__gethex+0x92>
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	d1f7      	bne.n	8004e90 <__gethex+0xc4>
 8004ea0:	7833      	ldrb	r3, [r6, #0]
 8004ea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ea6:	2b50      	cmp	r3, #80	; 0x50
 8004ea8:	d13b      	bne.n	8004f22 <__gethex+0x156>
 8004eaa:	7873      	ldrb	r3, [r6, #1]
 8004eac:	2b2b      	cmp	r3, #43	; 0x2b
 8004eae:	d02c      	beq.n	8004f0a <__gethex+0x13e>
 8004eb0:	2b2d      	cmp	r3, #45	; 0x2d
 8004eb2:	d02e      	beq.n	8004f12 <__gethex+0x146>
 8004eb4:	1c71      	adds	r1, r6, #1
 8004eb6:	f04f 0900 	mov.w	r9, #0
 8004eba:	7808      	ldrb	r0, [r1, #0]
 8004ebc:	f7ff ff70 	bl	8004da0 <__hexdig_fun>
 8004ec0:	1e43      	subs	r3, r0, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b18      	cmp	r3, #24
 8004ec6:	d82c      	bhi.n	8004f22 <__gethex+0x156>
 8004ec8:	f1a0 0210 	sub.w	r2, r0, #16
 8004ecc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004ed0:	f7ff ff66 	bl	8004da0 <__hexdig_fun>
 8004ed4:	1e43      	subs	r3, r0, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b18      	cmp	r3, #24
 8004eda:	d91d      	bls.n	8004f18 <__gethex+0x14c>
 8004edc:	f1b9 0f00 	cmp.w	r9, #0
 8004ee0:	d000      	beq.n	8004ee4 <__gethex+0x118>
 8004ee2:	4252      	negs	r2, r2
 8004ee4:	4415      	add	r5, r2
 8004ee6:	f8cb 1000 	str.w	r1, [fp]
 8004eea:	b1e4      	cbz	r4, 8004f26 <__gethex+0x15a>
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf14      	ite	ne
 8004ef2:	2700      	movne	r7, #0
 8004ef4:	2706      	moveq	r7, #6
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	b009      	add	sp, #36	; 0x24
 8004efa:	ecbd 8b02 	vpop	{d8}
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	463e      	mov	r6, r7
 8004f04:	4625      	mov	r5, r4
 8004f06:	2401      	movs	r4, #1
 8004f08:	e7ca      	b.n	8004ea0 <__gethex+0xd4>
 8004f0a:	f04f 0900 	mov.w	r9, #0
 8004f0e:	1cb1      	adds	r1, r6, #2
 8004f10:	e7d3      	b.n	8004eba <__gethex+0xee>
 8004f12:	f04f 0901 	mov.w	r9, #1
 8004f16:	e7fa      	b.n	8004f0e <__gethex+0x142>
 8004f18:	230a      	movs	r3, #10
 8004f1a:	fb03 0202 	mla	r2, r3, r2, r0
 8004f1e:	3a10      	subs	r2, #16
 8004f20:	e7d4      	b.n	8004ecc <__gethex+0x100>
 8004f22:	4631      	mov	r1, r6
 8004f24:	e7df      	b.n	8004ee6 <__gethex+0x11a>
 8004f26:	1bf3      	subs	r3, r6, r7
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	2b07      	cmp	r3, #7
 8004f2e:	dc0b      	bgt.n	8004f48 <__gethex+0x17c>
 8004f30:	ee18 0a10 	vmov	r0, s16
 8004f34:	f000 fa90 	bl	8005458 <_Balloc>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	b940      	cbnz	r0, 8004f4e <__gethex+0x182>
 8004f3c:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <__gethex+0x2e8>)
 8004f3e:	4602      	mov	r2, r0
 8004f40:	21de      	movs	r1, #222	; 0xde
 8004f42:	485d      	ldr	r0, [pc, #372]	; (80050b8 <__gethex+0x2ec>)
 8004f44:	f001 fdf4 	bl	8006b30 <__assert_func>
 8004f48:	3101      	adds	r1, #1
 8004f4a:	105b      	asrs	r3, r3, #1
 8004f4c:	e7ee      	b.n	8004f2c <__gethex+0x160>
 8004f4e:	f100 0914 	add.w	r9, r0, #20
 8004f52:	f04f 0b00 	mov.w	fp, #0
 8004f56:	f1ca 0301 	rsb	r3, sl, #1
 8004f5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f5e:	f8cd b000 	str.w	fp, [sp]
 8004f62:	9306      	str	r3, [sp, #24]
 8004f64:	42b7      	cmp	r7, r6
 8004f66:	d340      	bcc.n	8004fea <__gethex+0x21e>
 8004f68:	9802      	ldr	r0, [sp, #8]
 8004f6a:	9b00      	ldr	r3, [sp, #0]
 8004f6c:	f840 3b04 	str.w	r3, [r0], #4
 8004f70:	eba0 0009 	sub.w	r0, r0, r9
 8004f74:	1080      	asrs	r0, r0, #2
 8004f76:	0146      	lsls	r6, r0, #5
 8004f78:	6120      	str	r0, [r4, #16]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb5e 	bl	800563c <__hi0bits>
 8004f80:	1a30      	subs	r0, r6, r0
 8004f82:	f8d8 6000 	ldr.w	r6, [r8]
 8004f86:	42b0      	cmp	r0, r6
 8004f88:	dd63      	ble.n	8005052 <__gethex+0x286>
 8004f8a:	1b87      	subs	r7, r0, r6
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 ff02 	bl	8005d98 <__any_on>
 8004f94:	4682      	mov	sl, r0
 8004f96:	b1a8      	cbz	r0, 8004fc4 <__gethex+0x1f8>
 8004f98:	1e7b      	subs	r3, r7, #1
 8004f9a:	1159      	asrs	r1, r3, #5
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004fa4:	f04f 0a01 	mov.w	sl, #1
 8004fa8:	fa0a f202 	lsl.w	r2, sl, r2
 8004fac:	420a      	tst	r2, r1
 8004fae:	d009      	beq.n	8004fc4 <__gethex+0x1f8>
 8004fb0:	4553      	cmp	r3, sl
 8004fb2:	dd05      	ble.n	8004fc0 <__gethex+0x1f4>
 8004fb4:	1eb9      	subs	r1, r7, #2
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 feee 	bl	8005d98 <__any_on>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d145      	bne.n	800504c <__gethex+0x280>
 8004fc0:	f04f 0a02 	mov.w	sl, #2
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fe98 	bl	8004cfc <rshift>
 8004fcc:	443d      	add	r5, r7
 8004fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fd2:	42ab      	cmp	r3, r5
 8004fd4:	da4c      	bge.n	8005070 <__gethex+0x2a4>
 8004fd6:	ee18 0a10 	vmov	r0, s16
 8004fda:	4621      	mov	r1, r4
 8004fdc:	f000 fa7c 	bl	80054d8 <_Bfree>
 8004fe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	27a3      	movs	r7, #163	; 0xa3
 8004fe8:	e785      	b.n	8004ef6 <__gethex+0x12a>
 8004fea:	1e73      	subs	r3, r6, #1
 8004fec:	9a05      	ldr	r2, [sp, #20]
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d019      	beq.n	800502c <__gethex+0x260>
 8004ff8:	f1bb 0f20 	cmp.w	fp, #32
 8004ffc:	d107      	bne.n	800500e <__gethex+0x242>
 8004ffe:	9b02      	ldr	r3, [sp, #8]
 8005000:	9a00      	ldr	r2, [sp, #0]
 8005002:	f843 2b04 	str.w	r2, [r3], #4
 8005006:	9302      	str	r3, [sp, #8]
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	469b      	mov	fp, r3
 800500e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005012:	f7ff fec5 	bl	8004da0 <__hexdig_fun>
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	f000 000f 	and.w	r0, r0, #15
 800501c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005020:	4303      	orrs	r3, r0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	f10b 0b04 	add.w	fp, fp, #4
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	e00d      	b.n	8005048 <__gethex+0x27c>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	9a06      	ldr	r2, [sp, #24]
 8005030:	4413      	add	r3, r2
 8005032:	42bb      	cmp	r3, r7
 8005034:	d3e0      	bcc.n	8004ff8 <__gethex+0x22c>
 8005036:	4618      	mov	r0, r3
 8005038:	9901      	ldr	r1, [sp, #4]
 800503a:	9307      	str	r3, [sp, #28]
 800503c:	4652      	mov	r2, sl
 800503e:	f001 fca7 	bl	8006990 <strncmp>
 8005042:	9b07      	ldr	r3, [sp, #28]
 8005044:	2800      	cmp	r0, #0
 8005046:	d1d7      	bne.n	8004ff8 <__gethex+0x22c>
 8005048:	461e      	mov	r6, r3
 800504a:	e78b      	b.n	8004f64 <__gethex+0x198>
 800504c:	f04f 0a03 	mov.w	sl, #3
 8005050:	e7b8      	b.n	8004fc4 <__gethex+0x1f8>
 8005052:	da0a      	bge.n	800506a <__gethex+0x29e>
 8005054:	1a37      	subs	r7, r6, r0
 8005056:	4621      	mov	r1, r4
 8005058:	ee18 0a10 	vmov	r0, s16
 800505c:	463a      	mov	r2, r7
 800505e:	f000 fc57 	bl	8005910 <__lshift>
 8005062:	1bed      	subs	r5, r5, r7
 8005064:	4604      	mov	r4, r0
 8005066:	f100 0914 	add.w	r9, r0, #20
 800506a:	f04f 0a00 	mov.w	sl, #0
 800506e:	e7ae      	b.n	8004fce <__gethex+0x202>
 8005070:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005074:	42a8      	cmp	r0, r5
 8005076:	dd72      	ble.n	800515e <__gethex+0x392>
 8005078:	1b45      	subs	r5, r0, r5
 800507a:	42ae      	cmp	r6, r5
 800507c:	dc36      	bgt.n	80050ec <__gethex+0x320>
 800507e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d02a      	beq.n	80050dc <__gethex+0x310>
 8005086:	2b03      	cmp	r3, #3
 8005088:	d02c      	beq.n	80050e4 <__gethex+0x318>
 800508a:	2b01      	cmp	r3, #1
 800508c:	d11c      	bne.n	80050c8 <__gethex+0x2fc>
 800508e:	42ae      	cmp	r6, r5
 8005090:	d11a      	bne.n	80050c8 <__gethex+0x2fc>
 8005092:	2e01      	cmp	r6, #1
 8005094:	d112      	bne.n	80050bc <__gethex+0x2f0>
 8005096:	9a04      	ldr	r2, [sp, #16]
 8005098:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	f8c9 3000 	str.w	r3, [r9]
 80050a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a8:	2762      	movs	r7, #98	; 0x62
 80050aa:	601c      	str	r4, [r3, #0]
 80050ac:	e723      	b.n	8004ef6 <__gethex+0x12a>
 80050ae:	bf00      	nop
 80050b0:	08007a30 	.word	0x08007a30
 80050b4:	080079b8 	.word	0x080079b8
 80050b8:	080079c9 	.word	0x080079c9
 80050bc:	1e71      	subs	r1, r6, #1
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fe6a 	bl	8005d98 <__any_on>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d1e6      	bne.n	8005096 <__gethex+0x2ca>
 80050c8:	ee18 0a10 	vmov	r0, s16
 80050cc:	4621      	mov	r1, r4
 80050ce:	f000 fa03 	bl	80054d8 <_Bfree>
 80050d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050d4:	2300      	movs	r3, #0
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	2750      	movs	r7, #80	; 0x50
 80050da:	e70c      	b.n	8004ef6 <__gethex+0x12a>
 80050dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f2      	bne.n	80050c8 <__gethex+0x2fc>
 80050e2:	e7d8      	b.n	8005096 <__gethex+0x2ca>
 80050e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1d5      	bne.n	8005096 <__gethex+0x2ca>
 80050ea:	e7ed      	b.n	80050c8 <__gethex+0x2fc>
 80050ec:	1e6f      	subs	r7, r5, #1
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	d131      	bne.n	8005158 <__gethex+0x38c>
 80050f4:	b127      	cbz	r7, 8005100 <__gethex+0x334>
 80050f6:	4639      	mov	r1, r7
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 fe4d 	bl	8005d98 <__any_on>
 80050fe:	4682      	mov	sl, r0
 8005100:	117b      	asrs	r3, r7, #5
 8005102:	2101      	movs	r1, #1
 8005104:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005108:	f007 071f 	and.w	r7, r7, #31
 800510c:	fa01 f707 	lsl.w	r7, r1, r7
 8005110:	421f      	tst	r7, r3
 8005112:	4629      	mov	r1, r5
 8005114:	4620      	mov	r0, r4
 8005116:	bf18      	it	ne
 8005118:	f04a 0a02 	orrne.w	sl, sl, #2
 800511c:	1b76      	subs	r6, r6, r5
 800511e:	f7ff fded 	bl	8004cfc <rshift>
 8005122:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005126:	2702      	movs	r7, #2
 8005128:	f1ba 0f00 	cmp.w	sl, #0
 800512c:	d048      	beq.n	80051c0 <__gethex+0x3f4>
 800512e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d015      	beq.n	8005162 <__gethex+0x396>
 8005136:	2b03      	cmp	r3, #3
 8005138:	d017      	beq.n	800516a <__gethex+0x39e>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d109      	bne.n	8005152 <__gethex+0x386>
 800513e:	f01a 0f02 	tst.w	sl, #2
 8005142:	d006      	beq.n	8005152 <__gethex+0x386>
 8005144:	f8d9 0000 	ldr.w	r0, [r9]
 8005148:	ea4a 0a00 	orr.w	sl, sl, r0
 800514c:	f01a 0f01 	tst.w	sl, #1
 8005150:	d10e      	bne.n	8005170 <__gethex+0x3a4>
 8005152:	f047 0710 	orr.w	r7, r7, #16
 8005156:	e033      	b.n	80051c0 <__gethex+0x3f4>
 8005158:	f04f 0a01 	mov.w	sl, #1
 800515c:	e7d0      	b.n	8005100 <__gethex+0x334>
 800515e:	2701      	movs	r7, #1
 8005160:	e7e2      	b.n	8005128 <__gethex+0x35c>
 8005162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005164:	f1c3 0301 	rsb	r3, r3, #1
 8005168:	9315      	str	r3, [sp, #84]	; 0x54
 800516a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <__gethex+0x386>
 8005170:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005174:	f104 0314 	add.w	r3, r4, #20
 8005178:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800517c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005180:	f04f 0c00 	mov.w	ip, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f853 2b04 	ldr.w	r2, [r3], #4
 800518a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800518e:	d01c      	beq.n	80051ca <__gethex+0x3fe>
 8005190:	3201      	adds	r2, #1
 8005192:	6002      	str	r2, [r0, #0]
 8005194:	2f02      	cmp	r7, #2
 8005196:	f104 0314 	add.w	r3, r4, #20
 800519a:	d13f      	bne.n	800521c <__gethex+0x450>
 800519c:	f8d8 2000 	ldr.w	r2, [r8]
 80051a0:	3a01      	subs	r2, #1
 80051a2:	42b2      	cmp	r2, r6
 80051a4:	d10a      	bne.n	80051bc <__gethex+0x3f0>
 80051a6:	1171      	asrs	r1, r6, #5
 80051a8:	2201      	movs	r2, #1
 80051aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051ae:	f006 061f 	and.w	r6, r6, #31
 80051b2:	fa02 f606 	lsl.w	r6, r2, r6
 80051b6:	421e      	tst	r6, r3
 80051b8:	bf18      	it	ne
 80051ba:	4617      	movne	r7, r2
 80051bc:	f047 0720 	orr.w	r7, r7, #32
 80051c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051c2:	601c      	str	r4, [r3, #0]
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	601d      	str	r5, [r3, #0]
 80051c8:	e695      	b.n	8004ef6 <__gethex+0x12a>
 80051ca:	4299      	cmp	r1, r3
 80051cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80051d0:	d8d8      	bhi.n	8005184 <__gethex+0x3b8>
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	459b      	cmp	fp, r3
 80051d6:	db19      	blt.n	800520c <__gethex+0x440>
 80051d8:	6861      	ldr	r1, [r4, #4]
 80051da:	ee18 0a10 	vmov	r0, s16
 80051de:	3101      	adds	r1, #1
 80051e0:	f000 f93a 	bl	8005458 <_Balloc>
 80051e4:	4681      	mov	r9, r0
 80051e6:	b918      	cbnz	r0, 80051f0 <__gethex+0x424>
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <__gethex+0x488>)
 80051ea:	4602      	mov	r2, r0
 80051ec:	2184      	movs	r1, #132	; 0x84
 80051ee:	e6a8      	b.n	8004f42 <__gethex+0x176>
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	3202      	adds	r2, #2
 80051f4:	f104 010c 	add.w	r1, r4, #12
 80051f8:	0092      	lsls	r2, r2, #2
 80051fa:	300c      	adds	r0, #12
 80051fc:	f000 f91e 	bl	800543c <memcpy>
 8005200:	4621      	mov	r1, r4
 8005202:	ee18 0a10 	vmov	r0, s16
 8005206:	f000 f967 	bl	80054d8 <_Bfree>
 800520a:	464c      	mov	r4, r9
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005214:	6122      	str	r2, [r4, #16]
 8005216:	2201      	movs	r2, #1
 8005218:	615a      	str	r2, [r3, #20]
 800521a:	e7bb      	b.n	8005194 <__gethex+0x3c8>
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	455a      	cmp	r2, fp
 8005220:	dd0b      	ble.n	800523a <__gethex+0x46e>
 8005222:	2101      	movs	r1, #1
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff fd69 	bl	8004cfc <rshift>
 800522a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800522e:	3501      	adds	r5, #1
 8005230:	42ab      	cmp	r3, r5
 8005232:	f6ff aed0 	blt.w	8004fd6 <__gethex+0x20a>
 8005236:	2701      	movs	r7, #1
 8005238:	e7c0      	b.n	80051bc <__gethex+0x3f0>
 800523a:	f016 061f 	ands.w	r6, r6, #31
 800523e:	d0fa      	beq.n	8005236 <__gethex+0x46a>
 8005240:	4453      	add	r3, sl
 8005242:	f1c6 0620 	rsb	r6, r6, #32
 8005246:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800524a:	f000 f9f7 	bl	800563c <__hi0bits>
 800524e:	42b0      	cmp	r0, r6
 8005250:	dbe7      	blt.n	8005222 <__gethex+0x456>
 8005252:	e7f0      	b.n	8005236 <__gethex+0x46a>
 8005254:	080079b8 	.word	0x080079b8

08005258 <L_shift>:
 8005258:	f1c2 0208 	rsb	r2, r2, #8
 800525c:	0092      	lsls	r2, r2, #2
 800525e:	b570      	push	{r4, r5, r6, lr}
 8005260:	f1c2 0620 	rsb	r6, r2, #32
 8005264:	6843      	ldr	r3, [r0, #4]
 8005266:	6804      	ldr	r4, [r0, #0]
 8005268:	fa03 f506 	lsl.w	r5, r3, r6
 800526c:	432c      	orrs	r4, r5
 800526e:	40d3      	lsrs	r3, r2
 8005270:	6004      	str	r4, [r0, #0]
 8005272:	f840 3f04 	str.w	r3, [r0, #4]!
 8005276:	4288      	cmp	r0, r1
 8005278:	d3f4      	bcc.n	8005264 <L_shift+0xc>
 800527a:	bd70      	pop	{r4, r5, r6, pc}

0800527c <__match>:
 800527c:	b530      	push	{r4, r5, lr}
 800527e:	6803      	ldr	r3, [r0, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	b914      	cbnz	r4, 800528e <__match+0x12>
 8005288:	6003      	str	r3, [r0, #0]
 800528a:	2001      	movs	r0, #1
 800528c:	bd30      	pop	{r4, r5, pc}
 800528e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005292:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005296:	2d19      	cmp	r5, #25
 8005298:	bf98      	it	ls
 800529a:	3220      	addls	r2, #32
 800529c:	42a2      	cmp	r2, r4
 800529e:	d0f0      	beq.n	8005282 <__match+0x6>
 80052a0:	2000      	movs	r0, #0
 80052a2:	e7f3      	b.n	800528c <__match+0x10>

080052a4 <__hexnan>:
 80052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	115e      	asrs	r6, r3, #5
 80052ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052b0:	f013 031f 	ands.w	r3, r3, #31
 80052b4:	b087      	sub	sp, #28
 80052b6:	bf18      	it	ne
 80052b8:	3604      	addne	r6, #4
 80052ba:	2500      	movs	r5, #0
 80052bc:	1f37      	subs	r7, r6, #4
 80052be:	4690      	mov	r8, r2
 80052c0:	6802      	ldr	r2, [r0, #0]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	4682      	mov	sl, r0
 80052c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80052ca:	46b9      	mov	r9, r7
 80052cc:	463c      	mov	r4, r7
 80052ce:	9502      	str	r5, [sp, #8]
 80052d0:	46ab      	mov	fp, r5
 80052d2:	7851      	ldrb	r1, [r2, #1]
 80052d4:	1c53      	adds	r3, r2, #1
 80052d6:	9303      	str	r3, [sp, #12]
 80052d8:	b341      	cbz	r1, 800532c <__hexnan+0x88>
 80052da:	4608      	mov	r0, r1
 80052dc:	9205      	str	r2, [sp, #20]
 80052de:	9104      	str	r1, [sp, #16]
 80052e0:	f7ff fd5e 	bl	8004da0 <__hexdig_fun>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d14f      	bne.n	8005388 <__hexnan+0xe4>
 80052e8:	9904      	ldr	r1, [sp, #16]
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	2920      	cmp	r1, #32
 80052ee:	d818      	bhi.n	8005322 <__hexnan+0x7e>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	459b      	cmp	fp, r3
 80052f4:	dd13      	ble.n	800531e <__hexnan+0x7a>
 80052f6:	454c      	cmp	r4, r9
 80052f8:	d206      	bcs.n	8005308 <__hexnan+0x64>
 80052fa:	2d07      	cmp	r5, #7
 80052fc:	dc04      	bgt.n	8005308 <__hexnan+0x64>
 80052fe:	462a      	mov	r2, r5
 8005300:	4649      	mov	r1, r9
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff ffa8 	bl	8005258 <L_shift>
 8005308:	4544      	cmp	r4, r8
 800530a:	d950      	bls.n	80053ae <__hexnan+0x10a>
 800530c:	2300      	movs	r3, #0
 800530e:	f1a4 0904 	sub.w	r9, r4, #4
 8005312:	f844 3c04 	str.w	r3, [r4, #-4]
 8005316:	f8cd b008 	str.w	fp, [sp, #8]
 800531a:	464c      	mov	r4, r9
 800531c:	461d      	mov	r5, r3
 800531e:	9a03      	ldr	r2, [sp, #12]
 8005320:	e7d7      	b.n	80052d2 <__hexnan+0x2e>
 8005322:	2929      	cmp	r1, #41	; 0x29
 8005324:	d156      	bne.n	80053d4 <__hexnan+0x130>
 8005326:	3202      	adds	r2, #2
 8005328:	f8ca 2000 	str.w	r2, [sl]
 800532c:	f1bb 0f00 	cmp.w	fp, #0
 8005330:	d050      	beq.n	80053d4 <__hexnan+0x130>
 8005332:	454c      	cmp	r4, r9
 8005334:	d206      	bcs.n	8005344 <__hexnan+0xa0>
 8005336:	2d07      	cmp	r5, #7
 8005338:	dc04      	bgt.n	8005344 <__hexnan+0xa0>
 800533a:	462a      	mov	r2, r5
 800533c:	4649      	mov	r1, r9
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff ff8a 	bl	8005258 <L_shift>
 8005344:	4544      	cmp	r4, r8
 8005346:	d934      	bls.n	80053b2 <__hexnan+0x10e>
 8005348:	f1a8 0204 	sub.w	r2, r8, #4
 800534c:	4623      	mov	r3, r4
 800534e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005352:	f842 1f04 	str.w	r1, [r2, #4]!
 8005356:	429f      	cmp	r7, r3
 8005358:	d2f9      	bcs.n	800534e <__hexnan+0xaa>
 800535a:	1b3b      	subs	r3, r7, r4
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	3304      	adds	r3, #4
 8005362:	3401      	adds	r4, #1
 8005364:	3e03      	subs	r6, #3
 8005366:	42b4      	cmp	r4, r6
 8005368:	bf88      	it	hi
 800536a:	2304      	movhi	r3, #4
 800536c:	4443      	add	r3, r8
 800536e:	2200      	movs	r2, #0
 8005370:	f843 2b04 	str.w	r2, [r3], #4
 8005374:	429f      	cmp	r7, r3
 8005376:	d2fb      	bcs.n	8005370 <__hexnan+0xcc>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	b91b      	cbnz	r3, 8005384 <__hexnan+0xe0>
 800537c:	4547      	cmp	r7, r8
 800537e:	d127      	bne.n	80053d0 <__hexnan+0x12c>
 8005380:	2301      	movs	r3, #1
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	2005      	movs	r0, #5
 8005386:	e026      	b.n	80053d6 <__hexnan+0x132>
 8005388:	3501      	adds	r5, #1
 800538a:	2d08      	cmp	r5, #8
 800538c:	f10b 0b01 	add.w	fp, fp, #1
 8005390:	dd06      	ble.n	80053a0 <__hexnan+0xfc>
 8005392:	4544      	cmp	r4, r8
 8005394:	d9c3      	bls.n	800531e <__hexnan+0x7a>
 8005396:	2300      	movs	r3, #0
 8005398:	f844 3c04 	str.w	r3, [r4, #-4]
 800539c:	2501      	movs	r5, #1
 800539e:	3c04      	subs	r4, #4
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	f000 000f 	and.w	r0, r0, #15
 80053a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	e7b7      	b.n	800531e <__hexnan+0x7a>
 80053ae:	2508      	movs	r5, #8
 80053b0:	e7b5      	b.n	800531e <__hexnan+0x7a>
 80053b2:	9b01      	ldr	r3, [sp, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0df      	beq.n	8005378 <__hexnan+0xd4>
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	f1c3 0320 	rsb	r3, r3, #32
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80053c8:	401a      	ands	r2, r3
 80053ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80053ce:	e7d3      	b.n	8005378 <__hexnan+0xd4>
 80053d0:	3f04      	subs	r7, #4
 80053d2:	e7d1      	b.n	8005378 <__hexnan+0xd4>
 80053d4:	2004      	movs	r0, #4
 80053d6:	b007      	add	sp, #28
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053dc <_localeconv_r>:
 80053dc:	4800      	ldr	r0, [pc, #0]	; (80053e0 <_localeconv_r+0x4>)
 80053de:	4770      	bx	lr
 80053e0:	20000168 	.word	0x20000168

080053e4 <_lseek_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_lseek_r+0x20>)
 80053e8:	4604      	mov	r4, r0
 80053ea:	4608      	mov	r0, r1
 80053ec:	4611      	mov	r1, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fb ffa8 	bl	8001348 <_lseek>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_lseek_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_lseek_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	2000063c 	.word	0x2000063c

08005408 <malloc>:
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <malloc+0xc>)
 800540a:	4601      	mov	r1, r0
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	f000 bd67 	b.w	8005ee0 <_malloc_r>
 8005412:	bf00      	nop
 8005414:	20000010 	.word	0x20000010

08005418 <__ascii_mbtowc>:
 8005418:	b082      	sub	sp, #8
 800541a:	b901      	cbnz	r1, 800541e <__ascii_mbtowc+0x6>
 800541c:	a901      	add	r1, sp, #4
 800541e:	b142      	cbz	r2, 8005432 <__ascii_mbtowc+0x1a>
 8005420:	b14b      	cbz	r3, 8005436 <__ascii_mbtowc+0x1e>
 8005422:	7813      	ldrb	r3, [r2, #0]
 8005424:	600b      	str	r3, [r1, #0]
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	1e10      	subs	r0, r2, #0
 800542a:	bf18      	it	ne
 800542c:	2001      	movne	r0, #1
 800542e:	b002      	add	sp, #8
 8005430:	4770      	bx	lr
 8005432:	4610      	mov	r0, r2
 8005434:	e7fb      	b.n	800542e <__ascii_mbtowc+0x16>
 8005436:	f06f 0001 	mvn.w	r0, #1
 800543a:	e7f8      	b.n	800542e <__ascii_mbtowc+0x16>

0800543c <memcpy>:
 800543c:	440a      	add	r2, r1
 800543e:	4291      	cmp	r1, r2
 8005440:	f100 33ff 	add.w	r3, r0, #4294967295
 8005444:	d100      	bne.n	8005448 <memcpy+0xc>
 8005446:	4770      	bx	lr
 8005448:	b510      	push	{r4, lr}
 800544a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800544e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005452:	4291      	cmp	r1, r2
 8005454:	d1f9      	bne.n	800544a <memcpy+0xe>
 8005456:	bd10      	pop	{r4, pc}

08005458 <_Balloc>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	b976      	cbnz	r6, 8005480 <_Balloc+0x28>
 8005462:	2010      	movs	r0, #16
 8005464:	f7ff ffd0 	bl	8005408 <malloc>
 8005468:	4602      	mov	r2, r0
 800546a:	6260      	str	r0, [r4, #36]	; 0x24
 800546c:	b920      	cbnz	r0, 8005478 <_Balloc+0x20>
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <_Balloc+0x78>)
 8005470:	4818      	ldr	r0, [pc, #96]	; (80054d4 <_Balloc+0x7c>)
 8005472:	2166      	movs	r1, #102	; 0x66
 8005474:	f001 fb5c 	bl	8006b30 <__assert_func>
 8005478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800547c:	6006      	str	r6, [r0, #0]
 800547e:	60c6      	str	r6, [r0, #12]
 8005480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005482:	68f3      	ldr	r3, [r6, #12]
 8005484:	b183      	cbz	r3, 80054a8 <_Balloc+0x50>
 8005486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800548e:	b9b8      	cbnz	r0, 80054c0 <_Balloc+0x68>
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f605 	lsl.w	r6, r1, r5
 8005496:	1d72      	adds	r2, r6, #5
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fc9d 	bl	8005dda <_calloc_r>
 80054a0:	b160      	cbz	r0, 80054bc <_Balloc+0x64>
 80054a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054a6:	e00e      	b.n	80054c6 <_Balloc+0x6e>
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	2104      	movs	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fc94 	bl	8005dda <_calloc_r>
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	60f0      	str	r0, [r6, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <_Balloc+0x2e>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	6802      	ldr	r2, [r0, #0]
 80054c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054cc:	e7f7      	b.n	80054be <_Balloc+0x66>
 80054ce:	bf00      	nop
 80054d0:	08007946 	.word	0x08007946
 80054d4:	08007a44 	.word	0x08007a44

080054d8 <_Bfree>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Bfree+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ff90 	bl	8005408 <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6268      	str	r0, [r5, #36]	; 0x24
 80054ec:	b920      	cbnz	r0, 80054f8 <_Bfree+0x20>
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <_Bfree+0x3c>)
 80054f0:	4809      	ldr	r0, [pc, #36]	; (8005518 <_Bfree+0x40>)
 80054f2:	218a      	movs	r1, #138	; 0x8a
 80054f4:	f001 fb1c 	bl	8006b30 <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	b13c      	cbz	r4, 8005512 <_Bfree+0x3a>
 8005502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	08007946 	.word	0x08007946
 8005518:	08007a44 	.word	0x08007a44

0800551c <__multadd>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	690d      	ldr	r5, [r1, #16]
 8005522:	4607      	mov	r7, r0
 8005524:	460c      	mov	r4, r1
 8005526:	461e      	mov	r6, r3
 8005528:	f101 0c14 	add.w	ip, r1, #20
 800552c:	2000      	movs	r0, #0
 800552e:	f8dc 3000 	ldr.w	r3, [ip]
 8005532:	b299      	uxth	r1, r3
 8005534:	fb02 6101 	mla	r1, r2, r1, r6
 8005538:	0c1e      	lsrs	r6, r3, #16
 800553a:	0c0b      	lsrs	r3, r1, #16
 800553c:	fb02 3306 	mla	r3, r2, r6, r3
 8005540:	b289      	uxth	r1, r1
 8005542:	3001      	adds	r0, #1
 8005544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005548:	4285      	cmp	r5, r0
 800554a:	f84c 1b04 	str.w	r1, [ip], #4
 800554e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005552:	dcec      	bgt.n	800552e <__multadd+0x12>
 8005554:	b30e      	cbz	r6, 800559a <__multadd+0x7e>
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc19      	bgt.n	8005590 <__multadd+0x74>
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4638      	mov	r0, r7
 8005560:	3101      	adds	r1, #1
 8005562:	f7ff ff79 	bl	8005458 <_Balloc>
 8005566:	4680      	mov	r8, r0
 8005568:	b928      	cbnz	r0, 8005576 <__multadd+0x5a>
 800556a:	4602      	mov	r2, r0
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <__multadd+0x84>)
 800556e:	480d      	ldr	r0, [pc, #52]	; (80055a4 <__multadd+0x88>)
 8005570:	21b5      	movs	r1, #181	; 0xb5
 8005572:	f001 fadd 	bl	8006b30 <__assert_func>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	3202      	adds	r2, #2
 800557a:	f104 010c 	add.w	r1, r4, #12
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	300c      	adds	r0, #12
 8005582:	f7ff ff5b 	bl	800543c <memcpy>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ffa5 	bl	80054d8 <_Bfree>
 800558e:	4644      	mov	r4, r8
 8005590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005594:	3501      	adds	r5, #1
 8005596:	615e      	str	r6, [r3, #20]
 8005598:	6125      	str	r5, [r4, #16]
 800559a:	4620      	mov	r0, r4
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	080079b8 	.word	0x080079b8
 80055a4:	08007a44 	.word	0x08007a44

080055a8 <__s2b>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	460c      	mov	r4, r1
 80055ae:	4615      	mov	r5, r2
 80055b0:	461f      	mov	r7, r3
 80055b2:	2209      	movs	r2, #9
 80055b4:	3308      	adds	r3, #8
 80055b6:	4606      	mov	r6, r0
 80055b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055bc:	2100      	movs	r1, #0
 80055be:	2201      	movs	r2, #1
 80055c0:	429a      	cmp	r2, r3
 80055c2:	db09      	blt.n	80055d8 <__s2b+0x30>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7ff ff47 	bl	8005458 <_Balloc>
 80055ca:	b940      	cbnz	r0, 80055de <__s2b+0x36>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b19      	ldr	r3, [pc, #100]	; (8005634 <__s2b+0x8c>)
 80055d0:	4819      	ldr	r0, [pc, #100]	; (8005638 <__s2b+0x90>)
 80055d2:	21ce      	movs	r1, #206	; 0xce
 80055d4:	f001 faac 	bl	8006b30 <__assert_func>
 80055d8:	0052      	lsls	r2, r2, #1
 80055da:	3101      	adds	r1, #1
 80055dc:	e7f0      	b.n	80055c0 <__s2b+0x18>
 80055de:	9b08      	ldr	r3, [sp, #32]
 80055e0:	6143      	str	r3, [r0, #20]
 80055e2:	2d09      	cmp	r5, #9
 80055e4:	f04f 0301 	mov.w	r3, #1
 80055e8:	6103      	str	r3, [r0, #16]
 80055ea:	dd16      	ble.n	800561a <__s2b+0x72>
 80055ec:	f104 0909 	add.w	r9, r4, #9
 80055f0:	46c8      	mov	r8, r9
 80055f2:	442c      	add	r4, r5
 80055f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055f8:	4601      	mov	r1, r0
 80055fa:	3b30      	subs	r3, #48	; 0x30
 80055fc:	220a      	movs	r2, #10
 80055fe:	4630      	mov	r0, r6
 8005600:	f7ff ff8c 	bl	800551c <__multadd>
 8005604:	45a0      	cmp	r8, r4
 8005606:	d1f5      	bne.n	80055f4 <__s2b+0x4c>
 8005608:	f1a5 0408 	sub.w	r4, r5, #8
 800560c:	444c      	add	r4, r9
 800560e:	1b2d      	subs	r5, r5, r4
 8005610:	1963      	adds	r3, r4, r5
 8005612:	42bb      	cmp	r3, r7
 8005614:	db04      	blt.n	8005620 <__s2b+0x78>
 8005616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561a:	340a      	adds	r4, #10
 800561c:	2509      	movs	r5, #9
 800561e:	e7f6      	b.n	800560e <__s2b+0x66>
 8005620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005624:	4601      	mov	r1, r0
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	220a      	movs	r2, #10
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ff76 	bl	800551c <__multadd>
 8005630:	e7ee      	b.n	8005610 <__s2b+0x68>
 8005632:	bf00      	nop
 8005634:	080079b8 	.word	0x080079b8
 8005638:	08007a44 	.word	0x08007a44

0800563c <__hi0bits>:
 800563c:	0c03      	lsrs	r3, r0, #16
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	b9d3      	cbnz	r3, 8005678 <__hi0bits+0x3c>
 8005642:	0400      	lsls	r0, r0, #16
 8005644:	2310      	movs	r3, #16
 8005646:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800564a:	bf04      	itt	eq
 800564c:	0200      	lsleq	r0, r0, #8
 800564e:	3308      	addeq	r3, #8
 8005650:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005654:	bf04      	itt	eq
 8005656:	0100      	lsleq	r0, r0, #4
 8005658:	3304      	addeq	r3, #4
 800565a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800565e:	bf04      	itt	eq
 8005660:	0080      	lsleq	r0, r0, #2
 8005662:	3302      	addeq	r3, #2
 8005664:	2800      	cmp	r0, #0
 8005666:	db05      	blt.n	8005674 <__hi0bits+0x38>
 8005668:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800566c:	f103 0301 	add.w	r3, r3, #1
 8005670:	bf08      	it	eq
 8005672:	2320      	moveq	r3, #32
 8005674:	4618      	mov	r0, r3
 8005676:	4770      	bx	lr
 8005678:	2300      	movs	r3, #0
 800567a:	e7e4      	b.n	8005646 <__hi0bits+0xa>

0800567c <__lo0bits>:
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	f013 0207 	ands.w	r2, r3, #7
 8005682:	4601      	mov	r1, r0
 8005684:	d00b      	beq.n	800569e <__lo0bits+0x22>
 8005686:	07da      	lsls	r2, r3, #31
 8005688:	d423      	bmi.n	80056d2 <__lo0bits+0x56>
 800568a:	0798      	lsls	r0, r3, #30
 800568c:	bf49      	itett	mi
 800568e:	085b      	lsrmi	r3, r3, #1
 8005690:	089b      	lsrpl	r3, r3, #2
 8005692:	2001      	movmi	r0, #1
 8005694:	600b      	strmi	r3, [r1, #0]
 8005696:	bf5c      	itt	pl
 8005698:	600b      	strpl	r3, [r1, #0]
 800569a:	2002      	movpl	r0, #2
 800569c:	4770      	bx	lr
 800569e:	b298      	uxth	r0, r3
 80056a0:	b9a8      	cbnz	r0, 80056ce <__lo0bits+0x52>
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	2010      	movs	r0, #16
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	b90a      	cbnz	r2, 80056ae <__lo0bits+0x32>
 80056aa:	3008      	adds	r0, #8
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	071a      	lsls	r2, r3, #28
 80056b0:	bf04      	itt	eq
 80056b2:	091b      	lsreq	r3, r3, #4
 80056b4:	3004      	addeq	r0, #4
 80056b6:	079a      	lsls	r2, r3, #30
 80056b8:	bf04      	itt	eq
 80056ba:	089b      	lsreq	r3, r3, #2
 80056bc:	3002      	addeq	r0, #2
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d403      	bmi.n	80056ca <__lo0bits+0x4e>
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f100 0001 	add.w	r0, r0, #1
 80056c8:	d005      	beq.n	80056d6 <__lo0bits+0x5a>
 80056ca:	600b      	str	r3, [r1, #0]
 80056cc:	4770      	bx	lr
 80056ce:	4610      	mov	r0, r2
 80056d0:	e7e9      	b.n	80056a6 <__lo0bits+0x2a>
 80056d2:	2000      	movs	r0, #0
 80056d4:	4770      	bx	lr
 80056d6:	2020      	movs	r0, #32
 80056d8:	4770      	bx	lr
	...

080056dc <__i2b>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	460c      	mov	r4, r1
 80056e0:	2101      	movs	r1, #1
 80056e2:	f7ff feb9 	bl	8005458 <_Balloc>
 80056e6:	4602      	mov	r2, r0
 80056e8:	b928      	cbnz	r0, 80056f6 <__i2b+0x1a>
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <__i2b+0x24>)
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <__i2b+0x28>)
 80056ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056f2:	f001 fa1d 	bl	8006b30 <__assert_func>
 80056f6:	2301      	movs	r3, #1
 80056f8:	6144      	str	r4, [r0, #20]
 80056fa:	6103      	str	r3, [r0, #16]
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	080079b8 	.word	0x080079b8
 8005704:	08007a44 	.word	0x08007a44

08005708 <__multiply>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	4691      	mov	r9, r2
 800570e:	690a      	ldr	r2, [r1, #16]
 8005710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	bfb8      	it	lt
 8005718:	460b      	movlt	r3, r1
 800571a:	460c      	mov	r4, r1
 800571c:	bfbc      	itt	lt
 800571e:	464c      	movlt	r4, r9
 8005720:	4699      	movlt	r9, r3
 8005722:	6927      	ldr	r7, [r4, #16]
 8005724:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	6861      	ldr	r1, [r4, #4]
 800572c:	eb07 060a 	add.w	r6, r7, sl
 8005730:	42b3      	cmp	r3, r6
 8005732:	b085      	sub	sp, #20
 8005734:	bfb8      	it	lt
 8005736:	3101      	addlt	r1, #1
 8005738:	f7ff fe8e 	bl	8005458 <_Balloc>
 800573c:	b930      	cbnz	r0, 800574c <__multiply+0x44>
 800573e:	4602      	mov	r2, r0
 8005740:	4b44      	ldr	r3, [pc, #272]	; (8005854 <__multiply+0x14c>)
 8005742:	4845      	ldr	r0, [pc, #276]	; (8005858 <__multiply+0x150>)
 8005744:	f240 115d 	movw	r1, #349	; 0x15d
 8005748:	f001 f9f2 	bl	8006b30 <__assert_func>
 800574c:	f100 0514 	add.w	r5, r0, #20
 8005750:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005754:	462b      	mov	r3, r5
 8005756:	2200      	movs	r2, #0
 8005758:	4543      	cmp	r3, r8
 800575a:	d321      	bcc.n	80057a0 <__multiply+0x98>
 800575c:	f104 0314 	add.w	r3, r4, #20
 8005760:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005764:	f109 0314 	add.w	r3, r9, #20
 8005768:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800576c:	9202      	str	r2, [sp, #8]
 800576e:	1b3a      	subs	r2, r7, r4
 8005770:	3a15      	subs	r2, #21
 8005772:	f022 0203 	bic.w	r2, r2, #3
 8005776:	3204      	adds	r2, #4
 8005778:	f104 0115 	add.w	r1, r4, #21
 800577c:	428f      	cmp	r7, r1
 800577e:	bf38      	it	cc
 8005780:	2204      	movcc	r2, #4
 8005782:	9201      	str	r2, [sp, #4]
 8005784:	9a02      	ldr	r2, [sp, #8]
 8005786:	9303      	str	r3, [sp, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d80c      	bhi.n	80057a6 <__multiply+0x9e>
 800578c:	2e00      	cmp	r6, #0
 800578e:	dd03      	ble.n	8005798 <__multiply+0x90>
 8005790:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005794:	2b00      	cmp	r3, #0
 8005796:	d05a      	beq.n	800584e <__multiply+0x146>
 8005798:	6106      	str	r6, [r0, #16]
 800579a:	b005      	add	sp, #20
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	f843 2b04 	str.w	r2, [r3], #4
 80057a4:	e7d8      	b.n	8005758 <__multiply+0x50>
 80057a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80057aa:	f1ba 0f00 	cmp.w	sl, #0
 80057ae:	d024      	beq.n	80057fa <__multiply+0xf2>
 80057b0:	f104 0e14 	add.w	lr, r4, #20
 80057b4:	46a9      	mov	r9, r5
 80057b6:	f04f 0c00 	mov.w	ip, #0
 80057ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057be:	f8d9 1000 	ldr.w	r1, [r9]
 80057c2:	fa1f fb82 	uxth.w	fp, r2
 80057c6:	b289      	uxth	r1, r1
 80057c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80057cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80057d0:	f8d9 2000 	ldr.w	r2, [r9]
 80057d4:	4461      	add	r1, ip
 80057d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057da:	fb0a c20b 	mla	r2, sl, fp, ip
 80057de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057e2:	b289      	uxth	r1, r1
 80057e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057e8:	4577      	cmp	r7, lr
 80057ea:	f849 1b04 	str.w	r1, [r9], #4
 80057ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057f2:	d8e2      	bhi.n	80057ba <__multiply+0xb2>
 80057f4:	9a01      	ldr	r2, [sp, #4]
 80057f6:	f845 c002 	str.w	ip, [r5, r2]
 80057fa:	9a03      	ldr	r2, [sp, #12]
 80057fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005800:	3304      	adds	r3, #4
 8005802:	f1b9 0f00 	cmp.w	r9, #0
 8005806:	d020      	beq.n	800584a <__multiply+0x142>
 8005808:	6829      	ldr	r1, [r5, #0]
 800580a:	f104 0c14 	add.w	ip, r4, #20
 800580e:	46ae      	mov	lr, r5
 8005810:	f04f 0a00 	mov.w	sl, #0
 8005814:	f8bc b000 	ldrh.w	fp, [ip]
 8005818:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800581c:	fb09 220b 	mla	r2, r9, fp, r2
 8005820:	4492      	add	sl, r2
 8005822:	b289      	uxth	r1, r1
 8005824:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005828:	f84e 1b04 	str.w	r1, [lr], #4
 800582c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005830:	f8be 1000 	ldrh.w	r1, [lr]
 8005834:	0c12      	lsrs	r2, r2, #16
 8005836:	fb09 1102 	mla	r1, r9, r2, r1
 800583a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800583e:	4567      	cmp	r7, ip
 8005840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005844:	d8e6      	bhi.n	8005814 <__multiply+0x10c>
 8005846:	9a01      	ldr	r2, [sp, #4]
 8005848:	50a9      	str	r1, [r5, r2]
 800584a:	3504      	adds	r5, #4
 800584c:	e79a      	b.n	8005784 <__multiply+0x7c>
 800584e:	3e01      	subs	r6, #1
 8005850:	e79c      	b.n	800578c <__multiply+0x84>
 8005852:	bf00      	nop
 8005854:	080079b8 	.word	0x080079b8
 8005858:	08007a44 	.word	0x08007a44

0800585c <__pow5mult>:
 800585c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005860:	4615      	mov	r5, r2
 8005862:	f012 0203 	ands.w	r2, r2, #3
 8005866:	4606      	mov	r6, r0
 8005868:	460f      	mov	r7, r1
 800586a:	d007      	beq.n	800587c <__pow5mult+0x20>
 800586c:	4c25      	ldr	r4, [pc, #148]	; (8005904 <__pow5mult+0xa8>)
 800586e:	3a01      	subs	r2, #1
 8005870:	2300      	movs	r3, #0
 8005872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005876:	f7ff fe51 	bl	800551c <__multadd>
 800587a:	4607      	mov	r7, r0
 800587c:	10ad      	asrs	r5, r5, #2
 800587e:	d03d      	beq.n	80058fc <__pow5mult+0xa0>
 8005880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005882:	b97c      	cbnz	r4, 80058a4 <__pow5mult+0x48>
 8005884:	2010      	movs	r0, #16
 8005886:	f7ff fdbf 	bl	8005408 <malloc>
 800588a:	4602      	mov	r2, r0
 800588c:	6270      	str	r0, [r6, #36]	; 0x24
 800588e:	b928      	cbnz	r0, 800589c <__pow5mult+0x40>
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <__pow5mult+0xac>)
 8005892:	481e      	ldr	r0, [pc, #120]	; (800590c <__pow5mult+0xb0>)
 8005894:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005898:	f001 f94a 	bl	8006b30 <__assert_func>
 800589c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058a0:	6004      	str	r4, [r0, #0]
 80058a2:	60c4      	str	r4, [r0, #12]
 80058a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058ac:	b94c      	cbnz	r4, 80058c2 <__pow5mult+0x66>
 80058ae:	f240 2171 	movw	r1, #625	; 0x271
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7ff ff12 	bl	80056dc <__i2b>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80058be:	4604      	mov	r4, r0
 80058c0:	6003      	str	r3, [r0, #0]
 80058c2:	f04f 0900 	mov.w	r9, #0
 80058c6:	07eb      	lsls	r3, r5, #31
 80058c8:	d50a      	bpl.n	80058e0 <__pow5mult+0x84>
 80058ca:	4639      	mov	r1, r7
 80058cc:	4622      	mov	r2, r4
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ff1a 	bl	8005708 <__multiply>
 80058d4:	4639      	mov	r1, r7
 80058d6:	4680      	mov	r8, r0
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fdfd 	bl	80054d8 <_Bfree>
 80058de:	4647      	mov	r7, r8
 80058e0:	106d      	asrs	r5, r5, #1
 80058e2:	d00b      	beq.n	80058fc <__pow5mult+0xa0>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	b938      	cbnz	r0, 80058f8 <__pow5mult+0x9c>
 80058e8:	4622      	mov	r2, r4
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff ff0b 	bl	8005708 <__multiply>
 80058f2:	6020      	str	r0, [r4, #0]
 80058f4:	f8c0 9000 	str.w	r9, [r0]
 80058f8:	4604      	mov	r4, r0
 80058fa:	e7e4      	b.n	80058c6 <__pow5mult+0x6a>
 80058fc:	4638      	mov	r0, r7
 80058fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005902:	bf00      	nop
 8005904:	08007b90 	.word	0x08007b90
 8005908:	08007946 	.word	0x08007946
 800590c:	08007a44 	.word	0x08007a44

08005910 <__lshift>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	460c      	mov	r4, r1
 8005916:	6849      	ldr	r1, [r1, #4]
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	4607      	mov	r7, r0
 8005922:	4691      	mov	r9, r2
 8005924:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005928:	f108 0601 	add.w	r6, r8, #1
 800592c:	42b3      	cmp	r3, r6
 800592e:	db0b      	blt.n	8005948 <__lshift+0x38>
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff fd91 	bl	8005458 <_Balloc>
 8005936:	4605      	mov	r5, r0
 8005938:	b948      	cbnz	r0, 800594e <__lshift+0x3e>
 800593a:	4602      	mov	r2, r0
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <__lshift+0xd8>)
 800593e:	482b      	ldr	r0, [pc, #172]	; (80059ec <__lshift+0xdc>)
 8005940:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005944:	f001 f8f4 	bl	8006b30 <__assert_func>
 8005948:	3101      	adds	r1, #1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	e7ee      	b.n	800592c <__lshift+0x1c>
 800594e:	2300      	movs	r3, #0
 8005950:	f100 0114 	add.w	r1, r0, #20
 8005954:	f100 0210 	add.w	r2, r0, #16
 8005958:	4618      	mov	r0, r3
 800595a:	4553      	cmp	r3, sl
 800595c:	db37      	blt.n	80059ce <__lshift+0xbe>
 800595e:	6920      	ldr	r0, [r4, #16]
 8005960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005964:	f104 0314 	add.w	r3, r4, #20
 8005968:	f019 091f 	ands.w	r9, r9, #31
 800596c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005974:	d02f      	beq.n	80059d6 <__lshift+0xc6>
 8005976:	f1c9 0e20 	rsb	lr, r9, #32
 800597a:	468a      	mov	sl, r1
 800597c:	f04f 0c00 	mov.w	ip, #0
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	fa02 f209 	lsl.w	r2, r2, r9
 8005986:	ea42 020c 	orr.w	r2, r2, ip
 800598a:	f84a 2b04 	str.w	r2, [sl], #4
 800598e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005992:	4298      	cmp	r0, r3
 8005994:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005998:	d8f2      	bhi.n	8005980 <__lshift+0x70>
 800599a:	1b03      	subs	r3, r0, r4
 800599c:	3b15      	subs	r3, #21
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	3304      	adds	r3, #4
 80059a4:	f104 0215 	add.w	r2, r4, #21
 80059a8:	4290      	cmp	r0, r2
 80059aa:	bf38      	it	cc
 80059ac:	2304      	movcc	r3, #4
 80059ae:	f841 c003 	str.w	ip, [r1, r3]
 80059b2:	f1bc 0f00 	cmp.w	ip, #0
 80059b6:	d001      	beq.n	80059bc <__lshift+0xac>
 80059b8:	f108 0602 	add.w	r6, r8, #2
 80059bc:	3e01      	subs	r6, #1
 80059be:	4638      	mov	r0, r7
 80059c0:	612e      	str	r6, [r5, #16]
 80059c2:	4621      	mov	r1, r4
 80059c4:	f7ff fd88 	bl	80054d8 <_Bfree>
 80059c8:	4628      	mov	r0, r5
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80059d2:	3301      	adds	r3, #1
 80059d4:	e7c1      	b.n	800595a <__lshift+0x4a>
 80059d6:	3904      	subs	r1, #4
 80059d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80059e0:	4298      	cmp	r0, r3
 80059e2:	d8f9      	bhi.n	80059d8 <__lshift+0xc8>
 80059e4:	e7ea      	b.n	80059bc <__lshift+0xac>
 80059e6:	bf00      	nop
 80059e8:	080079b8 	.word	0x080079b8
 80059ec:	08007a44 	.word	0x08007a44

080059f0 <__mcmp>:
 80059f0:	b530      	push	{r4, r5, lr}
 80059f2:	6902      	ldr	r2, [r0, #16]
 80059f4:	690c      	ldr	r4, [r1, #16]
 80059f6:	1b12      	subs	r2, r2, r4
 80059f8:	d10e      	bne.n	8005a18 <__mcmp+0x28>
 80059fa:	f100 0314 	add.w	r3, r0, #20
 80059fe:	3114      	adds	r1, #20
 8005a00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	d003      	beq.n	8005a1c <__mcmp+0x2c>
 8005a14:	d305      	bcc.n	8005a22 <__mcmp+0x32>
 8005a16:	2201      	movs	r2, #1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	bd30      	pop	{r4, r5, pc}
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	d3f3      	bcc.n	8005a08 <__mcmp+0x18>
 8005a20:	e7fa      	b.n	8005a18 <__mcmp+0x28>
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	e7f7      	b.n	8005a18 <__mcmp+0x28>

08005a28 <__mdiff>:
 8005a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	4606      	mov	r6, r0
 8005a30:	4611      	mov	r1, r2
 8005a32:	4620      	mov	r0, r4
 8005a34:	4690      	mov	r8, r2
 8005a36:	f7ff ffdb 	bl	80059f0 <__mcmp>
 8005a3a:	1e05      	subs	r5, r0, #0
 8005a3c:	d110      	bne.n	8005a60 <__mdiff+0x38>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff fd09 	bl	8005458 <_Balloc>
 8005a46:	b930      	cbnz	r0, 8005a56 <__mdiff+0x2e>
 8005a48:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <__mdiff+0x10c>)
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f240 2132 	movw	r1, #562	; 0x232
 8005a50:	4839      	ldr	r0, [pc, #228]	; (8005b38 <__mdiff+0x110>)
 8005a52:	f001 f86d 	bl	8006b30 <__assert_func>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a60:	bfa4      	itt	ge
 8005a62:	4643      	movge	r3, r8
 8005a64:	46a0      	movge	r8, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a6c:	bfa6      	itte	ge
 8005a6e:	461c      	movge	r4, r3
 8005a70:	2500      	movge	r5, #0
 8005a72:	2501      	movlt	r5, #1
 8005a74:	f7ff fcf0 	bl	8005458 <_Balloc>
 8005a78:	b920      	cbnz	r0, 8005a84 <__mdiff+0x5c>
 8005a7a:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <__mdiff+0x10c>)
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a82:	e7e5      	b.n	8005a50 <__mdiff+0x28>
 8005a84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a88:	6926      	ldr	r6, [r4, #16]
 8005a8a:	60c5      	str	r5, [r0, #12]
 8005a8c:	f104 0914 	add.w	r9, r4, #20
 8005a90:	f108 0514 	add.w	r5, r8, #20
 8005a94:	f100 0e14 	add.w	lr, r0, #20
 8005a98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005aa0:	f108 0210 	add.w	r2, r8, #16
 8005aa4:	46f2      	mov	sl, lr
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005aac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005ab0:	fa1f f883 	uxth.w	r8, r3
 8005ab4:	fa11 f18b 	uxtah	r1, r1, fp
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	eba1 0808 	sub.w	r8, r1, r8
 8005abe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ac2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005ac6:	fa1f f888 	uxth.w	r8, r8
 8005aca:	1419      	asrs	r1, r3, #16
 8005acc:	454e      	cmp	r6, r9
 8005ace:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ad2:	f84a 3b04 	str.w	r3, [sl], #4
 8005ad6:	d8e7      	bhi.n	8005aa8 <__mdiff+0x80>
 8005ad8:	1b33      	subs	r3, r6, r4
 8005ada:	3b15      	subs	r3, #21
 8005adc:	f023 0303 	bic.w	r3, r3, #3
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	3415      	adds	r4, #21
 8005ae4:	42a6      	cmp	r6, r4
 8005ae6:	bf38      	it	cc
 8005ae8:	2304      	movcc	r3, #4
 8005aea:	441d      	add	r5, r3
 8005aec:	4473      	add	r3, lr
 8005aee:	469e      	mov	lr, r3
 8005af0:	462e      	mov	r6, r5
 8005af2:	4566      	cmp	r6, ip
 8005af4:	d30e      	bcc.n	8005b14 <__mdiff+0xec>
 8005af6:	f10c 0203 	add.w	r2, ip, #3
 8005afa:	1b52      	subs	r2, r2, r5
 8005afc:	f022 0203 	bic.w	r2, r2, #3
 8005b00:	3d03      	subs	r5, #3
 8005b02:	45ac      	cmp	ip, r5
 8005b04:	bf38      	it	cc
 8005b06:	2200      	movcc	r2, #0
 8005b08:	441a      	add	r2, r3
 8005b0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b0e:	b17b      	cbz	r3, 8005b30 <__mdiff+0x108>
 8005b10:	6107      	str	r7, [r0, #16]
 8005b12:	e7a3      	b.n	8005a5c <__mdiff+0x34>
 8005b14:	f856 8b04 	ldr.w	r8, [r6], #4
 8005b18:	fa11 f288 	uxtah	r2, r1, r8
 8005b1c:	1414      	asrs	r4, r2, #16
 8005b1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b22:	b292      	uxth	r2, r2
 8005b24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b28:	f84e 2b04 	str.w	r2, [lr], #4
 8005b2c:	1421      	asrs	r1, r4, #16
 8005b2e:	e7e0      	b.n	8005af2 <__mdiff+0xca>
 8005b30:	3f01      	subs	r7, #1
 8005b32:	e7ea      	b.n	8005b0a <__mdiff+0xe2>
 8005b34:	080079b8 	.word	0x080079b8
 8005b38:	08007a44 	.word	0x08007a44

08005b3c <__ulp>:
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	ed8d 0b00 	vstr	d0, [sp]
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	4912      	ldr	r1, [pc, #72]	; (8005b90 <__ulp+0x54>)
 8005b46:	4019      	ands	r1, r3
 8005b48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	dd05      	ble.n	8005b5c <__ulp+0x20>
 8005b50:	2200      	movs	r2, #0
 8005b52:	460b      	mov	r3, r1
 8005b54:	ec43 2b10 	vmov	d0, r2, r3
 8005b58:	b002      	add	sp, #8
 8005b5a:	4770      	bx	lr
 8005b5c:	4249      	negs	r1, r1
 8005b5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005b62:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	da04      	bge.n	8005b7a <__ulp+0x3e>
 8005b70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005b74:	fa41 f300 	asr.w	r3, r1, r0
 8005b78:	e7ec      	b.n	8005b54 <__ulp+0x18>
 8005b7a:	f1a0 0114 	sub.w	r1, r0, #20
 8005b7e:	291e      	cmp	r1, #30
 8005b80:	bfda      	itte	le
 8005b82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005b86:	fa20 f101 	lsrle.w	r1, r0, r1
 8005b8a:	2101      	movgt	r1, #1
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	e7e1      	b.n	8005b54 <__ulp+0x18>
 8005b90:	7ff00000 	.word	0x7ff00000

08005b94 <__b2d>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	6905      	ldr	r5, [r0, #16]
 8005b98:	f100 0714 	add.w	r7, r0, #20
 8005b9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005ba0:	1f2e      	subs	r6, r5, #4
 8005ba2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff fd48 	bl	800563c <__hi0bits>
 8005bac:	f1c0 0320 	rsb	r3, r0, #32
 8005bb0:	280a      	cmp	r0, #10
 8005bb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005c30 <__b2d+0x9c>
 8005bb6:	600b      	str	r3, [r1, #0]
 8005bb8:	dc14      	bgt.n	8005be4 <__b2d+0x50>
 8005bba:	f1c0 0e0b 	rsb	lr, r0, #11
 8005bbe:	fa24 f10e 	lsr.w	r1, r4, lr
 8005bc2:	42b7      	cmp	r7, r6
 8005bc4:	ea41 030c 	orr.w	r3, r1, ip
 8005bc8:	bf34      	ite	cc
 8005bca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bce:	2100      	movcs	r1, #0
 8005bd0:	3015      	adds	r0, #21
 8005bd2:	fa04 f000 	lsl.w	r0, r4, r0
 8005bd6:	fa21 f10e 	lsr.w	r1, r1, lr
 8005bda:	ea40 0201 	orr.w	r2, r0, r1
 8005bde:	ec43 2b10 	vmov	d0, r2, r3
 8005be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be4:	42b7      	cmp	r7, r6
 8005be6:	bf3a      	itte	cc
 8005be8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bec:	f1a5 0608 	subcc.w	r6, r5, #8
 8005bf0:	2100      	movcs	r1, #0
 8005bf2:	380b      	subs	r0, #11
 8005bf4:	d017      	beq.n	8005c26 <__b2d+0x92>
 8005bf6:	f1c0 0c20 	rsb	ip, r0, #32
 8005bfa:	fa04 f500 	lsl.w	r5, r4, r0
 8005bfe:	42be      	cmp	r6, r7
 8005c00:	fa21 f40c 	lsr.w	r4, r1, ip
 8005c04:	ea45 0504 	orr.w	r5, r5, r4
 8005c08:	bf8c      	ite	hi
 8005c0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005c0e:	2400      	movls	r4, #0
 8005c10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005c14:	fa01 f000 	lsl.w	r0, r1, r0
 8005c18:	fa24 f40c 	lsr.w	r4, r4, ip
 8005c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c20:	ea40 0204 	orr.w	r2, r0, r4
 8005c24:	e7db      	b.n	8005bde <__b2d+0x4a>
 8005c26:	ea44 030c 	orr.w	r3, r4, ip
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	e7d7      	b.n	8005bde <__b2d+0x4a>
 8005c2e:	bf00      	nop
 8005c30:	3ff00000 	.word	0x3ff00000

08005c34 <__d2b>:
 8005c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4689      	mov	r9, r1
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	ec57 6b10 	vmov	r6, r7, d0
 8005c40:	4690      	mov	r8, r2
 8005c42:	f7ff fc09 	bl	8005458 <_Balloc>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b930      	cbnz	r0, 8005c58 <__d2b+0x24>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <__d2b+0xb0>)
 8005c4e:	4826      	ldr	r0, [pc, #152]	; (8005ce8 <__d2b+0xb4>)
 8005c50:	f240 310a 	movw	r1, #778	; 0x30a
 8005c54:	f000 ff6c 	bl	8006b30 <__assert_func>
 8005c58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c60:	bb35      	cbnz	r5, 8005cb0 <__d2b+0x7c>
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	d028      	beq.n	8005cba <__d2b+0x86>
 8005c68:	4668      	mov	r0, sp
 8005c6a:	9600      	str	r6, [sp, #0]
 8005c6c:	f7ff fd06 	bl	800567c <__lo0bits>
 8005c70:	9900      	ldr	r1, [sp, #0]
 8005c72:	b300      	cbz	r0, 8005cb6 <__d2b+0x82>
 8005c74:	9a01      	ldr	r2, [sp, #4]
 8005c76:	f1c0 0320 	rsb	r3, r0, #32
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	40c2      	lsrs	r2, r0
 8005c82:	6163      	str	r3, [r4, #20]
 8005c84:	9201      	str	r2, [sp, #4]
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	61a3      	str	r3, [r4, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2202      	movne	r2, #2
 8005c90:	2201      	moveq	r2, #1
 8005c92:	6122      	str	r2, [r4, #16]
 8005c94:	b1d5      	cbz	r5, 8005ccc <__d2b+0x98>
 8005c96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c9a:	4405      	add	r5, r0
 8005c9c:	f8c9 5000 	str.w	r5, [r9]
 8005ca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ca4:	f8c8 0000 	str.w	r0, [r8]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	b003      	add	sp, #12
 8005cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb4:	e7d5      	b.n	8005c62 <__d2b+0x2e>
 8005cb6:	6161      	str	r1, [r4, #20]
 8005cb8:	e7e5      	b.n	8005c86 <__d2b+0x52>
 8005cba:	a801      	add	r0, sp, #4
 8005cbc:	f7ff fcde 	bl	800567c <__lo0bits>
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	6163      	str	r3, [r4, #20]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	3020      	adds	r0, #32
 8005cca:	e7e3      	b.n	8005c94 <__d2b+0x60>
 8005ccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cd4:	f8c9 0000 	str.w	r0, [r9]
 8005cd8:	6918      	ldr	r0, [r3, #16]
 8005cda:	f7ff fcaf 	bl	800563c <__hi0bits>
 8005cde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ce2:	e7df      	b.n	8005ca4 <__d2b+0x70>
 8005ce4:	080079b8 	.word	0x080079b8
 8005ce8:	08007a44 	.word	0x08007a44

08005cec <__ratio>:
 8005cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	4688      	mov	r8, r1
 8005cf2:	4669      	mov	r1, sp
 8005cf4:	4681      	mov	r9, r0
 8005cf6:	f7ff ff4d 	bl	8005b94 <__b2d>
 8005cfa:	a901      	add	r1, sp, #4
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	ec55 4b10 	vmov	r4, r5, d0
 8005d02:	f7ff ff47 	bl	8005b94 <__b2d>
 8005d06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005d0e:	eba3 0c02 	sub.w	ip, r3, r2
 8005d12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005d1c:	ec51 0b10 	vmov	r0, r1, d0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfd6      	itet	le
 8005d24:	460a      	movle	r2, r1
 8005d26:	462a      	movgt	r2, r5
 8005d28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005d2c:	468b      	mov	fp, r1
 8005d2e:	462f      	mov	r7, r5
 8005d30:	bfd4      	ite	le
 8005d32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005d36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	ee10 2a10 	vmov	r2, s0
 8005d40:	465b      	mov	r3, fp
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fd9a 	bl	800087c <__aeabi_ddiv>
 8005d48:	ec41 0b10 	vmov	d0, r0, r1
 8005d4c:	b003      	add	sp, #12
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d52 <__copybits>:
 8005d52:	3901      	subs	r1, #1
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	1149      	asrs	r1, r1, #5
 8005d58:	6914      	ldr	r4, [r2, #16]
 8005d5a:	3101      	adds	r1, #1
 8005d5c:	f102 0314 	add.w	r3, r2, #20
 8005d60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d68:	1f05      	subs	r5, r0, #4
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	d30c      	bcc.n	8005d88 <__copybits+0x36>
 8005d6e:	1aa3      	subs	r3, r4, r2
 8005d70:	3b11      	subs	r3, #17
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	3211      	adds	r2, #17
 8005d78:	42a2      	cmp	r2, r4
 8005d7a:	bf88      	it	hi
 8005d7c:	2300      	movhi	r3, #0
 8005d7e:	4418      	add	r0, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	4288      	cmp	r0, r1
 8005d84:	d305      	bcc.n	8005d92 <__copybits+0x40>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d8c:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d90:	e7eb      	b.n	8005d6a <__copybits+0x18>
 8005d92:	f840 3b04 	str.w	r3, [r0], #4
 8005d96:	e7f4      	b.n	8005d82 <__copybits+0x30>

08005d98 <__any_on>:
 8005d98:	f100 0214 	add.w	r2, r0, #20
 8005d9c:	6900      	ldr	r0, [r0, #16]
 8005d9e:	114b      	asrs	r3, r1, #5
 8005da0:	4298      	cmp	r0, r3
 8005da2:	b510      	push	{r4, lr}
 8005da4:	db11      	blt.n	8005dca <__any_on+0x32>
 8005da6:	dd0a      	ble.n	8005dbe <__any_on+0x26>
 8005da8:	f011 011f 	ands.w	r1, r1, #31
 8005dac:	d007      	beq.n	8005dbe <__any_on+0x26>
 8005dae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005db2:	fa24 f001 	lsr.w	r0, r4, r1
 8005db6:	fa00 f101 	lsl.w	r1, r0, r1
 8005dba:	428c      	cmp	r4, r1
 8005dbc:	d10b      	bne.n	8005dd6 <__any_on+0x3e>
 8005dbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d803      	bhi.n	8005dce <__any_on+0x36>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e7f7      	b.n	8005dbe <__any_on+0x26>
 8005dce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d0f5      	beq.n	8005dc2 <__any_on+0x2a>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e7f6      	b.n	8005dc8 <__any_on+0x30>

08005dda <_calloc_r>:
 8005dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ddc:	fba1 2402 	umull	r2, r4, r1, r2
 8005de0:	b94c      	cbnz	r4, 8005df6 <_calloc_r+0x1c>
 8005de2:	4611      	mov	r1, r2
 8005de4:	9201      	str	r2, [sp, #4]
 8005de6:	f000 f87b 	bl	8005ee0 <_malloc_r>
 8005dea:	9a01      	ldr	r2, [sp, #4]
 8005dec:	4605      	mov	r5, r0
 8005dee:	b930      	cbnz	r0, 8005dfe <_calloc_r+0x24>
 8005df0:	4628      	mov	r0, r5
 8005df2:	b003      	add	sp, #12
 8005df4:	bd30      	pop	{r4, r5, pc}
 8005df6:	220c      	movs	r2, #12
 8005df8:	6002      	str	r2, [r0, #0]
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	e7f8      	b.n	8005df0 <_calloc_r+0x16>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f7fc fb16 	bl	8002430 <memset>
 8005e04:	e7f4      	b.n	8005df0 <_calloc_r+0x16>
	...

08005e08 <_free_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d044      	beq.n	8005e98 <_free_r+0x90>
 8005e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e12:	9001      	str	r0, [sp, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1a:	bfb8      	it	lt
 8005e1c:	18e4      	addlt	r4, r4, r3
 8005e1e:	f001 f88b 	bl	8006f38 <__malloc_lock>
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <_free_r+0x94>)
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	b933      	cbnz	r3, 8005e38 <_free_r+0x30>
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	6014      	str	r4, [r2, #0]
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e34:	f001 b886 	b.w	8006f44 <__malloc_unlock>
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d908      	bls.n	8005e4e <_free_r+0x46>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf01      	itttt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	1949      	addeq	r1, r1, r5
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	e7ed      	b.n	8005e2a <_free_r+0x22>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x50>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x46>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x70>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1e0      	bne.n	8005e2e <_free_r+0x26>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7da      	b.n	8005e2e <_free_r+0x26>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x78>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d6      	b.n	8005e2e <_free_r+0x26>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7ca      	b.n	8005e2e <_free_r+0x26>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	20000634 	.word	0x20000634

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fd28 	bl	8006900 <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fd23 	bl	8006900 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fd18 	bl	8006900 <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	20000638 	.word	0x20000638

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	2600      	movs	r6, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f001 f815 	bl	8006f38 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fce4 	bl	8006900 <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 ffdd 	bl	8006f44 <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f000 ffc4 	bl	8006f44 <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	20000634 	.word	0x20000634

08005fc8 <__ssputs_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	688e      	ldr	r6, [r1, #8]
 8005fce:	429e      	cmp	r6, r3
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	461f      	mov	r7, r3
 8005fd8:	d838      	bhi.n	800604c <__ssputs_r+0x84>
 8005fda:	898a      	ldrh	r2, [r1, #12]
 8005fdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fe0:	d032      	beq.n	8006048 <__ssputs_r+0x80>
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	6909      	ldr	r1, [r1, #16]
 8005fe6:	eba5 0901 	sub.w	r9, r5, r1
 8005fea:	6965      	ldr	r5, [r4, #20]
 8005fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	444b      	add	r3, r9
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	bf38      	it	cc
 8005ffe:	461d      	movcc	r5, r3
 8006000:	0553      	lsls	r3, r2, #21
 8006002:	d531      	bpl.n	8006068 <__ssputs_r+0xa0>
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ff6b 	bl	8005ee0 <_malloc_r>
 800600a:	4606      	mov	r6, r0
 800600c:	b950      	cbnz	r0, 8006024 <__ssputs_r+0x5c>
 800600e:	230c      	movs	r3, #12
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	6921      	ldr	r1, [r4, #16]
 8006026:	464a      	mov	r2, r9
 8006028:	f7ff fa08 	bl	800543c <memcpy>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	6126      	str	r6, [r4, #16]
 800603a:	6165      	str	r5, [r4, #20]
 800603c:	444e      	add	r6, r9
 800603e:	eba5 0509 	sub.w	r5, r5, r9
 8006042:	6026      	str	r6, [r4, #0]
 8006044:	60a5      	str	r5, [r4, #8]
 8006046:	463e      	mov	r6, r7
 8006048:	42be      	cmp	r6, r7
 800604a:	d900      	bls.n	800604e <__ssputs_r+0x86>
 800604c:	463e      	mov	r6, r7
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	4632      	mov	r2, r6
 8006052:	4641      	mov	r1, r8
 8006054:	f000 ff56 	bl	8006f04 <memmove>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	1b9b      	subs	r3, r3, r6
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4433      	add	r3, r6
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	2000      	movs	r0, #0
 8006066:	e7db      	b.n	8006020 <__ssputs_r+0x58>
 8006068:	462a      	mov	r2, r5
 800606a:	f000 ff71 	bl	8006f50 <_realloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1e1      	bne.n	8006038 <__ssputs_r+0x70>
 8006074:	6921      	ldr	r1, [r4, #16]
 8006076:	4650      	mov	r0, sl
 8006078:	f7ff fec6 	bl	8005e08 <_free_r>
 800607c:	e7c7      	b.n	800600e <__ssputs_r+0x46>
	...

08006080 <_svfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4698      	mov	r8, r3
 8006086:	898b      	ldrh	r3, [r1, #12]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	b09d      	sub	sp, #116	; 0x74
 800608c:	4607      	mov	r7, r0
 800608e:	460d      	mov	r5, r1
 8006090:	4614      	mov	r4, r2
 8006092:	d50e      	bpl.n	80060b2 <_svfiprintf_r+0x32>
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	b963      	cbnz	r3, 80060b2 <_svfiprintf_r+0x32>
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	f7ff ff21 	bl	8005ee0 <_malloc_r>
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	6128      	str	r0, [r5, #16]
 80060a2:	b920      	cbnz	r0, 80060ae <_svfiprintf_r+0x2e>
 80060a4:	230c      	movs	r3, #12
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e0d1      	b.n	8006252 <_svfiprintf_r+0x1d2>
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	616b      	str	r3, [r5, #20]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	2320      	movs	r3, #32
 80060b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c0:	2330      	movs	r3, #48	; 0x30
 80060c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800626c <_svfiprintf_r+0x1ec>
 80060c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ca:	f04f 0901 	mov.w	r9, #1
 80060ce:	4623      	mov	r3, r4
 80060d0:	469a      	mov	sl, r3
 80060d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d6:	b10a      	cbz	r2, 80060dc <_svfiprintf_r+0x5c>
 80060d8:	2a25      	cmp	r2, #37	; 0x25
 80060da:	d1f9      	bne.n	80060d0 <_svfiprintf_r+0x50>
 80060dc:	ebba 0b04 	subs.w	fp, sl, r4
 80060e0:	d00b      	beq.n	80060fa <_svfiprintf_r+0x7a>
 80060e2:	465b      	mov	r3, fp
 80060e4:	4622      	mov	r2, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff ff6d 	bl	8005fc8 <__ssputs_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	f000 80aa 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 80060f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f6:	445a      	add	r2, fp
 80060f8:	9209      	str	r2, [sp, #36]	; 0x24
 80060fa:	f89a 3000 	ldrb.w	r3, [sl]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80a2 	beq.w	8006248 <_svfiprintf_r+0x1c8>
 8006104:	2300      	movs	r3, #0
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610e:	f10a 0a01 	add.w	sl, sl, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611a:	931a      	str	r3, [sp, #104]	; 0x68
 800611c:	4654      	mov	r4, sl
 800611e:	2205      	movs	r2, #5
 8006120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006124:	4851      	ldr	r0, [pc, #324]	; (800626c <_svfiprintf_r+0x1ec>)
 8006126:	f7fa f873 	bl	8000210 <memchr>
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	b9d8      	cbnz	r0, 8006166 <_svfiprintf_r+0xe6>
 800612e:	06d0      	lsls	r0, r2, #27
 8006130:	bf44      	itt	mi
 8006132:	2320      	movmi	r3, #32
 8006134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006138:	0711      	lsls	r1, r2, #28
 800613a:	bf44      	itt	mi
 800613c:	232b      	movmi	r3, #43	; 0x2b
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	f89a 3000 	ldrb.w	r3, [sl]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d015      	beq.n	8006176 <_svfiprintf_r+0xf6>
 800614a:	9a07      	ldr	r2, [sp, #28]
 800614c:	4654      	mov	r4, sl
 800614e:	2000      	movs	r0, #0
 8006150:	f04f 0c0a 	mov.w	ip, #10
 8006154:	4621      	mov	r1, r4
 8006156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615a:	3b30      	subs	r3, #48	; 0x30
 800615c:	2b09      	cmp	r3, #9
 800615e:	d94e      	bls.n	80061fe <_svfiprintf_r+0x17e>
 8006160:	b1b0      	cbz	r0, 8006190 <_svfiprintf_r+0x110>
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	e014      	b.n	8006190 <_svfiprintf_r+0x110>
 8006166:	eba0 0308 	sub.w	r3, r0, r8
 800616a:	fa09 f303 	lsl.w	r3, r9, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	46a2      	mov	sl, r4
 8006174:	e7d2      	b.n	800611c <_svfiprintf_r+0x9c>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	9103      	str	r1, [sp, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	bfbb      	ittet	lt
 8006182:	425b      	neglt	r3, r3
 8006184:	f042 0202 	orrlt.w	r2, r2, #2
 8006188:	9307      	strge	r3, [sp, #28]
 800618a:	9307      	strlt	r3, [sp, #28]
 800618c:	bfb8      	it	lt
 800618e:	9204      	strlt	r2, [sp, #16]
 8006190:	7823      	ldrb	r3, [r4, #0]
 8006192:	2b2e      	cmp	r3, #46	; 0x2e
 8006194:	d10c      	bne.n	80061b0 <_svfiprintf_r+0x130>
 8006196:	7863      	ldrb	r3, [r4, #1]
 8006198:	2b2a      	cmp	r3, #42	; 0x2a
 800619a:	d135      	bne.n	8006208 <_svfiprintf_r+0x188>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9203      	str	r2, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ac:	3402      	adds	r4, #2
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800627c <_svfiprintf_r+0x1fc>
 80061b4:	7821      	ldrb	r1, [r4, #0]
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	f7fa f829 	bl	8000210 <memchr>
 80061be:	b140      	cbz	r0, 80061d2 <_svfiprintf_r+0x152>
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	4303      	orrs	r3, r0
 80061ce:	3401      	adds	r4, #1
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d6:	4826      	ldr	r0, [pc, #152]	; (8006270 <_svfiprintf_r+0x1f0>)
 80061d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061dc:	2206      	movs	r2, #6
 80061de:	f7fa f817 	bl	8000210 <memchr>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d038      	beq.n	8006258 <_svfiprintf_r+0x1d8>
 80061e6:	4b23      	ldr	r3, [pc, #140]	; (8006274 <_svfiprintf_r+0x1f4>)
 80061e8:	bb1b      	cbnz	r3, 8006232 <_svfiprintf_r+0x1b2>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	3307      	adds	r3, #7
 80061ee:	f023 0307 	bic.w	r3, r3, #7
 80061f2:	3308      	adds	r3, #8
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	4433      	add	r3, r6
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	e767      	b.n	80060ce <_svfiprintf_r+0x4e>
 80061fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006202:	460c      	mov	r4, r1
 8006204:	2001      	movs	r0, #1
 8006206:	e7a5      	b.n	8006154 <_svfiprintf_r+0xd4>
 8006208:	2300      	movs	r3, #0
 800620a:	3401      	adds	r4, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0c0a 	mov.w	ip, #10
 8006214:	4620      	mov	r0, r4
 8006216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621a:	3a30      	subs	r2, #48	; 0x30
 800621c:	2a09      	cmp	r2, #9
 800621e:	d903      	bls.n	8006228 <_svfiprintf_r+0x1a8>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0c5      	beq.n	80061b0 <_svfiprintf_r+0x130>
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	e7c3      	b.n	80061b0 <_svfiprintf_r+0x130>
 8006228:	fb0c 2101 	mla	r1, ip, r1, r2
 800622c:	4604      	mov	r4, r0
 800622e:	2301      	movs	r3, #1
 8006230:	e7f0      	b.n	8006214 <_svfiprintf_r+0x194>
 8006232:	ab03      	add	r3, sp, #12
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <_svfiprintf_r+0x1f8>)
 800623a:	a904      	add	r1, sp, #16
 800623c:	4638      	mov	r0, r7
 800623e:	f7fc f99f 	bl	8002580 <_printf_float>
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	4606      	mov	r6, r0
 8006246:	d1d6      	bne.n	80061f6 <_svfiprintf_r+0x176>
 8006248:	89ab      	ldrh	r3, [r5, #12]
 800624a:	065b      	lsls	r3, r3, #25
 800624c:	f53f af2c 	bmi.w	80060a8 <_svfiprintf_r+0x28>
 8006250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006252:	b01d      	add	sp, #116	; 0x74
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	ab03      	add	r3, sp, #12
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	462a      	mov	r2, r5
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <_svfiprintf_r+0x1f8>)
 8006260:	a904      	add	r1, sp, #16
 8006262:	4638      	mov	r0, r7
 8006264:	f7fc fc30 	bl	8002ac8 <_printf_i>
 8006268:	e7eb      	b.n	8006242 <_svfiprintf_r+0x1c2>
 800626a:	bf00      	nop
 800626c:	08007b9c 	.word	0x08007b9c
 8006270:	08007ba6 	.word	0x08007ba6
 8006274:	08002581 	.word	0x08002581
 8006278:	08005fc9 	.word	0x08005fc9
 800627c:	08007ba2 	.word	0x08007ba2

08006280 <_sungetc_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	1c4b      	adds	r3, r1, #1
 8006284:	4614      	mov	r4, r2
 8006286:	d103      	bne.n	8006290 <_sungetc_r+0x10>
 8006288:	f04f 35ff 	mov.w	r5, #4294967295
 800628c:	4628      	mov	r0, r5
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	8993      	ldrh	r3, [r2, #12]
 8006292:	f023 0320 	bic.w	r3, r3, #32
 8006296:	8193      	strh	r3, [r2, #12]
 8006298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800629a:	6852      	ldr	r2, [r2, #4]
 800629c:	b2cd      	uxtb	r5, r1
 800629e:	b18b      	cbz	r3, 80062c4 <_sungetc_r+0x44>
 80062a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062a2:	4293      	cmp	r3, r2
 80062a4:	dd08      	ble.n	80062b8 <_sungetc_r+0x38>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	6022      	str	r2, [r4, #0]
 80062ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	3301      	adds	r3, #1
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	e7e9      	b.n	800628c <_sungetc_r+0xc>
 80062b8:	4621      	mov	r1, r4
 80062ba:	f000 fbf1 	bl	8006aa0 <__submore>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d0f1      	beq.n	80062a6 <_sungetc_r+0x26>
 80062c2:	e7e1      	b.n	8006288 <_sungetc_r+0x8>
 80062c4:	6921      	ldr	r1, [r4, #16]
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	b151      	cbz	r1, 80062e0 <_sungetc_r+0x60>
 80062ca:	4299      	cmp	r1, r3
 80062cc:	d208      	bcs.n	80062e0 <_sungetc_r+0x60>
 80062ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80062d2:	42a9      	cmp	r1, r5
 80062d4:	d104      	bne.n	80062e0 <_sungetc_r+0x60>
 80062d6:	3b01      	subs	r3, #1
 80062d8:	3201      	adds	r2, #1
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	6062      	str	r2, [r4, #4]
 80062de:	e7d5      	b.n	800628c <_sungetc_r+0xc>
 80062e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80062e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ea:	2303      	movs	r3, #3
 80062ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80062ee:	4623      	mov	r3, r4
 80062f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	2301      	movs	r3, #1
 80062f8:	e7dc      	b.n	80062b4 <_sungetc_r+0x34>

080062fa <__ssrefill_r>:
 80062fa:	b510      	push	{r4, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006300:	b169      	cbz	r1, 800631e <__ssrefill_r+0x24>
 8006302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006306:	4299      	cmp	r1, r3
 8006308:	d001      	beq.n	800630e <__ssrefill_r+0x14>
 800630a:	f7ff fd7d 	bl	8005e08 <_free_r>
 800630e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006310:	6063      	str	r3, [r4, #4]
 8006312:	2000      	movs	r0, #0
 8006314:	6360      	str	r0, [r4, #52]	; 0x34
 8006316:	b113      	cbz	r3, 800631e <__ssrefill_r+0x24>
 8006318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	bd10      	pop	{r4, pc}
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	2300      	movs	r3, #0
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	f043 0320 	orr.w	r3, r3, #32
 800632c:	81a3      	strh	r3, [r4, #12]
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	e7f3      	b.n	800631c <__ssrefill_r+0x22>

08006334 <__ssvfiscanf_r>:
 8006334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	460c      	mov	r4, r1
 800633a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800633e:	2100      	movs	r1, #0
 8006340:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006344:	49a6      	ldr	r1, [pc, #664]	; (80065e0 <__ssvfiscanf_r+0x2ac>)
 8006346:	91a0      	str	r1, [sp, #640]	; 0x280
 8006348:	f10d 0804 	add.w	r8, sp, #4
 800634c:	49a5      	ldr	r1, [pc, #660]	; (80065e4 <__ssvfiscanf_r+0x2b0>)
 800634e:	4fa6      	ldr	r7, [pc, #664]	; (80065e8 <__ssvfiscanf_r+0x2b4>)
 8006350:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80065ec <__ssvfiscanf_r+0x2b8>
 8006354:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006358:	4606      	mov	r6, r0
 800635a:	91a1      	str	r1, [sp, #644]	; 0x284
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	7813      	ldrb	r3, [r2, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 815a 	beq.w	800661a <__ssvfiscanf_r+0x2e6>
 8006366:	5dd9      	ldrb	r1, [r3, r7]
 8006368:	f011 0108 	ands.w	r1, r1, #8
 800636c:	f102 0501 	add.w	r5, r2, #1
 8006370:	d019      	beq.n	80063a6 <__ssvfiscanf_r+0x72>
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd0f      	ble.n	8006398 <__ssvfiscanf_r+0x64>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	5cba      	ldrb	r2, [r7, r2]
 800637e:	0712      	lsls	r2, r2, #28
 8006380:	d401      	bmi.n	8006386 <__ssvfiscanf_r+0x52>
 8006382:	462a      	mov	r2, r5
 8006384:	e7eb      	b.n	800635e <__ssvfiscanf_r+0x2a>
 8006386:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006388:	3201      	adds	r2, #1
 800638a:	9245      	str	r2, [sp, #276]	; 0x114
 800638c:	6862      	ldr	r2, [r4, #4]
 800638e:	3301      	adds	r3, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	6062      	str	r2, [r4, #4]
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	e7ec      	b.n	8006372 <__ssvfiscanf_r+0x3e>
 8006398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800639a:	4621      	mov	r1, r4
 800639c:	4630      	mov	r0, r6
 800639e:	4798      	blx	r3
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d0e9      	beq.n	8006378 <__ssvfiscanf_r+0x44>
 80063a4:	e7ed      	b.n	8006382 <__ssvfiscanf_r+0x4e>
 80063a6:	2b25      	cmp	r3, #37	; 0x25
 80063a8:	d012      	beq.n	80063d0 <__ssvfiscanf_r+0x9c>
 80063aa:	469a      	mov	sl, r3
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f340 8091 	ble.w	80064d6 <__ssvfiscanf_r+0x1a2>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	7813      	ldrb	r3, [r2, #0]
 80063b8:	4553      	cmp	r3, sl
 80063ba:	f040 812e 	bne.w	800661a <__ssvfiscanf_r+0x2e6>
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	6063      	str	r3, [r4, #4]
 80063c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80063c6:	3201      	adds	r2, #1
 80063c8:	3301      	adds	r3, #1
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	9345      	str	r3, [sp, #276]	; 0x114
 80063ce:	e7d8      	b.n	8006382 <__ssvfiscanf_r+0x4e>
 80063d0:	9141      	str	r1, [sp, #260]	; 0x104
 80063d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80063d4:	7853      	ldrb	r3, [r2, #1]
 80063d6:	2b2a      	cmp	r3, #42	; 0x2a
 80063d8:	bf02      	ittt	eq
 80063da:	2310      	moveq	r3, #16
 80063dc:	1c95      	addeq	r5, r2, #2
 80063de:	9341      	streq	r3, [sp, #260]	; 0x104
 80063e0:	220a      	movs	r2, #10
 80063e2:	46aa      	mov	sl, r5
 80063e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80063e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80063ec:	2b09      	cmp	r3, #9
 80063ee:	d91d      	bls.n	800642c <__ssvfiscanf_r+0xf8>
 80063f0:	487e      	ldr	r0, [pc, #504]	; (80065ec <__ssvfiscanf_r+0x2b8>)
 80063f2:	2203      	movs	r2, #3
 80063f4:	f7f9 ff0c 	bl	8000210 <memchr>
 80063f8:	b140      	cbz	r0, 800640c <__ssvfiscanf_r+0xd8>
 80063fa:	2301      	movs	r3, #1
 80063fc:	eba0 0009 	sub.w	r0, r0, r9
 8006400:	fa03 f000 	lsl.w	r0, r3, r0
 8006404:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006406:	4318      	orrs	r0, r3
 8006408:	9041      	str	r0, [sp, #260]	; 0x104
 800640a:	4655      	mov	r5, sl
 800640c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006410:	2b78      	cmp	r3, #120	; 0x78
 8006412:	d806      	bhi.n	8006422 <__ssvfiscanf_r+0xee>
 8006414:	2b57      	cmp	r3, #87	; 0x57
 8006416:	d810      	bhi.n	800643a <__ssvfiscanf_r+0x106>
 8006418:	2b25      	cmp	r3, #37	; 0x25
 800641a:	d0c6      	beq.n	80063aa <__ssvfiscanf_r+0x76>
 800641c:	d856      	bhi.n	80064cc <__ssvfiscanf_r+0x198>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d064      	beq.n	80064ec <__ssvfiscanf_r+0x1b8>
 8006422:	2303      	movs	r3, #3
 8006424:	9347      	str	r3, [sp, #284]	; 0x11c
 8006426:	230a      	movs	r3, #10
 8006428:	9342      	str	r3, [sp, #264]	; 0x108
 800642a:	e071      	b.n	8006510 <__ssvfiscanf_r+0x1dc>
 800642c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800642e:	fb02 1103 	mla	r1, r2, r3, r1
 8006432:	3930      	subs	r1, #48	; 0x30
 8006434:	9143      	str	r1, [sp, #268]	; 0x10c
 8006436:	4655      	mov	r5, sl
 8006438:	e7d3      	b.n	80063e2 <__ssvfiscanf_r+0xae>
 800643a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800643e:	2a20      	cmp	r2, #32
 8006440:	d8ef      	bhi.n	8006422 <__ssvfiscanf_r+0xee>
 8006442:	a101      	add	r1, pc, #4	; (adr r1, 8006448 <__ssvfiscanf_r+0x114>)
 8006444:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006448:	080064fb 	.word	0x080064fb
 800644c:	08006423 	.word	0x08006423
 8006450:	08006423 	.word	0x08006423
 8006454:	08006559 	.word	0x08006559
 8006458:	08006423 	.word	0x08006423
 800645c:	08006423 	.word	0x08006423
 8006460:	08006423 	.word	0x08006423
 8006464:	08006423 	.word	0x08006423
 8006468:	08006423 	.word	0x08006423
 800646c:	08006423 	.word	0x08006423
 8006470:	08006423 	.word	0x08006423
 8006474:	0800656f 	.word	0x0800656f
 8006478:	08006545 	.word	0x08006545
 800647c:	080064d3 	.word	0x080064d3
 8006480:	080064d3 	.word	0x080064d3
 8006484:	080064d3 	.word	0x080064d3
 8006488:	08006423 	.word	0x08006423
 800648c:	08006549 	.word	0x08006549
 8006490:	08006423 	.word	0x08006423
 8006494:	08006423 	.word	0x08006423
 8006498:	08006423 	.word	0x08006423
 800649c:	08006423 	.word	0x08006423
 80064a0:	0800657f 	.word	0x0800657f
 80064a4:	08006551 	.word	0x08006551
 80064a8:	080064f3 	.word	0x080064f3
 80064ac:	08006423 	.word	0x08006423
 80064b0:	08006423 	.word	0x08006423
 80064b4:	0800657b 	.word	0x0800657b
 80064b8:	08006423 	.word	0x08006423
 80064bc:	08006545 	.word	0x08006545
 80064c0:	08006423 	.word	0x08006423
 80064c4:	08006423 	.word	0x08006423
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	3b45      	subs	r3, #69	; 0x45
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d8a7      	bhi.n	8006422 <__ssvfiscanf_r+0xee>
 80064d2:	2305      	movs	r3, #5
 80064d4:	e01b      	b.n	800650e <__ssvfiscanf_r+0x1da>
 80064d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064d8:	4621      	mov	r1, r4
 80064da:	4630      	mov	r0, r6
 80064dc:	4798      	blx	r3
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f af68 	beq.w	80063b4 <__ssvfiscanf_r+0x80>
 80064e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f040 808d 	bne.w	8006606 <__ssvfiscanf_r+0x2d2>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	e08f      	b.n	8006612 <__ssvfiscanf_r+0x2de>
 80064f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80064f4:	f042 0220 	orr.w	r2, r2, #32
 80064f8:	9241      	str	r2, [sp, #260]	; 0x104
 80064fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80064fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006500:	9241      	str	r2, [sp, #260]	; 0x104
 8006502:	2210      	movs	r2, #16
 8006504:	2b6f      	cmp	r3, #111	; 0x6f
 8006506:	9242      	str	r2, [sp, #264]	; 0x108
 8006508:	bf34      	ite	cc
 800650a:	2303      	movcc	r3, #3
 800650c:	2304      	movcs	r3, #4
 800650e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd42      	ble.n	800659c <__ssvfiscanf_r+0x268>
 8006516:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006518:	0659      	lsls	r1, r3, #25
 800651a:	d404      	bmi.n	8006526 <__ssvfiscanf_r+0x1f2>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	5cba      	ldrb	r2, [r7, r2]
 8006522:	0712      	lsls	r2, r2, #28
 8006524:	d441      	bmi.n	80065aa <__ssvfiscanf_r+0x276>
 8006526:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006528:	2b02      	cmp	r3, #2
 800652a:	dc50      	bgt.n	80065ce <__ssvfiscanf_r+0x29a>
 800652c:	466b      	mov	r3, sp
 800652e:	4622      	mov	r2, r4
 8006530:	a941      	add	r1, sp, #260	; 0x104
 8006532:	4630      	mov	r0, r6
 8006534:	f000 f876 	bl	8006624 <_scanf_chars>
 8006538:	2801      	cmp	r0, #1
 800653a:	d06e      	beq.n	800661a <__ssvfiscanf_r+0x2e6>
 800653c:	2802      	cmp	r0, #2
 800653e:	f47f af20 	bne.w	8006382 <__ssvfiscanf_r+0x4e>
 8006542:	e7cf      	b.n	80064e4 <__ssvfiscanf_r+0x1b0>
 8006544:	220a      	movs	r2, #10
 8006546:	e7dd      	b.n	8006504 <__ssvfiscanf_r+0x1d0>
 8006548:	2300      	movs	r3, #0
 800654a:	9342      	str	r3, [sp, #264]	; 0x108
 800654c:	2303      	movs	r3, #3
 800654e:	e7de      	b.n	800650e <__ssvfiscanf_r+0x1da>
 8006550:	2308      	movs	r3, #8
 8006552:	9342      	str	r3, [sp, #264]	; 0x108
 8006554:	2304      	movs	r3, #4
 8006556:	e7da      	b.n	800650e <__ssvfiscanf_r+0x1da>
 8006558:	4629      	mov	r1, r5
 800655a:	4640      	mov	r0, r8
 800655c:	f000 f9e0 	bl	8006920 <__sccl>
 8006560:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006566:	9341      	str	r3, [sp, #260]	; 0x104
 8006568:	4605      	mov	r5, r0
 800656a:	2301      	movs	r3, #1
 800656c:	e7cf      	b.n	800650e <__ssvfiscanf_r+0x1da>
 800656e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006574:	9341      	str	r3, [sp, #260]	; 0x104
 8006576:	2300      	movs	r3, #0
 8006578:	e7c9      	b.n	800650e <__ssvfiscanf_r+0x1da>
 800657a:	2302      	movs	r3, #2
 800657c:	e7c7      	b.n	800650e <__ssvfiscanf_r+0x1da>
 800657e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006580:	06c3      	lsls	r3, r0, #27
 8006582:	f53f aefe 	bmi.w	8006382 <__ssvfiscanf_r+0x4e>
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800658a:	1d19      	adds	r1, r3, #4
 800658c:	9100      	str	r1, [sp, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f010 0f01 	tst.w	r0, #1
 8006594:	bf14      	ite	ne
 8006596:	801a      	strhne	r2, [r3, #0]
 8006598:	601a      	streq	r2, [r3, #0]
 800659a:	e6f2      	b.n	8006382 <__ssvfiscanf_r+0x4e>
 800659c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800659e:	4621      	mov	r1, r4
 80065a0:	4630      	mov	r0, r6
 80065a2:	4798      	blx	r3
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d0b6      	beq.n	8006516 <__ssvfiscanf_r+0x1e2>
 80065a8:	e79c      	b.n	80064e4 <__ssvfiscanf_r+0x1b0>
 80065aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80065ac:	3201      	adds	r2, #1
 80065ae:	9245      	str	r2, [sp, #276]	; 0x114
 80065b0:	6862      	ldr	r2, [r4, #4]
 80065b2:	3a01      	subs	r2, #1
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	6062      	str	r2, [r4, #4]
 80065b8:	dd02      	ble.n	80065c0 <__ssvfiscanf_r+0x28c>
 80065ba:	3301      	adds	r3, #1
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	e7ad      	b.n	800651c <__ssvfiscanf_r+0x1e8>
 80065c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80065c2:	4621      	mov	r1, r4
 80065c4:	4630      	mov	r0, r6
 80065c6:	4798      	blx	r3
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0a7      	beq.n	800651c <__ssvfiscanf_r+0x1e8>
 80065cc:	e78a      	b.n	80064e4 <__ssvfiscanf_r+0x1b0>
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	dc0e      	bgt.n	80065f0 <__ssvfiscanf_r+0x2bc>
 80065d2:	466b      	mov	r3, sp
 80065d4:	4622      	mov	r2, r4
 80065d6:	a941      	add	r1, sp, #260	; 0x104
 80065d8:	4630      	mov	r0, r6
 80065da:	f000 f87d 	bl	80066d8 <_scanf_i>
 80065de:	e7ab      	b.n	8006538 <__ssvfiscanf_r+0x204>
 80065e0:	08006281 	.word	0x08006281
 80065e4:	080062fb 	.word	0x080062fb
 80065e8:	08007839 	.word	0x08007839
 80065ec:	08007ba2 	.word	0x08007ba2
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <__ssvfiscanf_r+0x2ec>)
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f43f aec5 	beq.w	8006382 <__ssvfiscanf_r+0x4e>
 80065f8:	466b      	mov	r3, sp
 80065fa:	4622      	mov	r2, r4
 80065fc:	a941      	add	r1, sp, #260	; 0x104
 80065fe:	4630      	mov	r0, r6
 8006600:	f7fc fb88 	bl	8002d14 <_scanf_float>
 8006604:	e798      	b.n	8006538 <__ssvfiscanf_r+0x204>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f013 0f40 	tst.w	r3, #64	; 0x40
 800660c:	bf18      	it	ne
 800660e:	f04f 30ff 	movne.w	r0, #4294967295
 8006612:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800661c:	e7f9      	b.n	8006612 <__ssvfiscanf_r+0x2de>
 800661e:	bf00      	nop
 8006620:	08002d15 	.word	0x08002d15

08006624 <_scanf_chars>:
 8006624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006628:	4615      	mov	r5, r2
 800662a:	688a      	ldr	r2, [r1, #8]
 800662c:	4680      	mov	r8, r0
 800662e:	460c      	mov	r4, r1
 8006630:	b932      	cbnz	r2, 8006640 <_scanf_chars+0x1c>
 8006632:	698a      	ldr	r2, [r1, #24]
 8006634:	2a00      	cmp	r2, #0
 8006636:	bf0c      	ite	eq
 8006638:	2201      	moveq	r2, #1
 800663a:	f04f 32ff 	movne.w	r2, #4294967295
 800663e:	608a      	str	r2, [r1, #8]
 8006640:	6822      	ldr	r2, [r4, #0]
 8006642:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80066d4 <_scanf_chars+0xb0>
 8006646:	06d1      	lsls	r1, r2, #27
 8006648:	bf5f      	itttt	pl
 800664a:	681a      	ldrpl	r2, [r3, #0]
 800664c:	1d11      	addpl	r1, r2, #4
 800664e:	6019      	strpl	r1, [r3, #0]
 8006650:	6816      	ldrpl	r6, [r2, #0]
 8006652:	2700      	movs	r7, #0
 8006654:	69a0      	ldr	r0, [r4, #24]
 8006656:	b188      	cbz	r0, 800667c <_scanf_chars+0x58>
 8006658:	2801      	cmp	r0, #1
 800665a:	d107      	bne.n	800666c <_scanf_chars+0x48>
 800665c:	682a      	ldr	r2, [r5, #0]
 800665e:	7811      	ldrb	r1, [r2, #0]
 8006660:	6962      	ldr	r2, [r4, #20]
 8006662:	5c52      	ldrb	r2, [r2, r1]
 8006664:	b952      	cbnz	r2, 800667c <_scanf_chars+0x58>
 8006666:	2f00      	cmp	r7, #0
 8006668:	d031      	beq.n	80066ce <_scanf_chars+0xaa>
 800666a:	e022      	b.n	80066b2 <_scanf_chars+0x8e>
 800666c:	2802      	cmp	r0, #2
 800666e:	d120      	bne.n	80066b2 <_scanf_chars+0x8e>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006678:	071b      	lsls	r3, r3, #28
 800667a:	d41a      	bmi.n	80066b2 <_scanf_chars+0x8e>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	06da      	lsls	r2, r3, #27
 8006680:	bf5e      	ittt	pl
 8006682:	682b      	ldrpl	r3, [r5, #0]
 8006684:	781b      	ldrbpl	r3, [r3, #0]
 8006686:	f806 3b01 	strbpl.w	r3, [r6], #1
 800668a:	682a      	ldr	r2, [r5, #0]
 800668c:	686b      	ldr	r3, [r5, #4]
 800668e:	3201      	adds	r2, #1
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	68a2      	ldr	r2, [r4, #8]
 8006694:	3b01      	subs	r3, #1
 8006696:	3a01      	subs	r2, #1
 8006698:	606b      	str	r3, [r5, #4]
 800669a:	3701      	adds	r7, #1
 800669c:	60a2      	str	r2, [r4, #8]
 800669e:	b142      	cbz	r2, 80066b2 <_scanf_chars+0x8e>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dcd7      	bgt.n	8006654 <_scanf_chars+0x30>
 80066a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066a8:	4629      	mov	r1, r5
 80066aa:	4640      	mov	r0, r8
 80066ac:	4798      	blx	r3
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d0d0      	beq.n	8006654 <_scanf_chars+0x30>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	f013 0310 	ands.w	r3, r3, #16
 80066b8:	d105      	bne.n	80066c6 <_scanf_chars+0xa2>
 80066ba:	68e2      	ldr	r2, [r4, #12]
 80066bc:	3201      	adds	r2, #1
 80066be:	60e2      	str	r2, [r4, #12]
 80066c0:	69a2      	ldr	r2, [r4, #24]
 80066c2:	b102      	cbz	r2, 80066c6 <_scanf_chars+0xa2>
 80066c4:	7033      	strb	r3, [r6, #0]
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	443b      	add	r3, r7
 80066ca:	6123      	str	r3, [r4, #16]
 80066cc:	2000      	movs	r0, #0
 80066ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d2:	bf00      	nop
 80066d4:	08007839 	.word	0x08007839

080066d8 <_scanf_i>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	4698      	mov	r8, r3
 80066de:	4b76      	ldr	r3, [pc, #472]	; (80068b8 <_scanf_i+0x1e0>)
 80066e0:	460c      	mov	r4, r1
 80066e2:	4682      	mov	sl, r0
 80066e4:	4616      	mov	r6, r2
 80066e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ea:	b087      	sub	sp, #28
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066f2:	4b72      	ldr	r3, [pc, #456]	; (80068bc <_scanf_i+0x1e4>)
 80066f4:	69a1      	ldr	r1, [r4, #24]
 80066f6:	4a72      	ldr	r2, [pc, #456]	; (80068c0 <_scanf_i+0x1e8>)
 80066f8:	2903      	cmp	r1, #3
 80066fa:	bf18      	it	ne
 80066fc:	461a      	movne	r2, r3
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	9201      	str	r2, [sp, #4]
 8006702:	1e5a      	subs	r2, r3, #1
 8006704:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006708:	bf88      	it	hi
 800670a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800670e:	4627      	mov	r7, r4
 8006710:	bf82      	ittt	hi
 8006712:	eb03 0905 	addhi.w	r9, r3, r5
 8006716:	f240 135d 	movwhi	r3, #349	; 0x15d
 800671a:	60a3      	strhi	r3, [r4, #8]
 800671c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006720:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006724:	bf98      	it	ls
 8006726:	f04f 0900 	movls.w	r9, #0
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	463d      	mov	r5, r7
 800672e:	f04f 0b00 	mov.w	fp, #0
 8006732:	6831      	ldr	r1, [r6, #0]
 8006734:	ab03      	add	r3, sp, #12
 8006736:	7809      	ldrb	r1, [r1, #0]
 8006738:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800673c:	2202      	movs	r2, #2
 800673e:	f7f9 fd67 	bl	8000210 <memchr>
 8006742:	b328      	cbz	r0, 8006790 <_scanf_i+0xb8>
 8006744:	f1bb 0f01 	cmp.w	fp, #1
 8006748:	d159      	bne.n	80067fe <_scanf_i+0x126>
 800674a:	6862      	ldr	r2, [r4, #4]
 800674c:	b92a      	cbnz	r2, 800675a <_scanf_i+0x82>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	2308      	movs	r3, #8
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006760:	6022      	str	r2, [r4, #0]
 8006762:	68a2      	ldr	r2, [r4, #8]
 8006764:	1e51      	subs	r1, r2, #1
 8006766:	60a1      	str	r1, [r4, #8]
 8006768:	b192      	cbz	r2, 8006790 <_scanf_i+0xb8>
 800676a:	6832      	ldr	r2, [r6, #0]
 800676c:	1c51      	adds	r1, r2, #1
 800676e:	6031      	str	r1, [r6, #0]
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	f805 2b01 	strb.w	r2, [r5], #1
 8006776:	6872      	ldr	r2, [r6, #4]
 8006778:	3a01      	subs	r2, #1
 800677a:	2a00      	cmp	r2, #0
 800677c:	6072      	str	r2, [r6, #4]
 800677e:	dc07      	bgt.n	8006790 <_scanf_i+0xb8>
 8006780:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006784:	4631      	mov	r1, r6
 8006786:	4650      	mov	r0, sl
 8006788:	4790      	blx	r2
 800678a:	2800      	cmp	r0, #0
 800678c:	f040 8085 	bne.w	800689a <_scanf_i+0x1c2>
 8006790:	f10b 0b01 	add.w	fp, fp, #1
 8006794:	f1bb 0f03 	cmp.w	fp, #3
 8006798:	d1cb      	bne.n	8006732 <_scanf_i+0x5a>
 800679a:	6863      	ldr	r3, [r4, #4]
 800679c:	b90b      	cbnz	r3, 80067a2 <_scanf_i+0xca>
 800679e:	230a      	movs	r3, #10
 80067a0:	6063      	str	r3, [r4, #4]
 80067a2:	6863      	ldr	r3, [r4, #4]
 80067a4:	4947      	ldr	r1, [pc, #284]	; (80068c4 <_scanf_i+0x1ec>)
 80067a6:	6960      	ldr	r0, [r4, #20]
 80067a8:	1ac9      	subs	r1, r1, r3
 80067aa:	f000 f8b9 	bl	8006920 <__sccl>
 80067ae:	f04f 0b00 	mov.w	fp, #0
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d03d      	beq.n	8006836 <_scanf_i+0x15e>
 80067ba:	6831      	ldr	r1, [r6, #0]
 80067bc:	6960      	ldr	r0, [r4, #20]
 80067be:	f891 c000 	ldrb.w	ip, [r1]
 80067c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d035      	beq.n	8006836 <_scanf_i+0x15e>
 80067ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80067ce:	d124      	bne.n	800681a <_scanf_i+0x142>
 80067d0:	0510      	lsls	r0, r2, #20
 80067d2:	d522      	bpl.n	800681a <_scanf_i+0x142>
 80067d4:	f10b 0b01 	add.w	fp, fp, #1
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	d003      	beq.n	80067e6 <_scanf_i+0x10e>
 80067de:	3301      	adds	r3, #1
 80067e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80067e4:	60a3      	str	r3, [r4, #8]
 80067e6:	6873      	ldr	r3, [r6, #4]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	6073      	str	r3, [r6, #4]
 80067ee:	dd1b      	ble.n	8006828 <_scanf_i+0x150>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	68a3      	ldr	r3, [r4, #8]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	60a3      	str	r3, [r4, #8]
 80067fc:	e7d9      	b.n	80067b2 <_scanf_i+0xda>
 80067fe:	f1bb 0f02 	cmp.w	fp, #2
 8006802:	d1ae      	bne.n	8006762 <_scanf_i+0x8a>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800680a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800680e:	d1bf      	bne.n	8006790 <_scanf_i+0xb8>
 8006810:	2310      	movs	r3, #16
 8006812:	6063      	str	r3, [r4, #4]
 8006814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006818:	e7a2      	b.n	8006760 <_scanf_i+0x88>
 800681a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	780b      	ldrb	r3, [r1, #0]
 8006822:	f805 3b01 	strb.w	r3, [r5], #1
 8006826:	e7de      	b.n	80067e6 <_scanf_i+0x10e>
 8006828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800682c:	4631      	mov	r1, r6
 800682e:	4650      	mov	r0, sl
 8006830:	4798      	blx	r3
 8006832:	2800      	cmp	r0, #0
 8006834:	d0df      	beq.n	80067f6 <_scanf_i+0x11e>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	05db      	lsls	r3, r3, #23
 800683a:	d50d      	bpl.n	8006858 <_scanf_i+0x180>
 800683c:	42bd      	cmp	r5, r7
 800683e:	d909      	bls.n	8006854 <_scanf_i+0x17c>
 8006840:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006848:	4632      	mov	r2, r6
 800684a:	4650      	mov	r0, sl
 800684c:	4798      	blx	r3
 800684e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006852:	464d      	mov	r5, r9
 8006854:	42bd      	cmp	r5, r7
 8006856:	d02d      	beq.n	80068b4 <_scanf_i+0x1dc>
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	f012 0210 	ands.w	r2, r2, #16
 800685e:	d113      	bne.n	8006888 <_scanf_i+0x1b0>
 8006860:	702a      	strb	r2, [r5, #0]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	9e01      	ldr	r6, [sp, #4]
 8006866:	4639      	mov	r1, r7
 8006868:	4650      	mov	r0, sl
 800686a:	47b0      	blx	r6
 800686c:	6821      	ldr	r1, [r4, #0]
 800686e:	f8d8 3000 	ldr.w	r3, [r8]
 8006872:	f011 0f20 	tst.w	r1, #32
 8006876:	d013      	beq.n	80068a0 <_scanf_i+0x1c8>
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	f8c8 2000 	str.w	r2, [r8]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6018      	str	r0, [r3, #0]
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60e3      	str	r3, [r4, #12]
 8006888:	1bed      	subs	r5, r5, r7
 800688a:	44ab      	add	fp, r5
 800688c:	6925      	ldr	r5, [r4, #16]
 800688e:	445d      	add	r5, fp
 8006890:	6125      	str	r5, [r4, #16]
 8006892:	2000      	movs	r0, #0
 8006894:	b007      	add	sp, #28
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689a:	f04f 0b00 	mov.w	fp, #0
 800689e:	e7ca      	b.n	8006836 <_scanf_i+0x15e>
 80068a0:	1d1a      	adds	r2, r3, #4
 80068a2:	f8c8 2000 	str.w	r2, [r8]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f011 0f01 	tst.w	r1, #1
 80068ac:	bf14      	ite	ne
 80068ae:	8018      	strhne	r0, [r3, #0]
 80068b0:	6018      	streq	r0, [r3, #0]
 80068b2:	e7e6      	b.n	8006882 <_scanf_i+0x1aa>
 80068b4:	2001      	movs	r0, #1
 80068b6:	e7ed      	b.n	8006894 <_scanf_i+0x1bc>
 80068b8:	080077a0 	.word	0x080077a0
 80068bc:	08006a9d 	.word	0x08006a9d
 80068c0:	08003fbd 	.word	0x08003fbd
 80068c4:	08007bc6 	.word	0x08007bc6

080068c8 <_read_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4d07      	ldr	r5, [pc, #28]	; (80068e8 <_read_r+0x20>)
 80068cc:	4604      	mov	r4, r0
 80068ce:	4608      	mov	r0, r1
 80068d0:	4611      	mov	r1, r2
 80068d2:	2200      	movs	r2, #0
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fa fcd6 	bl	8001288 <_read>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_read_r+0x1e>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_read_r+0x1e>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	2000063c 	.word	0x2000063c
 80068ec:	00000000 	.word	0x00000000

080068f0 <nan>:
 80068f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80068f8 <nan+0x8>
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	00000000 	.word	0x00000000
 80068fc:	7ff80000 	.word	0x7ff80000

08006900 <_sbrk_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d06      	ldr	r5, [pc, #24]	; (800691c <_sbrk_r+0x1c>)
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fa fd2a 	bl	8001364 <_sbrk>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_sbrk_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_sbrk_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	2000063c 	.word	0x2000063c

08006920 <__sccl>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	780b      	ldrb	r3, [r1, #0]
 8006924:	4604      	mov	r4, r0
 8006926:	2b5e      	cmp	r3, #94	; 0x5e
 8006928:	bf0b      	itete	eq
 800692a:	784b      	ldrbeq	r3, [r1, #1]
 800692c:	1c48      	addne	r0, r1, #1
 800692e:	1c88      	addeq	r0, r1, #2
 8006930:	2200      	movne	r2, #0
 8006932:	bf08      	it	eq
 8006934:	2201      	moveq	r2, #1
 8006936:	1e61      	subs	r1, r4, #1
 8006938:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800693c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006940:	42a9      	cmp	r1, r5
 8006942:	d1fb      	bne.n	800693c <__sccl+0x1c>
 8006944:	b90b      	cbnz	r3, 800694a <__sccl+0x2a>
 8006946:	3801      	subs	r0, #1
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	f082 0201 	eor.w	r2, r2, #1
 800694e:	54e2      	strb	r2, [r4, r3]
 8006950:	4605      	mov	r5, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006958:	292d      	cmp	r1, #45	; 0x2d
 800695a:	d006      	beq.n	800696a <__sccl+0x4a>
 800695c:	295d      	cmp	r1, #93	; 0x5d
 800695e:	d0f3      	beq.n	8006948 <__sccl+0x28>
 8006960:	b909      	cbnz	r1, 8006966 <__sccl+0x46>
 8006962:	4628      	mov	r0, r5
 8006964:	e7f0      	b.n	8006948 <__sccl+0x28>
 8006966:	460b      	mov	r3, r1
 8006968:	e7f1      	b.n	800694e <__sccl+0x2e>
 800696a:	786e      	ldrb	r6, [r5, #1]
 800696c:	2e5d      	cmp	r6, #93	; 0x5d
 800696e:	d0fa      	beq.n	8006966 <__sccl+0x46>
 8006970:	42b3      	cmp	r3, r6
 8006972:	dcf8      	bgt.n	8006966 <__sccl+0x46>
 8006974:	3502      	adds	r5, #2
 8006976:	4619      	mov	r1, r3
 8006978:	3101      	adds	r1, #1
 800697a:	428e      	cmp	r6, r1
 800697c:	5462      	strb	r2, [r4, r1]
 800697e:	dcfb      	bgt.n	8006978 <__sccl+0x58>
 8006980:	1af1      	subs	r1, r6, r3
 8006982:	3901      	subs	r1, #1
 8006984:	1c58      	adds	r0, r3, #1
 8006986:	42b3      	cmp	r3, r6
 8006988:	bfa8      	it	ge
 800698a:	2100      	movge	r1, #0
 800698c:	1843      	adds	r3, r0, r1
 800698e:	e7e0      	b.n	8006952 <__sccl+0x32>

08006990 <strncmp>:
 8006990:	b510      	push	{r4, lr}
 8006992:	b17a      	cbz	r2, 80069b4 <strncmp+0x24>
 8006994:	4603      	mov	r3, r0
 8006996:	3901      	subs	r1, #1
 8006998:	1884      	adds	r4, r0, r2
 800699a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800699e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80069a2:	4290      	cmp	r0, r2
 80069a4:	d101      	bne.n	80069aa <strncmp+0x1a>
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	d101      	bne.n	80069ae <strncmp+0x1e>
 80069aa:	1a80      	subs	r0, r0, r2
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d1f3      	bne.n	800699a <strncmp+0xa>
 80069b2:	e7fa      	b.n	80069aa <strncmp+0x1a>
 80069b4:	4610      	mov	r0, r2
 80069b6:	e7f9      	b.n	80069ac <strncmp+0x1c>

080069b8 <_strtoul_l.constprop.0>:
 80069b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069bc:	4f36      	ldr	r7, [pc, #216]	; (8006a98 <_strtoul_l.constprop.0+0xe0>)
 80069be:	4686      	mov	lr, r0
 80069c0:	460d      	mov	r5, r1
 80069c2:	4628      	mov	r0, r5
 80069c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069c8:	5de6      	ldrb	r6, [r4, r7]
 80069ca:	f016 0608 	ands.w	r6, r6, #8
 80069ce:	d1f8      	bne.n	80069c2 <_strtoul_l.constprop.0+0xa>
 80069d0:	2c2d      	cmp	r4, #45	; 0x2d
 80069d2:	d12f      	bne.n	8006a34 <_strtoul_l.constprop.0+0x7c>
 80069d4:	782c      	ldrb	r4, [r5, #0]
 80069d6:	2601      	movs	r6, #1
 80069d8:	1c85      	adds	r5, r0, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d057      	beq.n	8006a8e <_strtoul_l.constprop.0+0xd6>
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d109      	bne.n	80069f6 <_strtoul_l.constprop.0+0x3e>
 80069e2:	2c30      	cmp	r4, #48	; 0x30
 80069e4:	d107      	bne.n	80069f6 <_strtoul_l.constprop.0+0x3e>
 80069e6:	7828      	ldrb	r0, [r5, #0]
 80069e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069ec:	2858      	cmp	r0, #88	; 0x58
 80069ee:	d149      	bne.n	8006a84 <_strtoul_l.constprop.0+0xcc>
 80069f0:	786c      	ldrb	r4, [r5, #1]
 80069f2:	2310      	movs	r3, #16
 80069f4:	3502      	adds	r5, #2
 80069f6:	f04f 38ff 	mov.w	r8, #4294967295
 80069fa:	2700      	movs	r7, #0
 80069fc:	fbb8 f8f3 	udiv	r8, r8, r3
 8006a00:	fb03 f908 	mul.w	r9, r3, r8
 8006a04:	ea6f 0909 	mvn.w	r9, r9
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a0e:	f1bc 0f09 	cmp.w	ip, #9
 8006a12:	d814      	bhi.n	8006a3e <_strtoul_l.constprop.0+0x86>
 8006a14:	4664      	mov	r4, ip
 8006a16:	42a3      	cmp	r3, r4
 8006a18:	dd22      	ble.n	8006a60 <_strtoul_l.constprop.0+0xa8>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	db1d      	blt.n	8006a5a <_strtoul_l.constprop.0+0xa2>
 8006a1e:	4580      	cmp	r8, r0
 8006a20:	d31b      	bcc.n	8006a5a <_strtoul_l.constprop.0+0xa2>
 8006a22:	d101      	bne.n	8006a28 <_strtoul_l.constprop.0+0x70>
 8006a24:	45a1      	cmp	r9, r4
 8006a26:	db18      	blt.n	8006a5a <_strtoul_l.constprop.0+0xa2>
 8006a28:	fb00 4003 	mla	r0, r0, r3, r4
 8006a2c:	2701      	movs	r7, #1
 8006a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a32:	e7ea      	b.n	8006a0a <_strtoul_l.constprop.0+0x52>
 8006a34:	2c2b      	cmp	r4, #43	; 0x2b
 8006a36:	bf04      	itt	eq
 8006a38:	782c      	ldrbeq	r4, [r5, #0]
 8006a3a:	1c85      	addeq	r5, r0, #2
 8006a3c:	e7cd      	b.n	80069da <_strtoul_l.constprop.0+0x22>
 8006a3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a42:	f1bc 0f19 	cmp.w	ip, #25
 8006a46:	d801      	bhi.n	8006a4c <_strtoul_l.constprop.0+0x94>
 8006a48:	3c37      	subs	r4, #55	; 0x37
 8006a4a:	e7e4      	b.n	8006a16 <_strtoul_l.constprop.0+0x5e>
 8006a4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a50:	f1bc 0f19 	cmp.w	ip, #25
 8006a54:	d804      	bhi.n	8006a60 <_strtoul_l.constprop.0+0xa8>
 8006a56:	3c57      	subs	r4, #87	; 0x57
 8006a58:	e7dd      	b.n	8006a16 <_strtoul_l.constprop.0+0x5e>
 8006a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a5e:	e7e6      	b.n	8006a2e <_strtoul_l.constprop.0+0x76>
 8006a60:	2f00      	cmp	r7, #0
 8006a62:	da07      	bge.n	8006a74 <_strtoul_l.constprop.0+0xbc>
 8006a64:	2322      	movs	r3, #34	; 0x22
 8006a66:	f8ce 3000 	str.w	r3, [lr]
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	b932      	cbnz	r2, 8006a7e <_strtoul_l.constprop.0+0xc6>
 8006a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a74:	b106      	cbz	r6, 8006a78 <_strtoul_l.constprop.0+0xc0>
 8006a76:	4240      	negs	r0, r0
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	d0f9      	beq.n	8006a70 <_strtoul_l.constprop.0+0xb8>
 8006a7c:	b107      	cbz	r7, 8006a80 <_strtoul_l.constprop.0+0xc8>
 8006a7e:	1e69      	subs	r1, r5, #1
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	e7f5      	b.n	8006a70 <_strtoul_l.constprop.0+0xb8>
 8006a84:	2430      	movs	r4, #48	; 0x30
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1b5      	bne.n	80069f6 <_strtoul_l.constprop.0+0x3e>
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	e7b3      	b.n	80069f6 <_strtoul_l.constprop.0+0x3e>
 8006a8e:	2c30      	cmp	r4, #48	; 0x30
 8006a90:	d0a9      	beq.n	80069e6 <_strtoul_l.constprop.0+0x2e>
 8006a92:	230a      	movs	r3, #10
 8006a94:	e7af      	b.n	80069f6 <_strtoul_l.constprop.0+0x3e>
 8006a96:	bf00      	nop
 8006a98:	08007839 	.word	0x08007839

08006a9c <_strtoul_r>:
 8006a9c:	f7ff bf8c 	b.w	80069b8 <_strtoul_l.constprop.0>

08006aa0 <__submore>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d11d      	bne.n	8006aec <__submore+0x4c>
 8006ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ab4:	f7ff fa14 	bl	8005ee0 <_malloc_r>
 8006ab8:	b918      	cbnz	r0, 8006ac2 <__submore+0x22>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac6:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ac8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006acc:	6360      	str	r0, [r4, #52]	; 0x34
 8006ace:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006ad2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006ad6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006ada:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006ade:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006ae2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006ae6:	6020      	str	r0, [r4, #0]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7e8      	b.n	8006abe <__submore+0x1e>
 8006aec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006aee:	0077      	lsls	r7, r6, #1
 8006af0:	463a      	mov	r2, r7
 8006af2:	f000 fa2d 	bl	8006f50 <_realloc_r>
 8006af6:	4605      	mov	r5, r0
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d0de      	beq.n	8006aba <__submore+0x1a>
 8006afc:	eb00 0806 	add.w	r8, r0, r6
 8006b00:	4601      	mov	r1, r0
 8006b02:	4632      	mov	r2, r6
 8006b04:	4640      	mov	r0, r8
 8006b06:	f7fe fc99 	bl	800543c <memcpy>
 8006b0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006b0e:	f8c4 8000 	str.w	r8, [r4]
 8006b12:	e7e9      	b.n	8006ae8 <__submore+0x48>

08006b14 <__ascii_wctomb>:
 8006b14:	b149      	cbz	r1, 8006b2a <__ascii_wctomb+0x16>
 8006b16:	2aff      	cmp	r2, #255	; 0xff
 8006b18:	bf85      	ittet	hi
 8006b1a:	238a      	movhi	r3, #138	; 0x8a
 8006b1c:	6003      	strhi	r3, [r0, #0]
 8006b1e:	700a      	strbls	r2, [r1, #0]
 8006b20:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b24:	bf98      	it	ls
 8006b26:	2001      	movls	r0, #1
 8006b28:	4770      	bx	lr
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4770      	bx	lr
	...

08006b30 <__assert_func>:
 8006b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b32:	4614      	mov	r4, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <__assert_func+0x2c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	68d8      	ldr	r0, [r3, #12]
 8006b3e:	b14c      	cbz	r4, 8006b54 <__assert_func+0x24>
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <__assert_func+0x30>)
 8006b42:	9100      	str	r1, [sp, #0]
 8006b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b48:	4906      	ldr	r1, [pc, #24]	; (8006b64 <__assert_func+0x34>)
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	f000 f9a6 	bl	8006e9c <fiprintf>
 8006b50:	f000 fc46 	bl	80073e0 <abort>
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <__assert_func+0x38>)
 8006b56:	461c      	mov	r4, r3
 8006b58:	e7f3      	b.n	8006b42 <__assert_func+0x12>
 8006b5a:	bf00      	nop
 8006b5c:	20000010 	.word	0x20000010
 8006b60:	08007bc8 	.word	0x08007bc8
 8006b64:	08007bd5 	.word	0x08007bd5
 8006b68:	08007c03 	.word	0x08007c03

08006b6c <__sflush_r>:
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	0710      	lsls	r0, r2, #28
 8006b76:	460c      	mov	r4, r1
 8006b78:	d458      	bmi.n	8006c2c <__sflush_r+0xc0>
 8006b7a:	684b      	ldr	r3, [r1, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc05      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dc02      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d0f9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b98:	682f      	ldr	r7, [r5, #0]
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	d032      	beq.n	8006c04 <__sflush_r+0x98>
 8006b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	075a      	lsls	r2, r3, #29
 8006ba4:	d505      	bpl.n	8006bb2 <__sflush_r+0x46>
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	1ac0      	subs	r0, r0, r3
 8006baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bac:	b10b      	cbz	r3, 8006bb2 <__sflush_r+0x46>
 8006bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b0      	blx	r6
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	d106      	bne.n	8006bd2 <__sflush_r+0x66>
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	291d      	cmp	r1, #29
 8006bc8:	d82c      	bhi.n	8006c24 <__sflush_r+0xb8>
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <__sflush_r+0x108>)
 8006bcc:	40ca      	lsrs	r2, r1
 8006bce:	07d6      	lsls	r6, r2, #31
 8006bd0:	d528      	bpl.n	8006c24 <__sflush_r+0xb8>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6062      	str	r2, [r4, #4]
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	d504      	bpl.n	8006be8 <__sflush_r+0x7c>
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0x7a>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b903      	cbnz	r3, 8006be8 <__sflush_r+0x7c>
 8006be6:	6560      	str	r0, [r4, #84]	; 0x54
 8006be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0ca      	beq.n	8006b86 <__sflush_r+0x1a>
 8006bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <__sflush_r+0x92>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f7ff f905 	bl	8005e08 <_free_r>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	6360      	str	r0, [r4, #52]	; 0x34
 8006c02:	e7c1      	b.n	8006b88 <__sflush_r+0x1c>
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	2301      	movs	r3, #1
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c41      	adds	r1, r0, #1
 8006c0e:	d1c7      	bne.n	8006ba0 <__sflush_r+0x34>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c4      	beq.n	8006ba0 <__sflush_r+0x34>
 8006c16:	2b1d      	cmp	r3, #29
 8006c18:	d001      	beq.n	8006c1e <__sflush_r+0xb2>
 8006c1a:	2b16      	cmp	r3, #22
 8006c1c:	d101      	bne.n	8006c22 <__sflush_r+0xb6>
 8006c1e:	602f      	str	r7, [r5, #0]
 8006c20:	e7b1      	b.n	8006b86 <__sflush_r+0x1a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e7ad      	b.n	8006b88 <__sflush_r+0x1c>
 8006c2c:	690f      	ldr	r7, [r1, #16]
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	d0a9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006c32:	0793      	lsls	r3, r2, #30
 8006c34:	680e      	ldr	r6, [r1, #0]
 8006c36:	bf08      	it	eq
 8006c38:	694b      	ldreq	r3, [r1, #20]
 8006c3a:	600f      	str	r7, [r1, #0]
 8006c3c:	bf18      	it	ne
 8006c3e:	2300      	movne	r3, #0
 8006c40:	eba6 0807 	sub.w	r8, r6, r7
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	dd9c      	ble.n	8006b86 <__sflush_r+0x1a>
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c50:	4643      	mov	r3, r8
 8006c52:	463a      	mov	r2, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	dc06      	bgt.n	8006c6a <__sflush_r+0xfe>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e78e      	b.n	8006b88 <__sflush_r+0x1c>
 8006c6a:	4407      	add	r7, r0
 8006c6c:	eba8 0800 	sub.w	r8, r8, r0
 8006c70:	e7e9      	b.n	8006c46 <__sflush_r+0xda>
 8006c72:	bf00      	nop
 8006c74:	20400001 	.word	0x20400001

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6983      	ldr	r3, [r0, #24]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f000 f887 	bl	8006da0 <__sinit>
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <_fflush_r+0x6c>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d11b      	bne.n	8006cd0 <_fflush_r+0x58>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ef      	beq.n	8006c82 <_fflush_r+0xa>
 8006ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ca4:	07d0      	lsls	r0, r2, #31
 8006ca6:	d404      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006ca8:	0599      	lsls	r1, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f000 f927 	bl	8006f00 <__retarget_lock_acquire_recursive>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f7ff ff59 	bl	8006b6c <__sflush_r>
 8006cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cbc:	07da      	lsls	r2, r3, #31
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	d4e0      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	059b      	lsls	r3, r3, #22
 8006cc6:	d4dd      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cca:	f000 f91a 	bl	8006f02 <__retarget_lock_release_recursive>
 8006cce:	e7d9      	b.n	8006c84 <_fflush_r+0xc>
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <_fflush_r+0x70>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <_fflush_r+0x62>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7df      	b.n	8006c9a <_fflush_r+0x22>
 8006cda:	4b04      	ldr	r3, [pc, #16]	; (8006cec <_fflush_r+0x74>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7da      	b.n	8006c9a <_fflush_r+0x22>
 8006ce4:	08007c24 	.word	0x08007c24
 8006ce8:	08007c44 	.word	0x08007c44
 8006cec:	08007c04 	.word	0x08007c04

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	; 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	; 0x5c
 8006d0e:	f7fb fb8f 	bl	8002430 <memset>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x38>)
 8006d14:	6263      	str	r3, [r4, #36]	; 0x24
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x3c>)
 8006d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x40>)
 8006d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x44>)
 8006d20:	6224      	str	r4, [r4, #32]
 8006d22:	6323      	str	r3, [r4, #48]	; 0x30
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	080031d9 	.word	0x080031d9
 8006d2c:	080031ff 	.word	0x080031ff
 8006d30:	08003237 	.word	0x08003237
 8006d34:	0800325b 	.word	0x0800325b

08006d38 <_cleanup_r>:
 8006d38:	4901      	ldr	r1, [pc, #4]	; (8006d40 <_cleanup_r+0x8>)
 8006d3a:	f000 b8c1 	b.w	8006ec0 <_fwalk_reent>
 8006d3e:	bf00      	nop
 8006d40:	08006c79 	.word	0x08006c79

08006d44 <__sfmoreglue>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	2268      	movs	r2, #104	; 0x68
 8006d48:	1e4d      	subs	r5, r1, #1
 8006d4a:	4355      	muls	r5, r2
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d52:	f7ff f8c5 	bl	8005ee0 <_malloc_r>
 8006d56:	4604      	mov	r4, r0
 8006d58:	b140      	cbz	r0, 8006d6c <__sfmoreglue+0x28>
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d60:	300c      	adds	r0, #12
 8006d62:	60a0      	str	r0, [r4, #8]
 8006d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d68:	f7fb fb62 	bl	8002430 <memset>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}

08006d70 <__sfp_lock_acquire>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sfp_lock_acquire+0x8>)
 8006d72:	f000 b8c5 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20000641 	.word	0x20000641

08006d7c <__sfp_lock_release>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sfp_lock_release+0x8>)
 8006d7e:	f000 b8c0 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20000641 	.word	0x20000641

08006d88 <__sinit_lock_acquire>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__sinit_lock_acquire+0x8>)
 8006d8a:	f000 b8b9 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20000642 	.word	0x20000642

08006d94 <__sinit_lock_release>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sinit_lock_release+0x8>)
 8006d96:	f000 b8b4 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20000642 	.word	0x20000642

08006da0 <__sinit>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4604      	mov	r4, r0
 8006da4:	f7ff fff0 	bl	8006d88 <__sinit_lock_acquire>
 8006da8:	69a3      	ldr	r3, [r4, #24]
 8006daa:	b11b      	cbz	r3, 8006db4 <__sinit+0x14>
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	f7ff bff0 	b.w	8006d94 <__sinit_lock_release>
 8006db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006db8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <__sinit+0x68>)
 8006dbc:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <__sinit+0x6c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	bf04      	itt	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	61a3      	streq	r3, [r4, #24]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f820 	bl	8006e10 <__sfp>
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f81c 	bl	8006e10 <__sfp>
 8006dd8:	60a0      	str	r0, [r4, #8]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f818 	bl	8006e10 <__sfp>
 8006de0:	2200      	movs	r2, #0
 8006de2:	60e0      	str	r0, [r4, #12]
 8006de4:	2104      	movs	r1, #4
 8006de6:	6860      	ldr	r0, [r4, #4]
 8006de8:	f7ff ff82 	bl	8006cf0 <std>
 8006dec:	68a0      	ldr	r0, [r4, #8]
 8006dee:	2201      	movs	r2, #1
 8006df0:	2109      	movs	r1, #9
 8006df2:	f7ff ff7d 	bl	8006cf0 <std>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff ff78 	bl	8006cf0 <std>
 8006e00:	2301      	movs	r3, #1
 8006e02:	61a3      	str	r3, [r4, #24]
 8006e04:	e7d2      	b.n	8006dac <__sinit+0xc>
 8006e06:	bf00      	nop
 8006e08:	080077ac 	.word	0x080077ac
 8006e0c:	08006d39 	.word	0x08006d39

08006e10 <__sfp>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	4607      	mov	r7, r0
 8006e14:	f7ff ffac 	bl	8006d70 <__sfp_lock_acquire>
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <__sfp+0x84>)
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	69b3      	ldr	r3, [r6, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__sfp+0x16>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffbd 	bl	8006da0 <__sinit>
 8006e26:	3648      	adds	r6, #72	; 0x48
 8006e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	d503      	bpl.n	8006e38 <__sfp+0x28>
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	b30b      	cbz	r3, 8006e78 <__sfp+0x68>
 8006e34:	6836      	ldr	r6, [r6, #0]
 8006e36:	e7f7      	b.n	8006e28 <__sfp+0x18>
 8006e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e3c:	b9d5      	cbnz	r5, 8006e74 <__sfp+0x64>
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <__sfp+0x88>)
 8006e40:	60e3      	str	r3, [r4, #12]
 8006e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e46:	6665      	str	r5, [r4, #100]	; 0x64
 8006e48:	f000 f859 	bl	8006efe <__retarget_lock_init_recursive>
 8006e4c:	f7ff ff96 	bl	8006d7c <__sfp_lock_release>
 8006e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e58:	6025      	str	r5, [r4, #0]
 8006e5a:	61a5      	str	r5, [r4, #24]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e64:	f7fb fae4 	bl	8002430 <memset>
 8006e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e70:	4620      	mov	r0, r4
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	3468      	adds	r4, #104	; 0x68
 8006e76:	e7d9      	b.n	8006e2c <__sfp+0x1c>
 8006e78:	2104      	movs	r1, #4
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ff62 	bl	8006d44 <__sfmoreglue>
 8006e80:	4604      	mov	r4, r0
 8006e82:	6030      	str	r0, [r6, #0]
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1d5      	bne.n	8006e34 <__sfp+0x24>
 8006e88:	f7ff ff78 	bl	8006d7c <__sfp_lock_release>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	e7ee      	b.n	8006e70 <__sfp+0x60>
 8006e92:	bf00      	nop
 8006e94:	080077ac 	.word	0x080077ac
 8006e98:	ffff0001 	.word	0xffff0001

08006e9c <fiprintf>:
 8006e9c:	b40e      	push	{r1, r2, r3}
 8006e9e:	b503      	push	{r0, r1, lr}
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	ab03      	add	r3, sp, #12
 8006ea4:	4805      	ldr	r0, [pc, #20]	; (8006ebc <fiprintf+0x20>)
 8006ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f000 f8a7 	bl	8007000 <_vfiprintf_r>
 8006eb2:	b002      	add	sp, #8
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	b003      	add	sp, #12
 8006eba:	4770      	bx	lr
 8006ebc:	20000010 	.word	0x20000010

08006ec0 <_fwalk_reent>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	4688      	mov	r8, r1
 8006ec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ecc:	2700      	movs	r7, #0
 8006ece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed6:	d505      	bpl.n	8006ee4 <_fwalk_reent+0x24>
 8006ed8:	6824      	ldr	r4, [r4, #0]
 8006eda:	2c00      	cmp	r4, #0
 8006edc:	d1f7      	bne.n	8006ece <_fwalk_reent+0xe>
 8006ede:	4638      	mov	r0, r7
 8006ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee4:	89ab      	ldrh	r3, [r5, #12]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d907      	bls.n	8006efa <_fwalk_reent+0x3a>
 8006eea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	d003      	beq.n	8006efa <_fwalk_reent+0x3a>
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	47c0      	blx	r8
 8006ef8:	4307      	orrs	r7, r0
 8006efa:	3568      	adds	r5, #104	; 0x68
 8006efc:	e7e9      	b.n	8006ed2 <_fwalk_reent+0x12>

08006efe <__retarget_lock_init_recursive>:
 8006efe:	4770      	bx	lr

08006f00 <__retarget_lock_acquire_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <__retarget_lock_release_recursive>:
 8006f02:	4770      	bx	lr

08006f04 <memmove>:
 8006f04:	4288      	cmp	r0, r1
 8006f06:	b510      	push	{r4, lr}
 8006f08:	eb01 0402 	add.w	r4, r1, r2
 8006f0c:	d902      	bls.n	8006f14 <memmove+0x10>
 8006f0e:	4284      	cmp	r4, r0
 8006f10:	4623      	mov	r3, r4
 8006f12:	d807      	bhi.n	8006f24 <memmove+0x20>
 8006f14:	1e43      	subs	r3, r0, #1
 8006f16:	42a1      	cmp	r1, r4
 8006f18:	d008      	beq.n	8006f2c <memmove+0x28>
 8006f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f22:	e7f8      	b.n	8006f16 <memmove+0x12>
 8006f24:	4402      	add	r2, r0
 8006f26:	4601      	mov	r1, r0
 8006f28:	428a      	cmp	r2, r1
 8006f2a:	d100      	bne.n	8006f2e <memmove+0x2a>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f36:	e7f7      	b.n	8006f28 <memmove+0x24>

08006f38 <__malloc_lock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_lock+0x8>)
 8006f3a:	f7ff bfe1 	b.w	8006f00 <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20000640 	.word	0x20000640

08006f44 <__malloc_unlock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__malloc_unlock+0x8>)
 8006f46:	f7ff bfdc 	b.w	8006f02 <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20000640 	.word	0x20000640

08006f50 <_realloc_r>:
 8006f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	4680      	mov	r8, r0
 8006f56:	4614      	mov	r4, r2
 8006f58:	460e      	mov	r6, r1
 8006f5a:	b921      	cbnz	r1, 8006f66 <_realloc_r+0x16>
 8006f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	4611      	mov	r1, r2
 8006f62:	f7fe bfbd 	b.w	8005ee0 <_malloc_r>
 8006f66:	b92a      	cbnz	r2, 8006f74 <_realloc_r+0x24>
 8006f68:	f7fe ff4e 	bl	8005e08 <_free_r>
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	f000 faa0 	bl	80074b8 <_malloc_usable_size_r>
 8006f78:	4284      	cmp	r4, r0
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	d802      	bhi.n	8006f84 <_realloc_r+0x34>
 8006f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f82:	d812      	bhi.n	8006faa <_realloc_r+0x5a>
 8006f84:	4621      	mov	r1, r4
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7fe ffaa 	bl	8005ee0 <_malloc_r>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0ed      	beq.n	8006f6e <_realloc_r+0x1e>
 8006f92:	42bc      	cmp	r4, r7
 8006f94:	4622      	mov	r2, r4
 8006f96:	4631      	mov	r1, r6
 8006f98:	bf28      	it	cs
 8006f9a:	463a      	movcs	r2, r7
 8006f9c:	f7fe fa4e 	bl	800543c <memcpy>
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f7fe ff30 	bl	8005e08 <_free_r>
 8006fa8:	e7e1      	b.n	8006f6e <_realloc_r+0x1e>
 8006faa:	4635      	mov	r5, r6
 8006fac:	e7df      	b.n	8006f6e <_realloc_r+0x1e>

08006fae <__sfputc_r>:
 8006fae:	6893      	ldr	r3, [r2, #8]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	b410      	push	{r4}
 8006fb6:	6093      	str	r3, [r2, #8]
 8006fb8:	da08      	bge.n	8006fcc <__sfputc_r+0x1e>
 8006fba:	6994      	ldr	r4, [r2, #24]
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	db01      	blt.n	8006fc4 <__sfputc_r+0x16>
 8006fc0:	290a      	cmp	r1, #10
 8006fc2:	d103      	bne.n	8006fcc <__sfputc_r+0x1e>
 8006fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc8:	f000 b94a 	b.w	8007260 <__swbuf_r>
 8006fcc:	6813      	ldr	r3, [r2, #0]
 8006fce:	1c58      	adds	r0, r3, #1
 8006fd0:	6010      	str	r0, [r2, #0]
 8006fd2:	7019      	strb	r1, [r3, #0]
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <__sfputs_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	18d5      	adds	r5, r2, r3
 8006fe6:	42ac      	cmp	r4, r5
 8006fe8:	d101      	bne.n	8006fee <__sfputs_r+0x12>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e007      	b.n	8006ffe <__sfputs_r+0x22>
 8006fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff ffda 	bl	8006fae <__sfputc_r>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d1f3      	bne.n	8006fe6 <__sfputs_r+0xa>
 8006ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007000 <_vfiprintf_r>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	460d      	mov	r5, r1
 8007006:	b09d      	sub	sp, #116	; 0x74
 8007008:	4614      	mov	r4, r2
 800700a:	4698      	mov	r8, r3
 800700c:	4606      	mov	r6, r0
 800700e:	b118      	cbz	r0, 8007018 <_vfiprintf_r+0x18>
 8007010:	6983      	ldr	r3, [r0, #24]
 8007012:	b90b      	cbnz	r3, 8007018 <_vfiprintf_r+0x18>
 8007014:	f7ff fec4 	bl	8006da0 <__sinit>
 8007018:	4b89      	ldr	r3, [pc, #548]	; (8007240 <_vfiprintf_r+0x240>)
 800701a:	429d      	cmp	r5, r3
 800701c:	d11b      	bne.n	8007056 <_vfiprintf_r+0x56>
 800701e:	6875      	ldr	r5, [r6, #4]
 8007020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007022:	07d9      	lsls	r1, r3, #31
 8007024:	d405      	bmi.n	8007032 <_vfiprintf_r+0x32>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	059a      	lsls	r2, r3, #22
 800702a:	d402      	bmi.n	8007032 <_vfiprintf_r+0x32>
 800702c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800702e:	f7ff ff67 	bl	8006f00 <__retarget_lock_acquire_recursive>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	d501      	bpl.n	800703c <_vfiprintf_r+0x3c>
 8007038:	692b      	ldr	r3, [r5, #16]
 800703a:	b9eb      	cbnz	r3, 8007078 <_vfiprintf_r+0x78>
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f960 	bl	8007304 <__swsetup_r>
 8007044:	b1c0      	cbz	r0, 8007078 <_vfiprintf_r+0x78>
 8007046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007048:	07dc      	lsls	r4, r3, #31
 800704a:	d50e      	bpl.n	800706a <_vfiprintf_r+0x6a>
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	b01d      	add	sp, #116	; 0x74
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	4b7b      	ldr	r3, [pc, #492]	; (8007244 <_vfiprintf_r+0x244>)
 8007058:	429d      	cmp	r5, r3
 800705a:	d101      	bne.n	8007060 <_vfiprintf_r+0x60>
 800705c:	68b5      	ldr	r5, [r6, #8]
 800705e:	e7df      	b.n	8007020 <_vfiprintf_r+0x20>
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <_vfiprintf_r+0x248>)
 8007062:	429d      	cmp	r5, r3
 8007064:	bf08      	it	eq
 8007066:	68f5      	ldreq	r5, [r6, #12]
 8007068:	e7da      	b.n	8007020 <_vfiprintf_r+0x20>
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	0598      	lsls	r0, r3, #22
 800706e:	d4ed      	bmi.n	800704c <_vfiprintf_r+0x4c>
 8007070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007072:	f7ff ff46 	bl	8006f02 <__retarget_lock_release_recursive>
 8007076:	e7e9      	b.n	800704c <_vfiprintf_r+0x4c>
 8007078:	2300      	movs	r3, #0
 800707a:	9309      	str	r3, [sp, #36]	; 0x24
 800707c:	2320      	movs	r3, #32
 800707e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007082:	f8cd 800c 	str.w	r8, [sp, #12]
 8007086:	2330      	movs	r3, #48	; 0x30
 8007088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800724c <_vfiprintf_r+0x24c>
 800708c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007090:	f04f 0901 	mov.w	r9, #1
 8007094:	4623      	mov	r3, r4
 8007096:	469a      	mov	sl, r3
 8007098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800709c:	b10a      	cbz	r2, 80070a2 <_vfiprintf_r+0xa2>
 800709e:	2a25      	cmp	r2, #37	; 0x25
 80070a0:	d1f9      	bne.n	8007096 <_vfiprintf_r+0x96>
 80070a2:	ebba 0b04 	subs.w	fp, sl, r4
 80070a6:	d00b      	beq.n	80070c0 <_vfiprintf_r+0xc0>
 80070a8:	465b      	mov	r3, fp
 80070aa:	4622      	mov	r2, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ff94 	bl	8006fdc <__sfputs_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	f000 80aa 	beq.w	800720e <_vfiprintf_r+0x20e>
 80070ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070bc:	445a      	add	r2, fp
 80070be:	9209      	str	r2, [sp, #36]	; 0x24
 80070c0:	f89a 3000 	ldrb.w	r3, [sl]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a2 	beq.w	800720e <_vfiprintf_r+0x20e>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d4:	f10a 0a01 	add.w	sl, sl, #1
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070e0:	931a      	str	r3, [sp, #104]	; 0x68
 80070e2:	4654      	mov	r4, sl
 80070e4:	2205      	movs	r2, #5
 80070e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ea:	4858      	ldr	r0, [pc, #352]	; (800724c <_vfiprintf_r+0x24c>)
 80070ec:	f7f9 f890 	bl	8000210 <memchr>
 80070f0:	9a04      	ldr	r2, [sp, #16]
 80070f2:	b9d8      	cbnz	r0, 800712c <_vfiprintf_r+0x12c>
 80070f4:	06d1      	lsls	r1, r2, #27
 80070f6:	bf44      	itt	mi
 80070f8:	2320      	movmi	r3, #32
 80070fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fe:	0713      	lsls	r3, r2, #28
 8007100:	bf44      	itt	mi
 8007102:	232b      	movmi	r3, #43	; 0x2b
 8007104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007108:	f89a 3000 	ldrb.w	r3, [sl]
 800710c:	2b2a      	cmp	r3, #42	; 0x2a
 800710e:	d015      	beq.n	800713c <_vfiprintf_r+0x13c>
 8007110:	9a07      	ldr	r2, [sp, #28]
 8007112:	4654      	mov	r4, sl
 8007114:	2000      	movs	r0, #0
 8007116:	f04f 0c0a 	mov.w	ip, #10
 800711a:	4621      	mov	r1, r4
 800711c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007120:	3b30      	subs	r3, #48	; 0x30
 8007122:	2b09      	cmp	r3, #9
 8007124:	d94e      	bls.n	80071c4 <_vfiprintf_r+0x1c4>
 8007126:	b1b0      	cbz	r0, 8007156 <_vfiprintf_r+0x156>
 8007128:	9207      	str	r2, [sp, #28]
 800712a:	e014      	b.n	8007156 <_vfiprintf_r+0x156>
 800712c:	eba0 0308 	sub.w	r3, r0, r8
 8007130:	fa09 f303 	lsl.w	r3, r9, r3
 8007134:	4313      	orrs	r3, r2
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	46a2      	mov	sl, r4
 800713a:	e7d2      	b.n	80070e2 <_vfiprintf_r+0xe2>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	1d19      	adds	r1, r3, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	9103      	str	r1, [sp, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfbb      	ittet	lt
 8007148:	425b      	neglt	r3, r3
 800714a:	f042 0202 	orrlt.w	r2, r2, #2
 800714e:	9307      	strge	r3, [sp, #28]
 8007150:	9307      	strlt	r3, [sp, #28]
 8007152:	bfb8      	it	lt
 8007154:	9204      	strlt	r2, [sp, #16]
 8007156:	7823      	ldrb	r3, [r4, #0]
 8007158:	2b2e      	cmp	r3, #46	; 0x2e
 800715a:	d10c      	bne.n	8007176 <_vfiprintf_r+0x176>
 800715c:	7863      	ldrb	r3, [r4, #1]
 800715e:	2b2a      	cmp	r3, #42	; 0x2a
 8007160:	d135      	bne.n	80071ce <_vfiprintf_r+0x1ce>
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	9203      	str	r2, [sp, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfb8      	it	lt
 800716e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007172:	3402      	adds	r4, #2
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800725c <_vfiprintf_r+0x25c>
 800717a:	7821      	ldrb	r1, [r4, #0]
 800717c:	2203      	movs	r2, #3
 800717e:	4650      	mov	r0, sl
 8007180:	f7f9 f846 	bl	8000210 <memchr>
 8007184:	b140      	cbz	r0, 8007198 <_vfiprintf_r+0x198>
 8007186:	2340      	movs	r3, #64	; 0x40
 8007188:	eba0 000a 	sub.w	r0, r0, sl
 800718c:	fa03 f000 	lsl.w	r0, r3, r0
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	4303      	orrs	r3, r0
 8007194:	3401      	adds	r4, #1
 8007196:	9304      	str	r3, [sp, #16]
 8007198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719c:	482c      	ldr	r0, [pc, #176]	; (8007250 <_vfiprintf_r+0x250>)
 800719e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071a2:	2206      	movs	r2, #6
 80071a4:	f7f9 f834 	bl	8000210 <memchr>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d03f      	beq.n	800722c <_vfiprintf_r+0x22c>
 80071ac:	4b29      	ldr	r3, [pc, #164]	; (8007254 <_vfiprintf_r+0x254>)
 80071ae:	bb1b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x1f8>
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	3307      	adds	r3, #7
 80071b4:	f023 0307 	bic.w	r3, r3, #7
 80071b8:	3308      	adds	r3, #8
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071be:	443b      	add	r3, r7
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	e767      	b.n	8007094 <_vfiprintf_r+0x94>
 80071c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c8:	460c      	mov	r4, r1
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7a5      	b.n	800711a <_vfiprintf_r+0x11a>
 80071ce:	2300      	movs	r3, #0
 80071d0:	3401      	adds	r4, #1
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	4619      	mov	r1, r3
 80071d6:	f04f 0c0a 	mov.w	ip, #10
 80071da:	4620      	mov	r0, r4
 80071dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e0:	3a30      	subs	r2, #48	; 0x30
 80071e2:	2a09      	cmp	r2, #9
 80071e4:	d903      	bls.n	80071ee <_vfiprintf_r+0x1ee>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0c5      	beq.n	8007176 <_vfiprintf_r+0x176>
 80071ea:	9105      	str	r1, [sp, #20]
 80071ec:	e7c3      	b.n	8007176 <_vfiprintf_r+0x176>
 80071ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80071f2:	4604      	mov	r4, r0
 80071f4:	2301      	movs	r3, #1
 80071f6:	e7f0      	b.n	80071da <_vfiprintf_r+0x1da>
 80071f8:	ab03      	add	r3, sp, #12
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	462a      	mov	r2, r5
 80071fe:	4b16      	ldr	r3, [pc, #88]	; (8007258 <_vfiprintf_r+0x258>)
 8007200:	a904      	add	r1, sp, #16
 8007202:	4630      	mov	r0, r6
 8007204:	f7fb f9bc 	bl	8002580 <_printf_float>
 8007208:	4607      	mov	r7, r0
 800720a:	1c78      	adds	r0, r7, #1
 800720c:	d1d6      	bne.n	80071bc <_vfiprintf_r+0x1bc>
 800720e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007210:	07d9      	lsls	r1, r3, #31
 8007212:	d405      	bmi.n	8007220 <_vfiprintf_r+0x220>
 8007214:	89ab      	ldrh	r3, [r5, #12]
 8007216:	059a      	lsls	r2, r3, #22
 8007218:	d402      	bmi.n	8007220 <_vfiprintf_r+0x220>
 800721a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721c:	f7ff fe71 	bl	8006f02 <__retarget_lock_release_recursive>
 8007220:	89ab      	ldrh	r3, [r5, #12]
 8007222:	065b      	lsls	r3, r3, #25
 8007224:	f53f af12 	bmi.w	800704c <_vfiprintf_r+0x4c>
 8007228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722a:	e711      	b.n	8007050 <_vfiprintf_r+0x50>
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <_vfiprintf_r+0x258>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4630      	mov	r0, r6
 8007238:	f7fb fc46 	bl	8002ac8 <_printf_i>
 800723c:	e7e4      	b.n	8007208 <_vfiprintf_r+0x208>
 800723e:	bf00      	nop
 8007240:	08007c24 	.word	0x08007c24
 8007244:	08007c44 	.word	0x08007c44
 8007248:	08007c04 	.word	0x08007c04
 800724c:	08007b9c 	.word	0x08007b9c
 8007250:	08007ba6 	.word	0x08007ba6
 8007254:	08002581 	.word	0x08002581
 8007258:	08006fdd 	.word	0x08006fdd
 800725c:	08007ba2 	.word	0x08007ba2

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	460e      	mov	r6, r1
 8007264:	4614      	mov	r4, r2
 8007266:	4605      	mov	r5, r0
 8007268:	b118      	cbz	r0, 8007272 <__swbuf_r+0x12>
 800726a:	6983      	ldr	r3, [r0, #24]
 800726c:	b90b      	cbnz	r3, 8007272 <__swbuf_r+0x12>
 800726e:	f7ff fd97 	bl	8006da0 <__sinit>
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <__swbuf_r+0x98>)
 8007274:	429c      	cmp	r4, r3
 8007276:	d12b      	bne.n	80072d0 <__swbuf_r+0x70>
 8007278:	686c      	ldr	r4, [r5, #4]
 800727a:	69a3      	ldr	r3, [r4, #24]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	071a      	lsls	r2, r3, #28
 8007282:	d52f      	bpl.n	80072e4 <__swbuf_r+0x84>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	b36b      	cbz	r3, 80072e4 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	b2f6      	uxtb	r6, r6
 8007292:	4283      	cmp	r3, r0
 8007294:	4637      	mov	r7, r6
 8007296:	dc04      	bgt.n	80072a2 <__swbuf_r+0x42>
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f7ff fcec 	bl	8006c78 <_fflush_r>
 80072a0:	bb30      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	701e      	strb	r6, [r3, #0]
 80072b0:	6963      	ldr	r3, [r4, #20]
 80072b2:	3001      	adds	r0, #1
 80072b4:	4283      	cmp	r3, r0
 80072b6:	d004      	beq.n	80072c2 <__swbuf_r+0x62>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	07db      	lsls	r3, r3, #31
 80072bc:	d506      	bpl.n	80072cc <__swbuf_r+0x6c>
 80072be:	2e0a      	cmp	r6, #10
 80072c0:	d104      	bne.n	80072cc <__swbuf_r+0x6c>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7ff fcd7 	bl	8006c78 <_fflush_r>
 80072ca:	b988      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <__swbuf_r+0x9c>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swbuf_r+0x7a>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7cf      	b.n	800727a <__swbuf_r+0x1a>
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <__swbuf_r+0xa0>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7ca      	b.n	800727a <__swbuf_r+0x1a>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f80c 	bl	8007304 <__swsetup_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0cb      	beq.n	8007288 <__swbuf_r+0x28>
 80072f0:	f04f 37ff 	mov.w	r7, #4294967295
 80072f4:	e7ea      	b.n	80072cc <__swbuf_r+0x6c>
 80072f6:	bf00      	nop
 80072f8:	08007c24 	.word	0x08007c24
 80072fc:	08007c44 	.word	0x08007c44
 8007300:	08007c04 	.word	0x08007c04

08007304 <__swsetup_r>:
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <__swsetup_r+0xcc>)
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	681d      	ldr	r5, [r3, #0]
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	b125      	cbz	r5, 800731a <__swsetup_r+0x16>
 8007310:	69ab      	ldr	r3, [r5, #24]
 8007312:	b913      	cbnz	r3, 800731a <__swsetup_r+0x16>
 8007314:	4628      	mov	r0, r5
 8007316:	f7ff fd43 	bl	8006da0 <__sinit>
 800731a:	4b2e      	ldr	r3, [pc, #184]	; (80073d4 <__swsetup_r+0xd0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d10f      	bne.n	8007340 <__swsetup_r+0x3c>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007328:	0719      	lsls	r1, r3, #28
 800732a:	d42c      	bmi.n	8007386 <__swsetup_r+0x82>
 800732c:	06dd      	lsls	r5, r3, #27
 800732e:	d411      	bmi.n	8007354 <__swsetup_r+0x50>
 8007330:	2309      	movs	r3, #9
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e03e      	b.n	80073be <__swsetup_r+0xba>
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <__swsetup_r+0xd4>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <__swsetup_r+0x46>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7eb      	b.n	8007322 <__swsetup_r+0x1e>
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <__swsetup_r+0xd8>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7e6      	b.n	8007322 <__swsetup_r+0x1e>
 8007354:	0758      	lsls	r0, r3, #29
 8007356:	d512      	bpl.n	800737e <__swsetup_r+0x7a>
 8007358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800735a:	b141      	cbz	r1, 800736e <__swsetup_r+0x6a>
 800735c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__swsetup_r+0x66>
 8007364:	4630      	mov	r0, r6
 8007366:	f7fe fd4f 	bl	8005e08 <_free_r>
 800736a:	2300      	movs	r3, #0
 800736c:	6363      	str	r3, [r4, #52]	; 0x34
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b94b      	cbnz	r3, 800739e <__swsetup_r+0x9a>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007394:	d003      	beq.n	800739e <__swsetup_r+0x9a>
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f000 f84d 	bl	8007438 <__smakebuf_r>
 800739e:	89a0      	ldrh	r0, [r4, #12]
 80073a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a4:	f010 0301 	ands.w	r3, r0, #1
 80073a8:	d00a      	beq.n	80073c0 <__swsetup_r+0xbc>
 80073aa:	2300      	movs	r3, #0
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6963      	ldr	r3, [r4, #20]
 80073b0:	425b      	negs	r3, r3
 80073b2:	61a3      	str	r3, [r4, #24]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b943      	cbnz	r3, 80073ca <__swsetup_r+0xc6>
 80073b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073bc:	d1ba      	bne.n	8007334 <__swsetup_r+0x30>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	0781      	lsls	r1, r0, #30
 80073c2:	bf58      	it	pl
 80073c4:	6963      	ldrpl	r3, [r4, #20]
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	e7f4      	b.n	80073b4 <__swsetup_r+0xb0>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7f7      	b.n	80073be <__swsetup_r+0xba>
 80073ce:	bf00      	nop
 80073d0:	20000010 	.word	0x20000010
 80073d4:	08007c24 	.word	0x08007c24
 80073d8:	08007c44 	.word	0x08007c44
 80073dc:	08007c04 	.word	0x08007c04

080073e0 <abort>:
 80073e0:	b508      	push	{r3, lr}
 80073e2:	2006      	movs	r0, #6
 80073e4:	f000 f898 	bl	8007518 <raise>
 80073e8:	2001      	movs	r0, #1
 80073ea:	f7f9 ff43 	bl	8001274 <_exit>

080073ee <__swhatbuf_r>:
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	460e      	mov	r6, r1
 80073f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f6:	2900      	cmp	r1, #0
 80073f8:	b096      	sub	sp, #88	; 0x58
 80073fa:	4614      	mov	r4, r2
 80073fc:	461d      	mov	r5, r3
 80073fe:	da08      	bge.n	8007412 <__swhatbuf_r+0x24>
 8007400:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	602a      	str	r2, [r5, #0]
 8007408:	061a      	lsls	r2, r3, #24
 800740a:	d410      	bmi.n	800742e <__swhatbuf_r+0x40>
 800740c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007410:	e00e      	b.n	8007430 <__swhatbuf_r+0x42>
 8007412:	466a      	mov	r2, sp
 8007414:	f000 f89c 	bl	8007550 <_fstat_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	dbf1      	blt.n	8007400 <__swhatbuf_r+0x12>
 800741c:	9a01      	ldr	r2, [sp, #4]
 800741e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007426:	425a      	negs	r2, r3
 8007428:	415a      	adcs	r2, r3
 800742a:	602a      	str	r2, [r5, #0]
 800742c:	e7ee      	b.n	800740c <__swhatbuf_r+0x1e>
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	2000      	movs	r0, #0
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	b016      	add	sp, #88	; 0x58
 8007436:	bd70      	pop	{r4, r5, r6, pc}

08007438 <__smakebuf_r>:
 8007438:	898b      	ldrh	r3, [r1, #12]
 800743a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800743c:	079d      	lsls	r5, r3, #30
 800743e:	4606      	mov	r6, r0
 8007440:	460c      	mov	r4, r1
 8007442:	d507      	bpl.n	8007454 <__smakebuf_r+0x1c>
 8007444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	2301      	movs	r3, #1
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	b002      	add	sp, #8
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	ab01      	add	r3, sp, #4
 8007456:	466a      	mov	r2, sp
 8007458:	f7ff ffc9 	bl	80073ee <__swhatbuf_r>
 800745c:	9900      	ldr	r1, [sp, #0]
 800745e:	4605      	mov	r5, r0
 8007460:	4630      	mov	r0, r6
 8007462:	f7fe fd3d 	bl	8005ee0 <_malloc_r>
 8007466:	b948      	cbnz	r0, 800747c <__smakebuf_r+0x44>
 8007468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746c:	059a      	lsls	r2, r3, #22
 800746e:	d4ef      	bmi.n	8007450 <__smakebuf_r+0x18>
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	f043 0302 	orr.w	r3, r3, #2
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	e7e3      	b.n	8007444 <__smakebuf_r+0xc>
 800747c:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <__smakebuf_r+0x7c>)
 800747e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	6020      	str	r0, [r4, #0]
 8007484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	6163      	str	r3, [r4, #20]
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	6120      	str	r0, [r4, #16]
 8007492:	b15b      	cbz	r3, 80074ac <__smakebuf_r+0x74>
 8007494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f86b 	bl	8007574 <_isatty_r>
 800749e:	b128      	cbz	r0, 80074ac <__smakebuf_r+0x74>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	81a3      	strh	r3, [r4, #12]
 80074ac:	89a0      	ldrh	r0, [r4, #12]
 80074ae:	4305      	orrs	r5, r0
 80074b0:	81a5      	strh	r5, [r4, #12]
 80074b2:	e7cd      	b.n	8007450 <__smakebuf_r+0x18>
 80074b4:	08006d39 	.word	0x08006d39

080074b8 <_malloc_usable_size_r>:
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f18      	subs	r0, r3, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfbc      	itt	lt
 80074c2:	580b      	ldrlt	r3, [r1, r0]
 80074c4:	18c0      	addlt	r0, r0, r3
 80074c6:	4770      	bx	lr

080074c8 <_raise_r>:
 80074c8:	291f      	cmp	r1, #31
 80074ca:	b538      	push	{r3, r4, r5, lr}
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	d904      	bls.n	80074dc <_raise_r+0x14>
 80074d2:	2316      	movs	r3, #22
 80074d4:	6003      	str	r3, [r0, #0]
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074de:	b112      	cbz	r2, 80074e6 <_raise_r+0x1e>
 80074e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e4:	b94b      	cbnz	r3, 80074fa <_raise_r+0x32>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 f830 	bl	800754c <_getpid_r>
 80074ec:	462a      	mov	r2, r5
 80074ee:	4601      	mov	r1, r0
 80074f0:	4620      	mov	r0, r4
 80074f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f6:	f000 b817 	b.w	8007528 <_kill_r>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d00a      	beq.n	8007514 <_raise_r+0x4c>
 80074fe:	1c59      	adds	r1, r3, #1
 8007500:	d103      	bne.n	800750a <_raise_r+0x42>
 8007502:	2316      	movs	r3, #22
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	2001      	movs	r0, #1
 8007508:	e7e7      	b.n	80074da <_raise_r+0x12>
 800750a:	2400      	movs	r4, #0
 800750c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007510:	4628      	mov	r0, r5
 8007512:	4798      	blx	r3
 8007514:	2000      	movs	r0, #0
 8007516:	e7e0      	b.n	80074da <_raise_r+0x12>

08007518 <raise>:
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <raise+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f7ff bfd3 	b.w	80074c8 <_raise_r>
 8007522:	bf00      	nop
 8007524:	20000010 	.word	0x20000010

08007528 <_kill_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_kill_r+0x20>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f7f9 fe8d 	bl	8001254 <_kill>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d102      	bne.n	8007544 <_kill_r+0x1c>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b103      	cbz	r3, 8007544 <_kill_r+0x1c>
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	2000063c 	.word	0x2000063c

0800754c <_getpid_r>:
 800754c:	f7f9 be7a 	b.w	8001244 <_getpid>

08007550 <_fstat_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	; (8007570 <_fstat_r+0x20>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	f7f9 fed8 	bl	8001312 <_fstat>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d102      	bne.n	800756c <_fstat_r+0x1c>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b103      	cbz	r3, 800756c <_fstat_r+0x1c>
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	bd38      	pop	{r3, r4, r5, pc}
 800756e:	bf00      	nop
 8007570:	2000063c 	.word	0x2000063c

08007574 <_isatty_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d06      	ldr	r5, [pc, #24]	; (8007590 <_isatty_r+0x1c>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7f9 fed7 	bl	8001332 <_isatty>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_isatty_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_isatty_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	2000063c 	.word	0x2000063c

08007594 <_init>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr

080075a0 <_fini>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr
